const Map<String, String> editorFiles = {
  "editor.js":
      "var pointerX = 0;\r\nvar pointerY = 0;\r\ndocument.onmousemove = function(event) {\r\n\tpointerX = event.pageX;\r\n\tpointerY = event.pageY;\r\n}\r\n\r\nfunction showModalError(title, message) {\r\n\tconst messageElement = document.createElement(\"span\");\r\n\tmessageElement.className = \"modal-row-label\";\r\n\tmessageElement.innerHTML = message;\r\n\tshowModalForm(title, messageElement);\r\n}\r\n\r\nfunction showModalForm(title, form, onOk, canClose = true) {\r\n\tconst closeFunction = () => document.body.removeChild(fullScreen);\r\n\r\n\tconst modal = document.createElement(\"column\");\r\n\tmodal.className = \"modal-form\";\r\n\r\n\tconst titleHolder = document.createElement(\"row\");\r\n\ttitleHolder.className = \"modal-form-title\";\r\n\tmodal.appendChild(titleHolder);\r\n\r\n\tconst titleElement = document.createElement(\"span\");\r\n\ttitleElement.innerHTML = title;\r\n\ttitleHolder.appendChild(titleElement);\r\n\r\n\tconst formHolder = document.createElement(\"div\");\r\n\tformHolder.className = \"modal-form-content\";\r\n\tformHolder.appendChild(form);\r\n\tmodal.appendChild(formHolder);\r\n\r\n\tif (onOk) {\r\n\t\tconst buttons = document.createElement(\"span\");\r\n\t\tbuttons.className = \"modal-form-buttons\";\r\n\t\tmodal.appendChild(buttons);\r\n\r\n\t\tif (canClose) {\r\n\t\t\tconst cancelButton = document.createElement(\"span\");\r\n\t\t\tcancelButton.innerHTML = \"Cancel\";\r\n\t\t\tcancelButton.onclick = () => document.body.removeChild(fullScreen);\r\n\t\t\tbuttons.appendChild(cancelButton);\r\n\t\t}\r\n\t\tconst okButton = document.createElement(\"span\");\r\n\t\tokButton.innerHTML = \"Ok\";\r\n\t\tokButton.onclick = async () => {\r\n\t\t\tif (await onOk() !== false) {\r\n\t\t\t\tcloseFunction();\r\n\t\t\t}\r\n\t\t};\r\n\t\tbuttons.appendChild(okButton);\r\n\t} else if (canClose) {\r\n\t\tconst closeButton = document.createElement(\"icon\");\r\n\t\tcloseButton.className = \"material-symbols-outlined modal-form-close-button\";\r\n\t\tcloseButton.innerHTML = \"cancel\";\r\n\t\tcloseButton.onclick = () => closeFunction();\r\n\t\ttitleHolder.appendChild(closeButton);\r\n\t}\r\n\r\n\tif (!title && titleHolder.children.length === 1) {\r\n\t\ttitleHolder.remove();\r\n\t}\r\n\r\n\tconst fullScreen = document.createElement(\"div\");\r\n\tfullScreen.className = \"modal-background\";\r\n\tfullScreen.appendChild(modal);\r\n\tdocument.body.appendChild(fullScreen);\r\n\r\n\treturn closeFunction;\r\n}\r\n\r\nfunction showModalList(referenceElement, options, onSelect, title = null) {\r\n\tif (options.length === 1) {\r\n\t\tonSelect(options[0]);\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst modal = document.createElement(\"column\");\r\n\tmodal.className = \"modal-select\";\r\n\r\n\tif (title) {\r\n\t\tconst titleHolder = document.createElement(\"span\");\r\n\t\ttitleHolder.innerText = title;\r\n\t\ttitleHolder.className = \"modal-select-title\";\r\n\t\tmodal.appendChild(titleHolder);\r\n\t}\r\n\r\n\tif (options.length > 10) {\r\n\t\tconst searchInput = document.createElement(\"input\");\r\n\t\tsearchInput.setAttribute(\"placeholder\", \"search\");\r\n\t\tsearchInput.onkeyup = () => searchFunc(searchInput.value);\r\n\t\tmodal.appendChild(searchInput);\r\n\t\twindow.setTimeout(() => searchInput.focus());\r\n\t}\r\n\r\n\tconst optionsHolder = document.createElement(\"column\");\r\n\toptionsHolder.className = \"modal-select-options\";\r\n\tmodal.appendChild(optionsHolder);\r\n\r\n\tconst searchFunc = (text) => {\r\n\t\ttext = text.toLowerCase();\r\n\t\toptionsHolder.innerHTML = \"\";\r\n\t\tfor (const value of options) {\r\n\t\t\tconst name = typeof value === 'object' ? value.name : value;\r\n\t\t\tif (text && name.toLowerCase().indexOf(text) < 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tconst option = document.createElement(\"span\");\r\n\t\t\toption.className = \"modal-option\";\r\n\t\t\toption.innerHTML = name;\r\n\t\t\toption.onclick = () => {\r\n\t\t\t\tonSelect(value);\r\n\t\t\t}\r\n\t\t\tif (value.title) {\r\n\t\t\t\toption.title = value.title;\r\n\t\t\t}\r\n\t\t\toptionsHolder.appendChild(option);\r\n\t\t}\r\n\t};\r\n\tsearchFunc(\"\");\r\n\r\n\tconst fullScreen = document.createElement(\"div\");\r\n\tfullScreen.className = \"modal-background\";\r\n\tfullScreen.appendChild(modal);\r\n\tfullScreen.onclick = () => document.body.removeChild(fullScreen);\r\n\tdocument.body.appendChild(fullScreen);\r\n\r\n\tif (!referenceElement) {\r\n\t\tmodal.style.left = Math.min(pointerX, document.body.clientWidth - modal.clientWidth) + \"px\";\r\n\t\tmodal.style.top = Math.min(pointerY, document.body.clientHeight - modal.clientHeight) + \"px\";\r\n\t}\r\n}\r\n\r\nfunction buildTable(columns, rows, values) {\r\n\tconst table = document.createElement(\"table\");\r\n\ttable.className = \"table-container\";\r\n\t_buildTable(table, columns, rows, values);\r\n\treturn table;\r\n}\r\nfunction _buildTable(table, columns, rows, values) {\r\n\ttable.innerHTML = \"\";\r\n\r\n\tconst buildColumn = (name) => {\r\n\t\tconst nameElement = document.createElement(\"span\");\r\n\t\tnameElement.innerHTML = name;\r\n\t\tconst deleteButton = document.createElement(\"icon\");\r\n\t\tdeleteButton.className = \"material-symbols-outlined\";\r\n\t\tdeleteButton.innerHTML = \"delete\";\r\n\t\tdeleteButton.onclick = () => {\r\n\t\t\tconst idx = columns.indexOf(name);\r\n\t\t\tcolumns.splice(idx, 1);\r\n\t\t\tfor (let entry of values) {\r\n\t\t\t\tentry.splice(idx, 1);\r\n\t\t\t}\r\n\t\t\t_buildTable(table, columns, rows, values);\r\n\t\t};\r\n\r\n\t\tconst column = document.createElement(\"th\");\r\n\t\tcolumn.className = \"table-column-title\";\r\n\t\tcolumn.appendChild(nameElement);\r\n\t\tcolumn.appendChild(deleteButton);\r\n\t\trow.appendChild(column);\r\n\t}\r\n\r\n\tlet row = document.createElement(\"tr\");\r\n\trow.appendChild(document.createElement(\"th\"));\r\n\tfor (let name of columns) {\r\n\t\tbuildColumn(name);\r\n\t}\r\n\t\r\n\tconst addButton = document.createElement(\"icon\");\r\n\taddButton.className = \"material-symbols-outlined\";\r\n\taddButton.innerHTML = \"add\";\r\n\taddButton.onclick = () => {\r\n\t\tconst input = document.createElement(\"input\");\r\n\t\tinput.setAttribute(\"placeholder\", \"Name the new column\");\r\n\t\tshowModalForm(\"New Column\", input, () => {\r\n\t\t\tif (input.value) {\r\n\t\t\t\tcolumns.push(input.value);\r\n\t\t\t\tfor (let entry of values) {\r\n\t\t\t\t\tentry.push(\"\");\r\n\t\t\t\t}\r\n\t\t\t\t_buildTable(table, columns, rows, values);\r\n\t\t\t}\r\n\t\t});\r\n\t\tinput.focus();\r\n\t};\r\n\tconst addColumn = document.createElement(\"th\");\r\n\taddColumn.appendChild(addButton);\r\n\r\n\trow.appendChild(addColumn);\r\n\ttable.appendChild(row);\r\n\r\n\tfor (let i = 0; i < rows.length; i++) {\r\n\t\trow = _buildTableValueRow(i, rows, values);\r\n\t\ttable.appendChild(row);\r\n\t}\r\n\r\n\tconst onNewRow = () => {\r\n\t\ttable.removeChild(addRow);\r\n\t\trow = _buildTableValueRow(rows.length - 1, rows, values);\r\n\t\ttable.appendChild(row);\r\n\t\ttable.appendChild(addRow);\r\n\t};\r\n\tconst addRow = _buildTableAddRow(rows, values, columns.length, onNewRow);\r\n\ttable.appendChild(addRow);\r\n}\r\nfunction _buildTableValueRow(idx, keysArray, valuesArray) {\r\n\tconst rowValue = keysArray[idx];\r\n\tconst valueList = valuesArray[idx];\r\n\tconst dataRow = document.createElement(\"tr\");\r\n\r\n\tconst rowTitle = document.createElement(\"td\");\r\n\trowTitle.className = \"table-row-title\";\r\n\trowTitle.innerHTML = rowValue;\r\n\tdataRow.appendChild(rowTitle);\r\n\r\n\tfor (let j = 0; j < valueList.length; j++) {\r\n\t\tlet holder = document.createElement(\"td\");\r\n\t\tholder.className = \"table-value\";\r\n\t\tdataRow.appendChild(holder);\r\n\r\n\t\tlet item = document.createElement(\"input\");\r\n\t\titem.value = valueList[j];\r\n\t\titem.onchange = () => valueList[j] = item.value;\r\n\t\tholder.appendChild(item);\r\n\t}\r\n\r\n\tconst deleteButton = document.createElement(\"icon\");\r\n\tdeleteButton.className = \"material-symbols-outlined\";\r\n\tdeleteButton.innerHTML = \"delete\";\r\n\tdeleteButton.onclick = () => {\r\n\t\tkeysArray.splice(keysArray.indexOf(rowValue), 1);\r\n\t\tvaluesArray.splice(valuesArray.indexOf(valueList), 1);\r\n\t\tdataRow.parentElement.removeChild(dataRow);\r\n\t};\r\n\tconst deleteRow = document.createElement(\"td\");\r\n\tdeleteRow.className = \"table-row-delete\";\r\n\tdeleteRow.appendChild(deleteButton);\r\n\tdataRow.appendChild(deleteRow);\r\n\r\n\treturn dataRow;\r\n}\r\nfunction _buildTableAddRow(keysArray, valuesArray, numCols, onAdded) {\r\n\tconst addNew = document.createElement(\"input\");\r\n\taddNew.setAttribute(\"placeholder\", \"Add new\");\r\n\taddNew.onchange = () => {\r\n\t\tif (addNew.value) {\r\n\t\t\tkeysArray.push(addNew.value);\r\n\t\t\tvar newValues = [];\r\n\t\t\tfor (let i = 0; i < numCols; i++) newValues.push(\"\");\r\n\t\t\tvaluesArray.push(newValues);\r\n\t\t\tonAdded();\r\n\t\t\taddNew.value = \"\";\r\n\t\t}\r\n\t};\r\n\twindow.setTimeout(() => addNew.focus());\r\n\r\n\tconst addNewHolder = document.createElement(\"td\");\r\n\taddNewHolder.className = \"table-value\";\r\n\taddNewHolder.appendChild(addNew);\r\n\r\n\tconst row = document.createElement(\"tr\");\r\n\trow.appendChild(addNewHolder);\r\n\treturn row;\r\n}\r\n\r\nfunction show(elementId) {\r\n\tconst element = document.getElementById(elementId);\r\n\tif (!element.classList.contains(\"show\")) {\r\n\t\telement.classList.remove(\"hide\");\r\n\t\telement.classList.add(\"show\");\r\n\t}\r\n}\r\n\r\nfunction selectCollapsibleTab(evt, idx, expand) {\r\n\tlet target = evt.target;\r\n\twhile (target && !target.classList.contains(\"collapsible-tabs\")) {\r\n\t\ttarget = target.parentElement;\r\n\t}\r\n\tif (!target) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst panels = target.getElementsByClassName(\"collapsible-tabs-panels\")[0];\r\n\tfor (let panel of panels.children) {\r\n\t\tpanel.classList.add(\"hidden\");\r\n\t}\r\n\tpanels.children[idx].classList.remove(\"hidden\");\r\n\r\n\tconst buttons = target.getElementsByClassName(\"collapsible-tabs-buttons\")[0];\r\n\tfor (let button of buttons.children) {\r\n\t\tbutton.classList.remove(\"collapsible-tabs-button-selected\");\r\n\t}\r\n\tbuttons.children[idx].classList.add(\"collapsible-tabs-button-selected\");\r\n\r\n\tif (expand) {\r\n\t\ttoggleCollapsibleTabs(evt, expand);\r\n\t}\r\n}\r\nfunction toggleCollapsibleTabs(evt, expand) {\r\n\tlet target = evt.target;\r\n\twhile (target && !target.classList.contains(\"collapsible-tabs\")) {\r\n\t\ttarget = target.parentElement;\r\n\t}\r\n\r\n\tif (target) {\r\n\t\tif (expand || target.classList.contains(\"collapsible-tabs-collapsed\")) {\r\n\t\t\ttarget.classList.remove(\"collapsible-tabs-collapsed\");\r\n\t\t} else {\r\n\t\t\ttarget.classList.add(\"collapsible-tabs-collapsed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction tabClick(tabHolderId, panelHolderId, idx) {\r\n\tconst tabHolder = document.getElementById(tabHolderId);\r\n\tfor (let child of tabHolder.children)\r\n\t\tchild.classList.remove(\"tab-item-selected\");\r\n\ttabHolder.children[idx].classList.add(\"tab-item-selected\");\r\n\r\n\tconst panelHolder = document.getElementById(panelHolderId);\r\n\tfor (let i = 0; i < panelHolder.children.length; i++) {\r\n\t\tlet child = element = panelHolder.children[i];\r\n\t\tif (i === idx) {\r\n\t\t\tchild.classList.remove(\"tab-panel-invisible\");\r\n\t\t\tif (child.onVisible) {\r\n\t\t\t\tchild.onVisible();\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tchild.classList.add(\"tab-panel-invisible\");\r\n\t\t\tif (child.onInvisible) {\r\n\t\t\t\tchild.onInvisible();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction childOf(/*child node*/c, /*parent node*/p) {\r\n\tif (!c || !p) return false;\r\n\tif (c === p) return true;\r\n\twhile((c=c.parentNode)&&c!==p); \r\n\treturn !!c; \r\n}\r\n\r\nfunction stringify(obj) {\r\n\tconst replacer = (k, v) => {\r\n\t\tif (v === null || v === undefined || v === \"null\" || v === \"undefined\" || k === \"_children\" || k === \"_solution\") {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\tif (typeof v === \"string\") {\r\n\t\t\tif (v.length == 0) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t} else if (Array.isArray(v)) {\r\n\t\t\tif (v.length === 0) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t} else if (v.constructor === Object) {\r\n\t\t\tif (Object.keys(v).length === 0) {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn v;\r\n\t};\r\n\r\n\tlet jsonString = JSON.stringify(obj, replacer, \"  \");\r\n\twhile (jsonString !== undefined && jsonString.includes(\"{}\")) {\r\n\t\tjsonString = JSON.stringify(JSON.parse(jsonString), replacer, \"  \");\r\n\t}\r\n\treturn jsonString;\r\n}\r\n\r\nfunction getIconForWidget(type) {\r\n\tswitch (type?.toLowerCase()) {\r\n\t\tcase \"text\":\r\n\t\tcase \"textfield\":\r\n\t\tcase \"textformfield\":\r\n\t\tcase \"richtext\":\r\n\t\tcase \"textspan\":\r\n\t\t\treturn \"text_fields\";\r\n\t\tcase \"listtile\":\r\n\t\t\treturn \"short_text\";\r\n\t\tcase \"switch\":\r\n\t\t\treturn \"toggle_on\";\r\n\t\tcase \"checkbox\":\r\n\t\t\treturn \"check_box\";\r\n\t\tcase \"scaffold\":\r\n\t\t\treturn \"view_quilt\";\r\n\t\tcase \"container\":\r\n\t\t\treturn \"pageless\";\r\n\t\tcase \"card\":\r\n\t\t\treturn \"team_dashboard\";\r\n\t\tcase \"row\":\r\n\t\t\treturn \"view_agenda\";\r\n\t\tcase \"column\":\r\n\t\t\treturn \"view_column_2\";\r\n\t\tcase \"wrap\":\r\n\t\t\treturn \"flex_wrap\";\r\n\t\tcase \"list\":\r\n\t\tcase \"listview\":\r\n\t\tcase \"staticlistview\":\r\n\t\tcase \"tableview\":\r\n\t\tcase \"datatableview\":\r\n\t\t\treturn \"view_list\";\r\n\t\tcase \"gridview\":\r\n\t\tcase \"staticgridview\":\r\n\t\t\treturn \"grid_view\";\r\n\t\tcase \"pageview\":\r\n\t\tcase \"staticpageview\":\r\n\t\t\treturn \"dual_screen\";\r\n\t\tcase \"appbar\":\r\n\t\t\treturn \"toolbar\";\r\n\t\tcase \"sizedbox\":\r\n\t\t\treturn \"select\";\r\n\t\tcase \"textbutton\":\r\n\t\tcase \"elevatedbutton\":\r\n\t\tcase \"outlinedbutton\":\r\n\t\tcase \"floatingactionbutton\":\r\n\t\tcase \"iconbutton\":\r\n\t\t\treturn \"smart_button\";\r\n\t\tcase \"inkwell\":\r\n\t\t\treturn \"touch_app\";\r\n\t\tcase \"icon\":\r\n\t\t\treturn \"account_box\";\r\n\t\tcase \"image\":\r\n\t\tcase \"imageurl\":\r\n\t\tcase \"imageasset\":\r\n\t\t\treturn \"image\";\r\n\t\tcase \"datepicker\":\r\n\t\t\treturn \"calendar_month\";\r\n\t\tcase \"avatar\":\r\n\t\tcase \"circleavatar\":\r\n\t\t\treturn \"account_circle\";\r\n\t\tcase \"tabbar\":\r\n\t\tcase \"tabview\":\r\n\t\tcase \"tabbarview\":\r\n\t\t\treturn \"tabs\";\r\n\t\tcase \"drawer\":\r\n\t\t\treturn \"menu\";\r\n\t\tcase \"drawerheader\":\r\n\t\t\treturn \"subheader\";\r\n\t\tcase \"userdrawerheader\":\r\n\t\t\treturn \"insert_emoticon\";\r\n\t\tcase \"circularprogressindicator\":\r\n\t\t\treturn \"progress_activity\";\r\n\t\tcase \"blocbuilder\":\r\n\t\tcase \"blocconsumer\":\r\n\t\t\treturn \"construction\";\r\n\t\tcase \"navigationrail\":\r\n\t\t\treturn \"side_navigation\";\r\n\t\tcase \"bottomappbar\":\r\n\t\tcase \"bottomnavigationbar\":\r\n\t\t\treturn \"bottom_navigation\";\r\n\t\tcase \"popupmenu\":\r\n\t\tcase \"popupmenubutton\":\r\n\t\t\treturn \"more_vert\";\r\n\t\tcase \"select\":\r\n\t\tcase \"dropdown\":\r\n\t\tcase \"dropdownbutton\":\r\n\t\t\treturn \"list\";\r\n\t\tcase \"slider\":\r\n\t\t\treturn \"tune\";\r\n\t\tcase \"hero\":\r\n\t\t\treturn \"domino_mask\";\r\n\t\tcase \"animatedcontainer\":\r\n\t\tcase \"animatedpositioned\":\r\n\t\t\treturn \"transition_chop\";\r\n\t\tcase \"center\":\r\n\t\t\treturn \"center_focus_weak\";\r\n\t\tcase \"stack\":\r\n\t\t\treturn \"stacks\";\r\n\t\tcase \"positioned\":\r\n\t\t\treturn \"target\";\r\n\t\tcase \"expanded\":\r\n\t\t\treturn \"pan_zoom\";\r\n\t\tcase \"component\":\r\n\t\tcase \"widgetcomponent\":\r\n\t\tcase \"preferredsizecomponent\":\r\n\t\t\treturn \"link\";\r\n\t\tcase \"scrollview\":\r\n\t\tcase \"singlechildscrollview\":\r\n\t\t\treturn \"swipe_vertical\";\r\n\t\tdefault:\r\n\t\t\treturn \"view_compact\";\r\n\t\t\treturn \"fullscreen\";\r\n\t}\r\n}\r\n\r\nfunction invertColor(hex, bw) {\r\n    if (hex.indexOf('#') === 0) {\r\n        hex = hex.slice(1);\r\n    }\r\n    // convert 3-digit hex to 6-digits.\r\n    if (hex.length === 3) {\r\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\r\n    }\r\n\tif (hex.length === 8) {\r\n        hex = hex.slice(2);\r\n    }\r\n    if (hex.length !== 6) {\r\n        throw new Error('Invalid HEX color.');\r\n    }\r\n    var r = parseInt(hex.slice(0, 2), 16),\r\n        g = parseInt(hex.slice(2, 4), 16),\r\n        b = parseInt(hex.slice(4, 6), 16);\r\n    if (bw) {\r\n        // https://stackoverflow.com/a/3943023/112731\r\n        return (r * 0.299 + g * 0.587 + b * 0.114) > 186\r\n            ? '#000000'\r\n            : '#FFFFFF';\r\n    }\r\n    // invert color components\r\n    r = (255 - r).toString(16);\r\n    g = (255 - g).toString(16);\r\n    b = (255 - b).toString(16);\r\n    // pad each with zeros and return\r\n    return \"#\" + padLeft(r, '0', 2) + padLeft(g, '0', 2) + padLeft(b, '0', 2);\r\n}\r\n\r\nfunction padLeft(str, char, len) {\r\n    len = len || 2;\r\n    var zeros = new Array(len).join(char);\r\n    return (zeros + str).slice(-len);\r\n}\r\n\r\nfunction mergeMaps(map1, map2, replace = false) {\r\n\tfor (let key in map2) {\r\n\t\tif (replace || !map1.hasOwnProperty(key)) {\r\n\t\t\tmap1[key] = map2[key];\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction getUUID() {\r\n\tvar s = [];\r\n\tvar hexDigits = \"0123456789abcdef\";\r\n\tfor (var i = 0; i < 36; i++)\r\n\t\ts[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\r\n\ts[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\r\n\ts[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\r\n\ts[8] = s[13] = s[18] = s[23] = \"-\";\r\n\tvar uuid = s.join(\"\");\r\n\treturn uuid;\r\n};\r\n\r\nfunction sleep(ms) {\r\n\treturn new Promise((resolve) => {\r\n\t\tsetTimeout(resolve, ms);\r\n\t});\r\n}\r\n\r\nclass EditorPanel {\r\n\tconstructor() { }\r\n\tpopulate() { }\r\n\tselectNode(node) { }\r\n\tonNodeCreated(origin, node, screen) { }\r\n\tonNodeUpdated(origin, node, screen) { }\r\n\tonNodeDeleted(origin, node, screen) { }\r\n}\r\n\r\n\nclass Routing {\r\n    constructor() {\r\n        this.hOffset = 20;\r\n        this.vOffset = 20;\r\n        this.hEdgeOffset = 0;\r\n        this.vEdgeOffset = 0;\r\n        this.laneWidth = 4;\r\n        this.hAlign = \"center\";\r\n        this.vAlign = \"center\";\r\n        this.termination = \"arrow\";\r\n        this.gridLanes = {};\r\n        this.inPositions = [\"top\", \"left\"];\r\n        this.outPositions = [\"right\", /*\"bottom\"*/];\r\n    }\r\n\r\n    getRoute(start, finish) {\r\n        const positions = this.getPositions(start, finish);\r\n        const points = [];\r\n        this.addEdgePoint(start, positions.outPos, points);\r\n        const outAxis = positions.outPos === \"right\" || positions.outPos === \"left\";\r\n        const inAxis = positions.inPos === \"right\" || positions.inPos === \"left\";\r\n\r\n        // Neighbours X\r\n        if ((finish.xIndex - start.xIndex === 1 && positions.outPos === \"right\" && positions.inPos === \"left\") ||\r\n            (finish.xIndex - start.xIndex === -1 && positions.outPos === \"left\" && positions.inPos === \"right\")) {\r\n            if (finish.yIndex !== start.yIndex || Math.abs(start.top - finish.top) > 20) {\r\n                this.addOutInflectionPoint(start, finish, positions, points);\r\n                this.addLastInflectionPoint(finish, positions, points);\r\n            }\r\n        }\r\n\r\n        // Neighbours Y\r\n        else if ((finish.yIndex - start.yIndex === 1 && positions.outPos === \"bottom\" && positions.inPos === \"top\") ||\r\n            (finish.yIndex - start.yIndex === -1 && positions.outPos === \"top\" && positions.inPos === \"bottom\")) {\r\n            if (finish.xIndex !== start.xIndex || Math.abs(start.left - finish.left) > 20) {\r\n                this.addOutInflectionPoint(start, finish, positions, points);\r\n                this.addLastInflectionPoint(finish, positions, points);\r\n            }\r\n        }\r\n\r\n        else {\r\n            this.addOutInflectionPoint(start, finish, positions, points);\r\n            this.addSecondInflectionPoint(start, finish, positions, points);\r\n            if (outAxis === inAxis)\r\n                this.addThirdInflectionPoint(start, finish, positions, points);\r\n            this.addLastInflectionPoint(finish, positions, points);\r\n        }\r\n        this.addEdgePoint(finish, positions.inPos, points);\r\n\r\n        if (this.termination === \"arrow\")\r\n            this.addTerminationArrow(points);\r\n\r\n        const radius = 6;\r\n        let prevX, x, prevY, y;\r\n        let pathString = \"\";\r\n        let previousPoint = null;\r\n        for (let i = 0; i < points.length; i++) {\r\n            let p = points[i];\r\n            x = p.x;\r\n            y = p.y;\r\n\r\n            if (i > 0) {\r\n                let r = radius;\r\n                // if (p.x != previousPoint.x)\r\n                //     r = Math.min(r, Math.abs(p.x - previousPoint.x)/2);\r\n                // if (p.y != previousPoint.y)\r\n                //     r = Math.min(r, Math.abs(p.y - previousPoint.y)/2);\r\n                if (i > 1 && i < points.length - 4) {\r\n                    // Create a rounded corner\r\n                    let flag = \"0,0\";\r\n                    if (previousPoint.x === p.x) {\r\n                        y = previousPoint.y > p.y ? y = previousPoint.y - r : previousPoint.y + r;\r\n                        if (x > prevX && y > prevY || x < prevX && y < prevY)\r\n                            flag = \"0,1\";\r\n                    }\r\n\r\n                    else {\r\n                        x = previousPoint.x > p.x ? x = previousPoint.x - r : previousPoint.x + r;\r\n                        if (x > prevX && y < prevY || x < prevX && y > prevY)\r\n                            flag = \"0,1\";\r\n                    }\r\n                    pathString += \" A\" + r + \",\" + r + \" 0 \" + flag + \" \" + x + \",\" + y;\r\n                }\r\n\r\n                x = p.x;\r\n                y = p.y;\r\n                if (i < points.length - 5) {\r\n                    if (previousPoint.x === p.x)\r\n                        y = previousPoint.y > p.y ? p.y + r : p.y - r;\r\n\r\n                    else\r\n                        x = previousPoint.x < p.x ? p.x - r : p.x + r;\r\n                }\r\n                pathString += \" L\" + x + \",\" + y;\r\n            }\r\n\r\n            else\r\n                pathString += \"M\" + x + \",\" + y;\r\n            prevX = x;\r\n            prevY = y;\r\n            previousPoint = p;\r\n        }\r\n\r\n        return pathString;\r\n    }\r\n\r\n    addOutInflectionPoint(start, finish, positions, points) {\r\n        var lane;\r\n        switch (positions.outPos) {\r\n            case \"right\":\r\n                lane = this.getEmptyXLane(start.xIndex, start.code, \"outLane\");\r\n                points.push({ x: points[0].x + this.hOffset + (this.laneWidth * (lane + 1)), y: points[0].y });\r\n                break;\r\n            case \"left\":\r\n                lane = this.getEmptyXLane(start.xIndex - 1, start.code, \"outLane\");\r\n                points.push({ x: points[0].x - this.hOffset - (this.laneWidth * (lane + 1)), y: points[0].y });\r\n                break;\r\n            case \"bottom\":\r\n                lane = this.getEmptyYLane(start.yIndex, start.code, \"outLane\");\r\n                points.push({ x: points[0].x, y: points[0].y + this.vOffset + (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            case \"top\":\r\n                lane = this.getEmptyYLane(start.yIndex - 1, start.code, \"outLane\");\r\n                points.push({ x: points[0].x, y: points[0].y - this.vOffset - (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    addSecondInflectionPoint(start, finish, positions, points) {\r\n        var lane;\r\n        var inPos = positions.inPos;\r\n\r\n        if ((positions.outPos === \"right\" || positions.outPos === \"left\") && (inPos === \"right\" || inPos === \"left\")) {\r\n            if (start.yIndex > finish.yIndex)\r\n                inPos = \"bottom\";\r\n\r\n            else\r\n                inPos = \"top\";\r\n        }\r\n        else if ((positions.outPos === \"top\" || positions.outPos === \"bottom\") && (inPos === \"top\" || inPos === \"bottom\")) {\r\n            if (start.xIndex > finish.xIndex)\r\n                inPos = \"right\";\r\n\r\n            else\r\n                inPos = \"left\";\r\n        }\r\n\r\n        switch (inPos) {\r\n            case \"right\":\r\n                lane = this.getEmptyYLane(finish.yIndex, start.code, finish.code);\r\n                points.push({ x: finish.right + this.hOffset + (this.laneWidth * (lane + 1)), y: points[points.length - 1].y });\r\n                break;\r\n            case \"left\":\r\n                lane = this.getEmptyYLane(finish.yIndex - 1, start.code, finish.code);\r\n                points.push({ x: finish.left - this.hOffset - (this.laneWidth * (lane + 1)), y: points[points.length - 1].y });\r\n                break;\r\n            case \"bottom\":\r\n                lane = this.getEmptyXLane(finish.xIndex, start.code, finish.code);\r\n                points.push({ x: points[points.length - 1].x, y: finish.bottom + this.vOffset + (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            case \"top\":\r\n                lane = this.getEmptyXLane(finish.xIndex - 1, start.code, finish.code);\r\n                points.push({ x: points[points.length - 1].x, y: finish.top - this.vOffset - (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    addThirdInflectionPoint(start, finish, positions, points) {\r\n        var lane;\r\n        switch (positions.inPos) {\r\n            case \"right\":\r\n                lane = this.getEmptyXLane(finish.xIndex, \"inLane\", finish.code);\r\n                points.push({ x: finish.right + this.hOffset + (this.laneWidth * (lane + 1)), y: points[points.length - 1].y });\r\n                break;\r\n            case \"left\":\r\n                lane = this.getEmptyXLane(finish.xIndex - 1, \"inLane\", finish.code);\r\n                points.push({ x: finish.left - this.hOffset - (this.laneWidth * (lane + 1)), y: points[points.length - 1].y });\r\n                break;\r\n            case \"bottom\":\r\n                lane = this.getEmptyYLane(finish.yIndex, \"inLane\", finish.code);\r\n                points.push({ x: points[points.length - 1].x, y: finish.bottom + this.vOffset + (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            case \"top\":\r\n                lane = this.getEmptyYLane(finish.yIndex - 1, \"inLane\", finish.code);\r\n                points.push({ x: points[points.length - 1].x, y: finish.top - this.vOffset - (this.laneWidth * (lane + 1)) });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    addLastInflectionPoint(finish, positions, points) {\r\n        switch (positions.inPos) {\r\n            case \"left\":\r\n            case \"right\":\r\n                points.push({ x: points[points.length - 1].x, y: this.getObjEdgePoint(finish, false) + this.vEdgeOffset });\r\n                break;\r\n            case \"top\":\r\n            case \"bottom\":\r\n                points.push({ x: this.getObjEdgePoint(finish, true) + this.hEdgeOffset, y: points[points.length - 1].y });\r\n                break;\r\n            default: break;\r\n        }\r\n    }\r\n\r\n    addEdgePoint(obj, position, points) {\r\n        switch (position) {\r\n            case \"left\":\r\n                points.push({ x: obj.left, y: this.getObjEdgePoint(obj, false) + this.vEdgeOffset });\r\n                break;\r\n            case \"top\":\r\n                points.push({ x: this.getObjEdgePoint(obj, true) + this.hEdgeOffset, y: obj.top });\r\n                break;\r\n            case \"right\":\r\n                points.push({ x: obj.right, y: this.getObjEdgePoint(obj, false) + this.vEdgeOffset });\r\n                break;\r\n            case \"bottom\":\r\n                points.push({ x: this.getObjEdgePoint(obj, true) + this.hEdgeOffset, y: obj.bottom });\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getObjEdgePoint(obj, horizontal) {\r\n        if (horizontal) {\r\n            switch (this.hAlign) {\r\n                case \"center\":\r\n                    return (obj.right - obj.left) / 2 + obj.left;\r\n                case \"right\":\r\n                    return obj.right;\r\n                default:\r\n                    return obj.left;\r\n            }\r\n        }\r\n\r\n        else {\r\n            switch (this.vAlign) {\r\n                case \"center\":\r\n                    return (obj.bottom - obj.top) / 2 + obj.top;\r\n                case \"bottom\":\r\n                    return obj.bottom;\r\n                default:\r\n                    return obj.top;\r\n            }\r\n        }\r\n    }\r\n\r\n    addTerminationArrow(points) {\r\n        var arrowHeight = 10;\r\n        var fromX = points[points.length - 2].x;\r\n        var fromY = points[points.length - 2].y;\r\n        var toX = points[points.length - 1].x;\r\n        var toY = points[points.length - 1].y;\r\n        var angle = Math.atan2(toY - fromY, toX - fromX);\r\n        points.push({ x: toX - arrowHeight * Math.cos(angle - Math.PI / 6), y: toY - arrowHeight * Math.sin(angle - Math.PI / 6) });\r\n        points.push({ x: toX, y: toY });\r\n        points.push({ x: toX - arrowHeight * Math.cos(angle + Math.PI / 6), y: toY - arrowHeight * Math.sin(angle + Math.PI / 6) });\r\n        points.push({ x: toX, y: toY });\r\n    }\r\n\r\n    getPositions(start, finish) {\r\n        var i, j;\r\n        var minCost = null;\r\n        var inPosition = null;\r\n        var outPosition = null;\r\n\r\n        for (i = 0; i < this.outPositions.length; i++) {\r\n            var cost = 4;\r\n            var outP = this.outPositions[i];\r\n            for (j = 0; j < this.inPositions.length; j++) {\r\n                var inP = this.inPositions[j];\r\n                var outAxis = outP === \"right\" || outP === \"left\";\r\n                var inAxis = inP === \"right\" || inP === \"left\";\r\n\r\n                // Neighbours X\r\n                if ((finish.xIndex - start.xIndex === 1 && outP === \"right\" && inP === \"left\") ||\r\n                    (finish.xIndex - start.xIndex === -1 && outP === \"left\" && inP === \"right\")) {\r\n                    cost = 0;\r\n                    if (finish.yIndex !== start.yIndex)\r\n                        cost = 2;\r\n                }\r\n\r\n                // Neighbours Y\r\n                else if ((finish.yIndex - start.yIndex === 1 && outP === \"bottom\" && inP === \"top\") ||\r\n                    (finish.yIndex - start.yIndex === -1 && outP === \"top\" && inP === \"bottom\")) {\r\n                    cost = 0;\r\n                    if (finish.xIndex !== start.xIndex)\r\n                        cost = 2;\r\n                }\r\n                else if (outAxis !== inAxis)\r\n                    cost = 3;\r\n\r\n                if (minCost === null || minCost > cost) {\r\n                    minCost = cost;\r\n                    inPosition = inP;\r\n                    outPosition = outP;\r\n                }\r\n            }\r\n        }\r\n        return { inPos: inPosition, outPos: outPosition };\r\n    }\r\n\r\n    getEmptyXLane(xIndex, start, finish) {\r\n        var i = 0;\r\n        delete this.gridLanes[this.gridLanes[\"x_\" + start + \"_\" + finish]];\r\n        while (this.gridLanes[\"x_\" + xIndex + \"_\" + i])\r\n            i++;\r\n        this.gridLanes[\"x_\" + start + \"_\" + finish] = \"x_\" + xIndex + \"_\" + i;\r\n        this.gridLanes[\"x_\" + xIndex + \"_\" + i] = start + \"_\" + finish;\r\n        return i;\r\n    }\r\n    \r\n    getEmptyYLane(yIndex, start, finish) {\r\n        var i = 0;\r\n        delete this.gridLanes[this.gridLanes[\"y_\" + start + \"_\" + finish]];\r\n        while (this.gridLanes[\"y_\" + yIndex + \"_\" + i])\r\n            i++;\r\n        this.gridLanes[\"y_\" + start + \"_\" + finish] = \"y_\" + yIndex + \"_\" + i;\r\n        this.gridLanes[\"y_\" + yIndex + \"_\" + i] = start + \"_\" + finish;\r\n        return i;\r\n    }\r\n}\r\n\nclass Grid {\r\n    constructor(gridHolder) {\r\n        this.holder = gridHolder;\r\n        this.nodeToPosition = {};\r\n        this.positionToNode = {};\r\n    }\r\n\r\n    getNodePosition(node) {\r\n        return this.nodeToPosition[node.getId()];\r\n    }\r\n    \r\n    getNextPosition(node, parentNode) {\r\n        let x = 0;\r\n        let y = 0;\r\n        if (parentNode) {\r\n            const pos = this.nodeToPosition[parentNode.getId()];\r\n            x = pos.x + 1;\r\n            y = pos.y;\r\n        }\r\n        while (this.positionToNode[x + \"-\" + y]) {\r\n            y++;\r\n        }\r\n\r\n        const pos = { x, y };\r\n        this.positionToNode[x + \"-\" + y] = node;\r\n        this.nodeToPosition[node.getId()] = pos;\r\n        return pos;\r\n    }\r\n}\r\n\nclass PropertyPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"property-panel\";\r\n\t\tthis.modelNode;\r\n\t}\r\n\r\n\tpopulate() {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\t\tthis.modelNode = null;\r\n\t\tthis.solutionId = null;\r\n\t\tthis.solutionSchema = null;\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tthis.modelNode = node;\r\n\t\tthis.solutionId = node.getSolutionId();\r\n\t\tthis.solutionSchema = Editor.project.getSchema(this.solutionId);\r\n\r\n\t\tconst schemaProperties = node.getPropertySchema() ?? {};\r\n\t\tconst nodeProperties = node.getProperties();\r\n\t\tconst template = (node.getTemplate ? node.getTemplate()?.getProperties() : {}) ?? {};\r\n\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\t\tthis.buildHeader(rootPanel, node);\r\n\r\n\t\tif (node instanceof TypeNode && node[\"extends\"] === \"KModel\") {\r\n\t\t\tthis.buildTypePropertyEditor(rootPanel, node);\r\n\t\t} else {\r\n\t\t\tfor (let key in schemaProperties) {\r\n\t\t\t\tif (this.solutionSchema.isWidget(schemaProperties[key]) || this.solutionSchema.isAction(schemaProperties[key])) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tthis.createPropertyElement(rootPanel, key, schemaProperties[key], nodeProperties, template);\r\n\t\t\t}\r\n\r\n\t\t\tif (node instanceof Component) {\r\n\t\t\t\t// Allow user to expose properties from Component's widgets\r\n\t\t\t\tthis.buildComponentPropertyEditor(rootPanel, node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbuildHeader(rootElement, node) {\r\n\t\tconst holder = document.createElement(\"div\");\r\n\t\tholder.className = this.id + \"-item-header\";\r\n\t\trootElement.appendChild(holder);\r\n\r\n\t\tconst nameElement = document.createElement(\"input\");\r\n\t\tnameElement.className = this.id + \"-item-header-name\";\r\n\t\tnameElement.value = node.getName() ?? \"\";\r\n\t\tnameElement.onchange = () => {\r\n\t\t\tthis.logInfo(`name updated to \${nameElement.value}.`);\r\n\t\t\tnode.setName(nameElement.value);\r\n\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t};\r\n\t\tholder.appendChild(nameElement);\r\n\r\n\t\tconst typeElement = document.createElement(\"span\");\r\n\t\ttypeElement.className = this.id + \"-item-header-type\";\r\n\t\tif (!(node instanceof TypeNode)) {\r\n\t\t\ttypeElement.innerHTML = node.getType();\r\n\t\t}\r\n\t\tholder.appendChild(typeElement);\r\n\t\t\r\n\t\tif (node.isRootNode) {\r\n\t\t\tconst folderTitle = document.createElement(\"span\");\r\n\t\t\tfolderTitle.className = this.id + \"-item-header-prop-name\";\r\n\t\t\tfolderTitle.innerHTML = \"Folder\";\r\n\r\n\t\t\tconst folderSelector = document.createElement(\"select\");\r\n\t\t\tfolderSelector.className = this.id + \"-item-header-prop-value\";\r\n\t\t\tfor (let folder of Editor.project.getFolders(this.solutionId)) {\r\n\t\t\t\tlet option = document.createElement(\"option\");\r\n\t\t\t\toption.value = folder.getId();\r\n\t\t\t\toption.innerHTML = folder.getName();\r\n\t\t\t\tfolderSelector.appendChild(option);\r\n\t\t\t}\r\n\t\t\tfolderSelector.value = node.getFolder();\r\n\t\t\tfolderSelector.onchange = () => {\r\n\t\t\t\tnode.setFolder(folderSelector.value);\r\n\t\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t\t\tthis.logInfo(`folder updated to \${folderSelector.value}.`);\r\n\t\t\t};\r\n\r\n\t\t\tconst folderRow = document.createElement(\"div\");\r\n\t\t\tfolderRow.className = this.id + \"-item-header-prop\";\r\n\t\t\tfolderRow.appendChild(folderTitle);\r\n\t\t\tfolderRow.appendChild(folderSelector);\r\n\t\t\trootElement.appendChild(folderRow);\r\n\t\t}\r\n\r\n\t\tconst idTitle = document.createElement(\"div\");\r\n\t\tidTitle.className = this.id + \"-item-header-prop-name\";\r\n\t\tidTitle.innerHTML = \"Id\";\r\n\r\n\t\tconst idValue = document.createElement(\"div\");\r\n\t\tidValue.className = this.id + \"-item-header-prop-value\";\r\n\t\tidValue.innerHTML = node.getId();\r\n\r\n\t\tconst idRow = document.createElement(\"div\");\r\n\t\tidRow.className = this.id + \"-item-header-prop\";\r\n\t\tidRow.appendChild(idTitle);\r\n\t\tidRow.appendChild(idValue);\r\n\t\trootElement.appendChild(idRow);\r\n\r\n\t\tconst separatorElement = document.createElement(\"div\");\r\n\t\tseparatorElement.className = this.id + \"-item-header-separator\";\r\n\t\trootElement.appendChild(separatorElement);\r\n\t}\r\n\r\n\tbuildComponentPropertyEditor(rootElement, node) {\r\n\t\tconst holder = document.createElement(\"column\");\r\n\t\tholder.className = this.id + \"-table\";\r\n\t\trootElement.appendChild(holder);\r\n\r\n\t\t// Build a list with all Widgets, its actions, properties and widgets, composing this Component\r\n\t\tconst widgets = [];\r\n\t\tconst widgetNames = {};\r\n\t\tconst widgetActionMap = {};\r\n\t\tconst widgetPropertyMap = {};\r\n\t\tconst widgetWidgetMap = {};\r\n\t\tconst queue = [node];\r\n\t\twhile (queue.length > 0) {\r\n\t\t\tlet widget = queue.shift();\r\n\t\t\tlet widgetId = widget.getId();\r\n\t\t\tlet widgetName = widget.getName();\r\n\t\t\tif (widgetName && widgetId !== widgetName) {\r\n\t\t\t\t// For simplification, only named widgets will be available\r\n\t\t\t\twidgets.push(widget);\r\n\t\t\t\twidgetNames[widgetId] = widgetName;\r\n\t\t\t\twidgetActionMap[widgetId] = widget.getActionSchema();\r\n\t\t\t\twidgetPropertyMap[widgetId] = widget.getPropertySchema();\r\n\t\t\t\twidgetWidgetMap[widgetId] = widget.getWidgetSchema();\r\n\t\t\t}\r\n\r\n\t\t\tlet children = widget.getWidgets();\r\n\t\t\tfor (let key in children) {\r\n\t\t\t\tlet keyVal = children[key];\r\n\t\t\t\tif (Array.isArray(keyVal)) {\r\n\t\t\t\t\tqueue.push(...keyVal);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tqueue.push(keyVal);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO: account for Components with other Components inside\r\n\t\t// show their exposed properties\r\n\t\tconst props = node.exposedProperties;\r\n\t\tfor (let key in props) {\r\n\t\t\tlet row = this.createComponentPropertyEditorRow(props, key, widgetNames, widgetActionMap, widgetPropertyMap, widgetWidgetMap);\r\n\t\t\tholder.appendChild(row);\r\n\t\t}\r\n\r\n\t\tconst addRow = this.createComponentPropertyEditorRow(props, null, widgetNames, widgetActionMap, widgetPropertyMap, widgetWidgetMap);\r\n\t\tholder.appendChild(addRow);\r\n\t}\r\n\r\n\tcreateComponentPropertyEditorRow(props, key, widgetNames, widgetActionMap, widgetPropertyMap, widgetWidgetMap) {\r\n\t\tconst holder = document.createElement(\"row\");\r\n\t\tholder.className = this.id + \"-item\";\r\n\r\n\t\tif (key) {\r\n\t\t\tconst value = props[key];\r\n\t\t\tconst keyElement = this.createPropertyNameElement(key, value !== null && value !== undefined);\r\n\t\t\tholder.append(keyElement);\r\n\r\n\t\t\tif (value) {\r\n\t\t\t\t// TODO: value should be something like <widgetId>.<type(action, property, widget)>.key\r\n\t\t\t\t// Replace widgetId with its name to be more user-friendly\r\n\t\t\t\tconst parts = value.split(\".\");\r\n\t\t\t\tparts[0] = widgetNames[parts[0]] ?? parts[0];\r\n\t\t\t\tconst valueElement = this.createPropertyNameElement(parts.join(\".\"), true);\r\n\t\t\t\tholder.append(valueElement);\r\n\t\t\t} else {\r\n\t\t\t\t// 1. Select Widget (self or a child)\r\n\t\t\t\t// 2. Select:\r\n\t\t\t\t//\t\ta property (no need no navigate through properties)\r\n\t\t\t\t//\t\ta widget placeholder\r\n\t\t\t\t//\t\tan action\r\n\r\n\t\t\t\tlet finalValue;\r\n\t\t\t\tconst selectWidget = () => {\r\n\t\t\t\t\tconst selectWidgetList = [];\r\n\t\t\t\t\tfor (let key in widgetNames) {\r\n\t\t\t\t\t\tselectWidgetList.push({id: key, name: widgetNames[key]});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tshowModalList(null, selectWidgetList, (val) => {\r\n\t\t\t\t\t\tfinalValue = val.id;\r\n\t\t\t\t\t\tselectType(val.id);\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t\tconst selectType = (widgetId) => {\r\n\t\t\t\t\tconst selectTypes = [];\r\n\t\t\t\t\tif (widgetPropertyMap[widgetId]) selectTypes.push(\"property\");\r\n\t\t\t\t\tif (widgetWidgetMap[widgetId]) selectTypes.push(\"widget\");\r\n\t\t\t\t\tif (widgetActionMap[widgetId]) selectTypes.push(\"action\");\r\n\t\t\t\t\tshowModalList(null, selectTypes, (val) => {\r\n\t\t\t\t\t\tfinalValue += `.\${val}`;\r\n\t\t\t\t\t\tswitch(val) {\r\n\t\t\t\t\t\t\tcase \"property\":\r\n\t\t\t\t\t\t\t\tselectKey(widgetPropertyMap[widgetId]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"widget\":\r\n\t\t\t\t\t\t\t\tselectKey(widgetWidgetMap[widgetId]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \"action\":\r\n\t\t\t\t\t\t\t\tselectKey(widgetActionMap[widgetId]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\t\t\t\tconst selectKey = (map) => {\r\n\t\t\t\t\tshowModalList(null, Object.keys(map), (val) => {\r\n\t\t\t\t\t\tfinalValue += `.\${val}`;\r\n\t\t\t\t\t\tprops[key] = finalValue;\r\n\t\t\t\t\t\tEditor.onNodeUpdated(this.id, this.modelNode);\r\n\t\t\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconst valueElement = document.createElement(\"input\");\r\n\t\t\t\tvalueElement.onclick = selectWidget;\r\n\t\t\t\tvalueElement.value = key ? props[key] ?? null : null;\r\n\t\t\t\tvalueElement.className = this.id + \"-item-value\";\r\n\t\t\t\tholder.append(valueElement);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tconst deleteElement = document.createElement(\"span\");\r\n\t\t\tdeleteElement.innerHTML = \"delete\";\r\n\t\t\tdeleteElement.className = this.id + \"-item-delete material-symbols-outlined\";\r\n\t\t\tdeleteElement.onclick = () => {\r\n\t\t\t\tdelete props[key];\r\n\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t};\r\n\t\t\tholder.append(deleteElement);\r\n\t\t} else {\r\n\t\t\tconst keyElement = document.createElement(\"input\");\r\n\t\t\tkeyElement.className = this.id + \"-item-value\";\r\n\t\t\tkeyElement.setAttribute(\"placeholder\", \"Add property\");\r\n\t\t\tkeyElement.onchange = () => {\r\n\t\t\t\tif (!keyElement.value) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (props.hasOwnProperty(keyElement.value)) {\r\n\t\t\t\t\tshowModalError(\"Error\", `Key '\${keyElement.value}' already exists.`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tprops[keyElement.value] = null;\r\n\t\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tholder.append(keyElement);\r\n\t\t}\r\n\r\n\t\treturn holder;\r\n\t}\r\n\r\n\tbuildTypePropertyEditor(rootElement, node) {\r\n\t\tconst holder = document.createElement(\"div\");\r\n\t\tholder.className = this.id + \"-table\";\r\n\t\trootElement.appendChild(holder);\r\n\r\n\t\tconst props = node.properties;\r\n\t\tfor (let key in props) {\r\n\t\t\tlet row = this.createTypePropertyEditorRow(props, key);\r\n\t\t\tholder.appendChild(row);\r\n\t\t}\r\n\r\n\t\t// Empty row to add a new property\r\n\t\tconst addRow = this.createTypePropertyEditorRow(props, null);\r\n\t\tholder.appendChild(addRow);\r\n\t}\r\n\r\n\tcreateTypePropertyEditorRow(props, key) {\r\n\t\tconst holder = document.createElement(\"div\");\r\n\t\tholder.className = this.id + \"-item\";\r\n\r\n\t\tif (!key) {\r\n\t\t\tconst keyElement = document.createElement(\"input\");\r\n\t\t\tkeyElement.className = this.id + \"-item-value\";\r\n\t\t\tkeyElement.setAttribute(\"placeholder\", \"Add property\");\r\n\t\t\tkeyElement.onchange = () => {\r\n\t\t\t\tif (keyElement.value) {\r\n\t\t\t\t\tprops[keyElement.value] = null;\r\n\t\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tholder.append(keyElement);\r\n\t\t} else {\r\n\t\t\tconst value = props[key];\r\n\t\t\tconst keyElement = this.createPropertyNameElement(key, value !== null && value !== undefined);\r\n\t\t\tholder.append(keyElement);\r\n\r\n\t\t\tconst valueElement = document.createElement(\"input\");\r\n\t\t\tvalueElement.value = key ? props[key] ?? null : null;\r\n\t\t\tvalueElement.className = this.id + \"-item-value\";\r\n\t\t\tvalueElement.onchange = () => {\r\n\t\t\t\tthis.logInfo(`\${key} updated: \${props[key]} -> \${valueElement.value}.`);\r\n\t\t\t\tprops[key] = valueElement.value;\r\n\t\t\t\tEditor.onNodeUpdated(this.id, this.modelNode);\r\n\t\t\t};\r\n\t\t\tholder.append(valueElement);\r\n\r\n\t\t\tconst deleteElement = document.createElement(\"span\");\r\n\t\t\tdeleteElement.innerHTML = \"delete\";\r\n\t\t\tdeleteElement.className = this.id + \"-item-delete material-symbols-outlined\";\r\n\t\t\tdeleteElement.onclick = () => {\r\n\t\t\t\tdelete props[key];\r\n\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t};\r\n\t\t\tholder.append(deleteElement);\r\n\t\t}\r\n\t\treturn holder;\r\n\t}\r\n\r\n\tcreatePropertyElement(rootElement, key, type, nodeProperties, template) {\r\n\t\tconst holder = document.createElement(\"div\");\r\n\t\tholder.className = this.id + \"-item\";\r\n\t\trootElement.appendChild(holder);\r\n\r\n\t\tconst value = nodeProperties[key];\r\n\t\tlet isEmpty = value === null || value === undefined;\r\n\t\tif (!isEmpty) {\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tisEmpty = value.length === 0;\r\n\t\t\t} else if (value.constructor === Object) {\r\n\t\t\t\tisEmpty = Object.keys(value).length === 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\tholder.appendChild(this.createPropertyNameElement(key, !isEmpty));\r\n\t\tconst result = this.createPropertyValueElement(rootElement, key, type, nodeProperties, template);\r\n\r\n\t\tconst elements = Array.isArray(result) ? result : [result];\r\n\t\tfor (let i = 0; i < elements.length; i++) {\r\n\t\t\tholder.appendChild(elements[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tcreatePropertyNameElement(name, hasValue) {\r\n\t\tconst nameElement = document.createElement(\"label\");\r\n\t\tnameElement.className = this.id + \"-item-name \";\r\n\t\tif (hasValue)\r\n\t\t\tnameElement.className += this.id + \"-item-name-filled\";\r\n\t\tnameElement.innerHTML = name;\r\n\t\treturn nameElement;\r\n\t}\r\n\r\n\tcreatePropertyValueElement(rootElement, key, type, nodeProperties, template) {\r\n\t\tif (Array.isArray(type)) {\r\n\t\t\treturn this.createPropertyValueSelectElement(type, key, nodeProperties, template);\r\n\t\t}\r\n\t\tif (this.solutionSchema.properties[type] && this.solutionSchema.properties[type][\"abstract\"]) {\r\n\t\t\treturn this.createPropertyValueCompoundSelectionElement(rootElement, type, key, nodeProperties, template);\r\n\t\t}\r\n\t\tconst typeProperties = this.solutionSchema.getPropertyProperties(type);\r\n\t\tif (!typeProperties) {\r\n\t\t\tif (type === \"Json\") {\r\n\t\t\t\treturn this.createPropertyValueJsonElement(rootElement, nodeProperties, key);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.createPropertyValueInputElement(type, key, nodeProperties, template);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (Array.isArray(typeProperties)) {\r\n\t\t\treturn this.createPropertyValueSelectElement(typeProperties, key, nodeProperties, template);\r\n\t\t}\r\n\r\n\t\tconst subElement = this.createPropertyValueCompoundElement(typeProperties, key, nodeProperties, template);\r\n\t\tsubElement.style.display = \"none\";\r\n\t\trootElement.appendChild(subElement);\r\n\r\n\t\tconst valueElement = document.createElement(\"div\");\r\n\t\tvalueElement.className = this.id + \"-item-expandable\";\r\n\t\tvalueElement.innerHTML = \"+\";\r\n\t\tvalueElement.onclick = (e) => {\r\n\t\t\tif (subElement.style.display === \"none\") {\r\n\t\t\t\tsubElement.style.display = null;\r\n\t\t\t} else {\r\n\t\t\t\tsubElement.style.display = \"none\";\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreatePropertyValueCompoundElement(type, key, nodeProperties, template) {\r\n\t\tif (!nodeProperties[key]) {\r\n\t\t\tnodeProperties[key] = {};\r\n\t\t}\r\n\t\tconst value = nodeProperties[key];\r\n\t\tconst templateValue = template[key] ?? {};\r\n\t\tconst valueElement = document.createElement(\"div\");\r\n\t\tvalueElement.className = this.id + \"-subitem\";\r\n\t\tconst properties = type;\r\n\t\tfor (const key in properties) {\r\n\t\t\tif (this.shouldShowProperty(properties[key])) {\r\n\t\t\t\tthis.createPropertyElement(valueElement, key, properties[key], value, templateValue);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreateNodeValueElement(node) {\r\n\t\tconst valueElement = document.createElement(\"div\");\r\n\t\tvalueElement.className = this.id + \"-subitem\";\r\n\r\n\t\tlet schema = node.getPropertySchema();\r\n\t\tfor (let key in schema) {\r\n\t\t\tthis.createPropertyElement(valueElement, key, schema[key], node.getProperties(), {});\r\n\t\t}\r\n\t\tschema = node.getActionSchema();\r\n\t\tfor (let key in schema) {\r\n\t\t\tthis.createPropertyElement(valueElement, key, schema[key], node.getActions(), {});\r\n\t\t}\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreatePropertyValueCompoundSelectionElement(rootElement, type, key, nodeProperties, template) {\r\n\t\tif (!nodeProperties[key]) {\r\n\t\t\tnodeProperties[key] = {};\r\n\t\t}\r\n\r\n\t\tconst typeKey = \"_type\";\r\n\t\tconst value = nodeProperties[key];\r\n\t\tconst templateValue = template[key] ?? {};\r\n\t\tconst isAction = this.solutionSchema.isAction(type);\r\n\r\n\t\tlet valueElement;\r\n\t\tif (type === \"KModel\") {\r\n\t\t\tvalueElement = this.createModelSelectElement(nodeProperties, key);\r\n\t\t} else  if (type === \"KRequest\") {\r\n\t\t\tvalueElement = this.createRequestSelectElement(nodeProperties, key);\r\n\t\t} else {\r\n\t\t\tconst propertyTypes = this.solutionSchema.getPropertyTypes(type);\r\n\t\t\tvalueElement = this.createPropertyValueSelectElement(propertyTypes, typeKey, value, templateValue, (val) => {\r\n\t\t\t\tif (!isAction) {\r\n\t\t\t\t\tthis.updateNodeValue(value, typeKey, val);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.updateNodeValue(nodeProperties, key, new Action(this.solutionId, { \"_type\": val }));\r\n\t\t\t\t}\r\n\t\t\t\tthis.selectNode(this.modelNode);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (value instanceof Node) {\r\n\t\t\tconst subElement = this.createNodeValueElement(value);\r\n\t\t\trootElement.appendChild(subElement);\r\n\t\t} else if (value[typeKey]) {\r\n\t\t\tconst valueType = value[typeKey];\r\n\t\t\tconst typeProperties = this.solutionSchema.getPropertyProperties(valueType);\r\n\r\n\t\t\tif (type !== \"KRequest\") {\r\n\t\t\t\tconst subElement = this.createPropertyValueCompoundElement(typeProperties, key, nodeProperties, template);\r\n\t\t\t\trootElement.appendChild(subElement);\r\n\t\t\t} else {\r\n\t\t\t\t// Add values from this Request object as Template values\r\n\t\t\t\tconst filteredTypeProperties = {};\r\n\t\t\t\tconst reqProps = Editor.project.getRequest(valueType)?.getProperties() ?? {};\r\n\t\t\t\tconst typeTemplate = {};\r\n\t\t\t\tmergeMaps(typeTemplate, template);\r\n\t\t\t\tif (!typeTemplate[key]) {\r\n\t\t\t\t\ttypeTemplate[key] = reqProps;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (let reqKey in reqProps) {\r\n\t\t\t\t\tlet reqVal = reqProps[reqKey];\r\n\t\t\t\t\tif (typeof reqVal === \"object\") {\r\n\t\t\t\t\t\tif (reqVal[typeKey]) {\r\n\t\t\t\t\t\t\tfilteredTypeProperties[reqKey] = reqVal[typeKey];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// filteredTypeProperties[reqKey] = typeProperties[typeKey];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// if (!templateValue.hasOwnProperty(reqKey)) {\r\n\t\t\t\t\t// \ttemplateValue[reqKey] = reqProps[reqKey];\r\n\t\t\t\t\t// }\r\n\t\t\t\t}\r\n\t\t\t\t// template[key] = templateValue;\r\n\r\n\t\t\t\tconst subElement = this.createPropertyValueCompoundElement(filteredTypeProperties, key, nodeProperties, typeTemplate);\r\n\t\t\t\trootElement.appendChild(subElement);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreatePropertyValueSelectElement(types, key, nodeProperties, template, onChange) {\r\n\t\tconst valueElement = document.createElement(\"select\");\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\r\n\t\tlet selectValue = document.createElement(\"option\");\r\n\t\tselectValue.setAttribute(\"value\", null);\r\n\t\tselectValue.innerHTML = template[key] ? template[key] + \" (template)\" : \"\";\r\n\t\tvalueElement.appendChild(selectValue);\r\n\r\n\t\tfor (const type of types) {\r\n\t\t\tselectValue = document.createElement(\"option\");\r\n\t\t\tlet name = typeof type === 'object' ? type.name : type;\r\n\t\t\tlet value = typeof type === 'object' ? type.value : type;\r\n\t\t\tif (typeof name == \"string\") {\r\n\t\t\t\tname = name.replace(\"KAction\", \"\").replace(\"KListAction\", \"\").replace(\"KFormatter\", \"\");\r\n\t\t\t}\r\n\r\n\t\t\tselectValue.setAttribute(\"value\", value);\r\n\t\t\tselectValue.innerHTML = name;\r\n\t\t\tvalueElement.appendChild(selectValue);\r\n\t\t}\r\n\r\n\t\tvalueElement.value = nodeProperties[key] ?? null;\r\n\t\tvalueElement.onchange = () => {\r\n\t\t\tif (!onChange) {\r\n\t\t\t\tthis.updateNodeValue(nodeProperties, key, valueElement.value);\r\n\t\t\t} else {\r\n\t\t\t\tonChange(valueElement.value);\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreatePropertyValueInputElement(type, key, nodeProperties, template) {\r\n\t\tlet valueElement;\r\n\t\tlet value = nodeProperties[key] ?? null;\r\n\t\tconst templateValue = template[key] ?? null;\r\n\r\n\t\tswitch (type) {\r\n\t\t\tcase \"Bool\":\r\n\t\t\t\treturn this.createPropertyValueSelectElement([true, false], key, nodeProperties, template);\r\n\t\t\tcase \"Color\":\r\n\t\t\t\tvalueElement = document.createElement(\"input\");\r\n\t\t\t\t// valueElement.setAttribute(\"type\", \"color\");\r\n\t\t\t\tif (value && value.indexOf(\"\$\") < 0) {\r\n\t\t\t\t\tif (value && !value.startsWith(\"#\")) {\r\n\t\t\t\t\t\tvalue = \"#\" + value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (value && value.startsWith(\"#\") && (value.length == 4 || value.length == 7 || value.length == 9)) {\r\n\t\t\t\t\t\tvalueElement.style.backgroundColor = value;\r\n\t\t\t\t\t\tvalueElement.style.color = invertColor(value, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"Int\":\r\n\t\t\tcase \"Double\":\r\n\t\t\t\tvalueElement = document.createElement(\"input\");\r\n\t\t\t\tvalueElement.setAttribute(\"type\", \"decimal\");\r\n\t\t\t\tbreak;\r\n\t\t\t//case \"Json\":\r\n\t\t\t//\treturn this.createPropertyValueJsonElement(nodeProperties, key);\r\n\t\t\tcase \"KTemplate\":\r\n\t\t\t\treturn this.createTemplateSelectElement();\r\n\t\t\tcase \"KComponent\":\r\n\t\t\t\treturn this.createComponentSelectElement(nodeProperties, key);\r\n\t\t\tcase \"KModel\":\r\n\t\t\t\treturn this.createModelSelectElement(nodeProperties, key);\r\n\t\t\tcase \"KRequest\":\r\n\t\t\t\treturn this.createRequestSelectElement(nodeProperties, key);\r\n\t\t\tcase \"Screen\":\r\n\t\t\t\tconst screens = [];\r\n\t\t\t\tfor (const screen of Editor.project.getScreens(this.solutionId)) {\r\n\t\t\t\t\tscreens.push({ name: screen.getName(), value: screen.getId() });\r\n\t\t\t\t}\r\n\t\t\t\tconst valueSelectElement = this.createPropertyValueSelectElement(screens, key, nodeProperties, template, (val) => {\r\n\t\t\t\t\tthis.updateNodeValue(nodeProperties, key, val);\r\n\t\t\t\t});\r\n\t\t\t\treturn this.wrapGotoNode(valueSelectElement, \"screen\");\r\n\t\t\tdefault:\r\n\t\t\t\tvalueElement = document.createElement(\"input\");\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tconst changeFunc = (val) => {\r\n\t\t\tthis.updateNodeValue(nodeProperties, key, val);\r\n\t\t\tvalueElement.value = val;\r\n\t\t};\r\n\r\n\t\tvalueElement.value = value ?? null;\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\t\tvalueElement.onchange = () => changeFunc(valueElement.value);\r\n\t\tvalueElement.setAttribute(\"placeholder\", templateValue ?? \"\");\r\n\t\treturn this.wrapValueOptions(valueElement.value, valueElement, changeFunc);\r\n\t}\r\n\r\n\tcreatePropertyValueJsonElement(rootElement, nodeProperties, key) {\r\n\t\tconst value = nodeProperties[key];\r\n\t\tconst editor = document.createElement(\"textarea\");\r\n\t\teditor.className = this.id + \"-item-value\";\r\n\t\teditor.value = value != null ? stringify(value) : \"\";\r\n\t\teditor.onchange = () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst obj = JSON.parse(editor.value);\r\n\t\t\t\tthis.updateNodeValue(nodeProperties, key, obj);\r\n\t\t\t} catch (ex) {\r\n\t\t\t\talert(ex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst editorHolder = document.createElement(\"div\");\r\n\t\teditorHolder.className = this.id + \"-item\";\r\n\t\teditorHolder.appendChild(editor);\r\n\t\trootElement.appendChild(editorHolder);\r\n\r\n\t\treturn document.createElement(\"div\");\r\n\t}\r\n\r\n\tcreateTemplateSelectElement() {\r\n\t\tconst valueElement = document.createElement(\"select\");\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\r\n\t\tlet selectValue = document.createElement(\"option\");\r\n\t\tselectValue.setAttribute(\"value\", null);\r\n\t\tvalueElement.appendChild(selectValue);\r\n\r\n\t\tconst widgetTypes = this.solutionSchema.getWidgetInheritance(this.modelNode.getType());\r\n\t\tfor (let type of widgetTypes) {\r\n\t\t\tlet templateList = Editor.project.findTemplates(this.solutionId, type);\r\n\t\t\tfor (let val of templateList) {\r\n\t\t\t\tselectValue = document.createElement(\"option\");\r\n\t\t\t\tselectValue.setAttribute(\"value\", val.getId());\r\n\t\t\t\tselectValue.innerHTML = val.getName();\r\n\t\t\t\tvalueElement.appendChild(selectValue);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvalueElement.value = this.modelNode.getTemplate()?.getId() ?? null;\r\n\t\tvalueElement.onchange = () => {\r\n\t\t\tthis.modelNode.setTemplate(valueElement.value);\r\n\t\t\tEditor.onNodeUpdated(this.id, this.modelNode);\r\n\t\t\tthis.logInfo(`template updated to \${valueElement.value}.`);\r\n\t\t};\r\n\r\n\t\treturn this.wrapGotoNode(valueElement, \"template\");\r\n\t}\r\n\r\n\tcreateComponentSelectElement(node, key) {\r\n\t\tconst valueElement = document.createElement(\"select\");\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\r\n\t\tfor (let component of Editor.project.getComponents(this.solutionId)) {\r\n\t\t\tlet selectValue = document.createElement(\"option\");\r\n\t\t\tselectValue.setAttribute(\"value\", component.getId());\r\n\t\t\tselectValue.innerHTML = component.getName();\r\n\t\t\tvalueElement.appendChild(selectValue);\r\n\t\t}\r\n\r\n\t\tvalueElement.value = node[key];\r\n\t\tvalueElement.onchange = () => this.updateNodeValue(node, key, valueElement.value);\r\n\r\n\t\treturn this.wrapGotoNode(valueElement, \"component\");\r\n\t}\r\n\r\n\twrapGotoNode(valueElement, nodeType) {\r\n\t\tconst gotoButton = document.createElement(\"span\");\r\n\t\tgotoButton.className = \"property-panel-option-button material-symbols-outlined\";\r\n\t\tgotoButton.innerHTML = \"forward\";\r\n\t\tgotoButton.onclick = () => {\r\n\t\t\tlet node;\r\n\t\t\tif (valueElement.value) {\r\n\t\t\t\tswitch (nodeType) {\r\n\t\t\t\t\tcase \"template\":\r\n\t\t\t\t\t\tnode = Editor.project.getTemplate(valueElement.value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"component\":\r\n\t\t\t\t\t\tnode = Editor.project.getComponent(valueElement.value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"screen\":\r\n\t\t\t\t\t\tnode = Editor.project.getScreen(valueElement.value);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tEditor.selectNode(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst valueHolder = document.createElement(\"row\");\r\n\t\tvalueHolder.classList.add(this.id + \"-item-value\");\r\n\t\tvalueHolder.appendChild(valueElement);\r\n\t\tvalueHolder.appendChild(gotoButton);\r\n\t\treturn valueHolder;\r\n\t}\r\n\r\n\twrapValueOptions(value, child, changeFunc) {\r\n\t\tconst options = [\r\n\t\t\t{ name: \"none\", title: \"Free text.\", },\r\n\t\t\t{ name: \"state\", template: \"\${state.{0}}\", title: \"A Screen has a 'state' Map. You can use a key of that map as the value for this property.\", },\r\n\t\t\t{ name: \"entry\", template: \"\${entry.{0}}\", title: \"An 'entry' Map is available for Widgets that are children of a ListWidget. An 'entry' is a member of the array provided to the ListWidget.\", },\r\n\t\t\t{ name: \"env\", template: \"\${env.{0}}\", title: \"Use an environment variable as a value for this property.\", },\r\n\t\t\t{ name: \"global\", template: \"\${global.{0}}\", title: \"The App has a global Map. You can use a key of that map as the value for this property.\", },\r\n\t\t];\r\n\r\n\t\tlet currentOption = options[0];\r\n\t\tconst optionLabel = document.createElement(\"span\");\r\n\t\toptionLabel.classList.add(\"highlightedColor\");\r\n\r\n\t\tconst optionInput = document.createElement(\"input\");\r\n\t\toptionInput.className = this.id + \"-item-value\";\r\n\t\toptionInput.onchange = () => changeFunc(currentOption.template.replace(\"{0}\", optionInput.value));\r\n\r\n\t\tconst selectFunc = (option) => {\r\n\t\t\tcurrentOption = option;\r\n\t\t\toptionLabel.innerHTML = option.name;\r\n\r\n\t\t\tconst childClass = currentOption.name === \"none\" ? \"show\" : \"hide\";\r\n\t\t\tconst optionClass = currentOption.name === \"none\" ? \"hide\" : \"show\";\r\n\t\t\tchild.classList.remove(optionClass);\r\n\t\t\toptionLabel.classList.remove(childClass);\r\n\t\t\toptionInput.classList.remove(childClass);\r\n\t\t\tchild.classList.add(childClass);\r\n\t\t\toptionLabel.classList.add(optionClass);\r\n\t\t\toptionInput.classList.add(optionClass);\r\n\t\t};\r\n\r\n\t\tconst selectButton = document.createElement(\"label\");\r\n\t\tselectButton.className = \"property-panel-option-button material-symbols-outlined\";\r\n\t\tselectButton.innerHTML = \"more_vert\";\r\n\t\tselectButton.title = \"Value options\";\r\n\t\tselectButton.onclick = () => showModalList(null, options, (op) => {\r\n\t\t\toptionInput.value = \"\";\r\n\t\t\tselectFunc(op);\r\n\t\t});\r\n\r\n\t\tconst valueHolder = document.createElement(\"row\");\r\n\t\tvalueHolder.classList.add(this.id + \"-item-value\");\r\n\t\tvalueHolder.appendChild(child);\r\n\t\tvalueHolder.appendChild(optionLabel);\r\n\t\tvalueHolder.appendChild(optionInput);\r\n\t\tvalueHolder.appendChild(selectButton);\r\n\r\n\t\tif (value && value.split(\"\$\").length === 2) {\r\n\t\t\tfor (let option of options) {\r\n\t\t\t\tif (!option.template) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet leading = option.template.split(\".\")[0];\r\n\t\t\t\tif (value.indexOf(leading + \".\") === 0 && value.endsWith(\"}\")) {\r\n\t\t\t\t\tcurrentOption = option;\r\n\t\t\t\t\toptionInput.value = value.replace(leading + \".\", \"\").replace(\"}\", \"\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tselectFunc(currentOption);\r\n\r\n\t\treturn valueHolder;\r\n\t}\r\n\r\n\tcreateModelSelectElement(node, key) {\r\n\t\tconst valueElement = document.createElement(\"select\");\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\r\n\t\tfor (let entry of Editor.project.getModels(this.solutionId)) {\r\n\t\t\tlet selectValue = document.createElement(\"option\");\r\n\t\t\tselectValue.setAttribute(\"value\", entry.getId());\r\n\t\t\tselectValue.innerHTML = entry.getName();\r\n\t\t\tvalueElement.appendChild(selectValue);\r\n\t\t}\r\n\r\n\t\tvalueElement.value = node[key]?._type;\r\n\t\tvalueElement.onchange = () => {\r\n\t\t\tthis.updateNodeValue(node, key, { \"_type\": valueElement.value });\r\n\t\t\tthis.selectNode(this.modelNode);\r\n\t\t};\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tcreateRequestSelectElement(node, key) {\r\n\t\tconst valueElement = document.createElement(\"select\");\r\n\t\tvalueElement.className = this.id + \"-item-value\";\r\n\r\n\t\tfor (let entry of Editor.project.getRequests(this.solutionId)) {\r\n\t\t\tlet selectValue = document.createElement(\"option\");\r\n\t\t\tselectValue.setAttribute(\"value\", entry.getId());\r\n\t\t\tselectValue.innerHTML = entry.getName();\r\n\t\t\tvalueElement.appendChild(selectValue);\r\n\t\t}\r\n\r\n\t\tvalueElement.value = node[key]?._type;\r\n\t\tvalueElement.onchange = () => {\r\n\t\t\tthis.updateNodeValue(node, key, { \"_type\": valueElement.value });\r\n\t\t\tthis.selectNode(this.modelNode);\r\n\t\t};\r\n\t\treturn valueElement;\r\n\t}\r\n\r\n\tupdateNodeValue(nodeProperties, key, value) {\r\n\t\tif (value === \"null\" || value === \"undefined\") {\r\n\t\t\tvalue = null;\r\n\t\t}\r\n\t\tthis.logInfo(`\${key} updated: \${nodeProperties[key]} -> \${value}.`);\r\n\t\tnodeProperties[key] = value;\r\n\t\tEditor.onNodeUpdated(this.id, this.modelNode);\r\n\t}\r\n\r\n\tshouldShowProperty(type) {\r\n\t\treturn !this.solutionSchema.isWidget(type) && !this.solutionSchema.isAction(type);\r\n\t}\r\n\r\n\tlogInfo(message) {\r\n\t\tEditor.logInfo(`[PropertyPanel] '\${this.modelNode.getName() || this.modelNode.getType()}' \${message}`, this.modelNode);\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass ActionPanel extends PropertyPanel{\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"action-panel\";\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tthis.modelNode = node;\r\n\t\tthis.solutionId = node.getSolutionId();\r\n\r\n\t\tconst schemaActions = node.getActionSchema() ?? {};\r\n\t\tconst nodeActions = node.getActions();\r\n\t\tconst template = {}; // (node instanceof Widget ? node.getTemplate() : {}) ?? {};\r\n\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\t\tthis.buildHeader(rootPanel, node);\r\n\r\n\t\tfor (let key in schemaActions) {\r\n\t\t\tthis.createPropertyElement(rootPanel, key, schemaActions[key], nodeActions, template);\r\n\t\t}\r\n\t}\r\n\r\n\tshouldShowProperty(type) {\r\n\t\treturn !this.solutionSchema.isWidget(type);\r\n\t}\r\n}\r\n\nclass TestPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"test-panel\";\r\n\t}\r\n\r\n\tpopulate() {\r\n\t\tdocument.getElementById(this.id).innerHTML = \"\";\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\tif (!(node instanceof RootNode)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\trootPanel.innerHTML = \"\";\r\n\t\tconst value = Editor.project.getTestData(node.getId()) || \"{\\n}\";\r\n\r\n\t\tconst editor = document.createElement(\"textarea\");\r\n\t\teditor.className = \"json-panel-editor\";\r\n\t\teditor.value = value;\r\n\t\teditor.onchange = () => {\r\n\t\t\ttry {\r\n\t\t\t\tif (editor.value) {\r\n\t\t\t\t\tJSON.parse(editor.value);\r\n\t\t\t\t}\r\n\t\t\t\tEditor.project.setTestData(node.getSolutionId(), node.getId(), editor.value);\r\n\t\t\t} catch (ex) {\r\n\t\t\t\talert(ex);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\trootPanel.appendChild(editor);\r\n\t}\r\n}\r\n\nclass JsonPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"json-panel\";\r\n\t}\r\n\r\n\tpopulate() {\r\n\t\tdocument.getElementById(this.id).innerHTML = \"\";\r\n\t}\r\n\r\n\tonNodeUpdated(origin, node, screen) {\r\n\t\tthis.selectNode(node);\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\r\n\t\tconst editor = document.createElement(\"textarea\");\r\n\t\teditor.className = \"json-panel-editor\";\r\n\t\teditor.value = stringify(node);\r\n\t\teditor.onchange = (v) => { this.updateNode(editor.value, node); };\r\n\t\trootPanel.appendChild(editor);\r\n\t}\r\n\tupdateNode(json, node) {\r\n\t\ttry {\r\n\t\t\tconst obj = JSON.parse(json);\r\n\t\t\tnode.fromObject(obj);\r\n\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t} catch (ex) {\r\n\t\t\talert(ex);\r\n\t\t}\r\n\t}\r\n}\r\n\nclass SolutionPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"solution-panel\";\r\n\t\tthis.cssId = \"solution-panel\";\r\n\t\tthis.visibilityState = {};\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tconst nodeId = node?.getId();\r\n\t\tif (!node.isRootNode) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\tconst elements = rootPanel.getElementsByClassName(this.cssId + \"-item-selected\");\r\n\t\tfor (let child of elements) {\r\n\t\t\tchild.classList.remove(this.cssId + \"-item-selected\");\r\n\t\t}\r\n\r\n\t\tconst element = rootPanel.querySelectorAll('[node-id=\"' + nodeId + '\"]');\r\n\t\tif (element && element.length > 0) {\r\n\t\t\telement[0].classList.add(this.cssId + \"-item-selected\");\r\n\t\t}\r\n\t}\r\n\r\n\tonNodeCreated(origin, node) {\r\n\t\tif (node.isRootNode) {\r\n\t\t\tthis.populate();\r\n\t\t\tthis.selectNode(node);\r\n\t\t}\r\n\t}\r\n\r\n\tonNodeUpdated(origin, node) {\r\n\t\tif (node.isRootNode) {\r\n\t\t\tthis.populate();\r\n\t\t\tthis.selectNode(node);\r\n\t\t}\r\n\t}\r\n\r\n\tonNodeDeleted(origin, node) {\r\n\t\tif (node.isRootNode) {\r\n\t\t\tthis.populate();\r\n\t\t\tthis.selectNode(node);\r\n\t\t}\r\n\t}\r\n\r\n\tpopulate() {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\r\n\t\tfor (let solution of Editor.project.solutions) {\r\n\t\t\tthis.populateSolution(rootPanel, solution);\r\n\t\t}\r\n\t}\r\n\r\n\tpopulateSolution(rootPanel, solution) {\r\n\t\tconst solutionId = solution.getId();\r\n\t\tlet visible = !this.visibilityState[solutionId];\r\n\t\tconst childHolder = document.createElement(\"column\");\r\n\t\tchildHolder.className = this.cssId + \"-item-holder\";\r\n\r\n\t\tconst toggleFunc = () => {\r\n\t\t\tif (visible) {\r\n\t\t\t\tdelete this.visibilityState[solutionId];\r\n\t\t\t\tchildHolder.classList.remove(\"hide\");\r\n\t\t\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\t\t} else {\r\n\t\t\t\tthis.visibilityState[solutionId] = true;\r\n\t\t\t\tchildHolder.classList.add(\"hide\");\r\n\t\t\t\ttoggleElement.innerHTML = \"navigate_next\";\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst toggleElement = document.createElement(\"span\");\r\n\t\ttoggleElement.className = \"screen-panel-item-toggler material-symbols-outlined\";\r\n\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\ttoggleElement.onclick = (e) => {\r\n\t\t\tvisible = !visible;\r\n\t\t\ttoggleFunc();\r\n\t\t\te.stopPropagation();\r\n\t\t};\r\n\r\n\t\tconst name = document.createElement(\"span\");\r\n\t\tname.classList.add(this.cssId + \"-item-name\");\r\n\t\tname.classList.add(this.cssId + \"-solution-name\");\r\n\t\tname.innerHTML = solution.name ?? solutionId;\r\n\r\n\t\tconst actionIcon = document.createElement(\"span\");\r\n\t\tactionIcon.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\tactionIcon.innerHTML = \"add\";\r\n\t\tactionIcon.onclick = () => this.onCreateNewNode(solution);\r\n\r\n\t\tconst row = document.createElement(\"div\");\r\n\t\trow.classList.add(this.cssId + \"-item-solution\");\r\n\t\trow.setAttribute(\"node-id\", solutionId);\r\n\t\trow.appendChild(toggleElement);\r\n\t\trow.appendChild(name);\r\n\t\trow.appendChild(actionIcon);\r\n\r\n\t\trootPanel.appendChild(row);\r\n\t\trootPanel.appendChild(childHolder);\r\n\t\ttoggleFunc();\r\n\r\n\t\tconst folderMap = {};\r\n\t\tconst folders = [...solution.folders];\r\n\t\twhile (folders.length > 0) {\r\n\t\t\tlet folder = folders[0];\r\n\t\t\tif (!folder.getFolder()) {\r\n\t\t\t\tlet folderHolder = this.createNodeItem(childHolder, solution, folder, \"folder\");\r\n\t\t\t\tfolderMap[folder.getId()] = folderHolder;\r\n\t\t\t\tfolders.splice(0, 1);\r\n\t\t\t} else if (folderMap[folder.getFolder()]) {\r\n\t\t\t\tlet folderHolder = this.createNodeItem(folderMap[folder.getFolder()], solution, folder, \"folder\");\r\n\t\t\t\tfolderMap[folder.getId()] = folderHolder;\r\n\t\t\t\tfolders.splice(0, 1);\r\n\t\t\t} else {\r\n\t\t\t\tfolders.splice(0, 1);\r\n\t\t\t\tfolders.push(folder);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst nodesToPopulate = this.getNodesToPopulate(solution);\r\n\t\tconst nodeTypeArrays = nodesToPopulate.types;\r\n\t\tconst nodeArrays = nodesToPopulate.nodes;\r\n\r\n\t\tfor (let i = 0; i < nodeArrays.length; i++) {\r\n\t\t\tlet array = nodeArrays[i];\r\n\t\t\tlet type = nodeTypeArrays[i];\r\n\t\t\tif (array) {\r\n\t\t\t\tfor (let node of array) {\r\n\t\t\t\t\tlet folder = node.getFolder();\r\n\t\t\t\t\tif (!folder || !folderMap[folder]) {\r\n\t\t\t\t\t\tthis.createNodeItem(childHolder, solution, node, type);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.createNodeItem(folderMap[folder], solution, node, type);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (childHolder.children.length === 0) {\r\n\t\t\tconst noEntriesElement = this.buildNoEntriesMessage(solution);\r\n\t\t\tchildHolder.appendChild(noEntriesElement);\r\n\t\t}\r\n\t}\r\n\r\n\tbuildNoEntriesMessage(solution) {\r\n\t\tconst nodes = this.getNodesToPopulate(solution).types[0];\r\n\t\tconst holder = document.createElement(\"column\");\r\n\t\tholder.classList.add(this.cssId + \"-no-entries\");\r\n\t\tholder.innerText = `No '\${nodes}s' yet.\\nClick here to create your first.`;\r\n\t\tholder.onclick = () => this.onCreateNewNode(solution);\r\n\t\treturn holder;\r\n\t}\r\n\r\n\tgetNodesToPopulate(solution) {\r\n\t\treturn {\r\n\t\t\ttypes: [\"screen\"],\r\n\t\t\tnodes: [solution.screens]\r\n\t\t};\r\n\t}\r\n\r\n\tcreateNodeItem(parentElement, solution, node, type) {\r\n\t\tconst icon = document.createElement(\"span\");\r\n\t\ticon.className = this.cssId + \"-item-icon material-symbols-outlined\";\r\n\t\tswitch (type) {\r\n\t\t\tcase \"folder\":\r\n\t\t\t\ticon.innerHTML = \"folder_open\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"model\":\r\n\t\t\t\ticon.innerHTML = \"assignment\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"request\":\r\n\t\t\t\ticon.innerHTML = \"cloud\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"screen\":\r\n\t\t\t\ticon.innerHTML = \"phone_iphone\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"template\":\r\n\t\t\t\ticon.innerHTML = \"style\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"component\":\r\n\t\t\t\ticon.innerHTML = \"widgets\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tconst name = document.createElement(\"span\");\r\n\t\tname.className = this.cssId + \"-item-name\";\r\n\t\tname.innerHTML = node.getName() ?? node.getId();\r\n\r\n\t\tconst row = document.createElement(\"row\");\r\n\t\trow.className = this.cssId + \"-item\";\r\n\t\trow.setAttribute(\"node-id\", node.getId());\r\n\t\trow.addEventListener(\"click\", () => this.onNodeClick(node));\r\n\t\trow.addEventListener(\"dblclick\", () => this.onNodeDoubleClick(node));\r\n\t\trow.appendChild(icon);\r\n\t\trow.appendChild(name);\r\n\t\tparentElement.appendChild(row);\r\n\r\n\t\tconst buttonHolder = document.createElement(\"row\");\r\n\t\tbuttonHolder.className = this.cssId + \"-item-actions\";\r\n\t\trow.appendChild(buttonHolder);\r\n\r\n\t\tif (solution.canMoveUp(type, node)) {\r\n\t\t\tconst upButton = document.createElement(\"span\");\r\n\t\t\tupButton.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\t\tupButton.innerHTML = \"arrow_upward\";\r\n\t\t\tupButton.title = \"Move upward\";\r\n\t\t\tupButton.onclick = () => {\r\n\t\t\t\tsolution.moveRootNode(type, node, \"up\");\r\n\t\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t\t};\r\n\t\t\tbuttonHolder.appendChild(upButton);\r\n\t\t}\r\n\r\n\t\tif (solution.canMoveDown(type, node)) {\r\n\t\t\tconst downButton = document.createElement(\"span\");\r\n\t\t\tdownButton.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\t\tdownButton.innerHTML = \"arrow_downward\";\r\n\t\t\tdownButton.title = \"Move downward\";\r\n\t\t\tdownButton.onclick = () => {\r\n\t\t\t\tsolution.moveRootNode(type, node, \"down\");\r\n\t\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t\t};\r\n\t\t\tbuttonHolder.appendChild(downButton);\r\n\t\t}\r\n\r\n\t\tif (type !== \"folder\") {\r\n\t\t\tconst cloneButton = document.createElement(\"span\");\r\n\t\t\tcloneButton.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\t\tcloneButton.innerHTML = \"add_to_photos\";\r\n\t\t\tcloneButton.title = \"Clone this \" + type;\r\n\t\t\tcloneButton.onclick = () => {\r\n\t\t\t\tconst newNode = solution.cloneRootNode(type, node);\r\n\t\t\t\tif (newNode) {\r\n\t\t\t\t\tEditor.onNodeCreated(this.id, newNode);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tbuttonHolder.appendChild(cloneButton);\r\n\t\t}\r\n\r\n\t\tif (Editor.project.solutions.length > 1) {\r\n\t\t\tconst changeSolutionButton = document.createElement(\"span\");\r\n\t\t\tchangeSolutionButton.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\t\tchangeSolutionButton.innerHTML = \"swap_vertical_circle\";\r\n\t\t\tchangeSolutionButton.title = \"Move to another Solution\";\r\n\t\t\tchangeSolutionButton.onclick = () => {\r\n\t\t\t\tthis.changeSolution(solution, type, node);\r\n\t\t\t};\r\n\t\t\tbuttonHolder.appendChild(changeSolutionButton);\r\n\t\t}\r\n\t\t\r\n\t\tconst deleteButton = document.createElement(\"span\");\r\n\t\tdeleteButton.className = this.cssId + \"-item-action material-symbols-outlined\";\r\n\t\tdeleteButton.innerHTML = \"delete\";\r\n\t\tdeleteButton.title = \"Remove\";\r\n\t\tdeleteButton.onclick = () => {\r\n\t\t\tif (confirm(\"Remove this \" + type + \"?\")) {\r\n\t\t\t\tsolution.removeRootNode(type, node);\r\n\t\t\t\tEditor.onNodeDeleted(this.id, node);\r\n\t\t\t}\r\n\t\t};\r\n\t\tbuttonHolder.appendChild(deleteButton);\r\n\r\n\t\tif (type === \"folder\") {\r\n\t\t\tconst childHolder = document.createElement(\"div\");\r\n\t\t\tchildHolder.className = this.cssId + \"-item-holder\";\r\n\t\t\t\r\n\t\t\tlet visible = !this.visibilityState[node.getId()];\r\n\t\t\tconst toggleElement = document.createElement(\"span\");\r\n\t\t\ttoggleElement.className = \"screen-panel-item-toggler material-symbols-outlined\";\r\n\r\n\t\t\tconst toggleFunc = () => {\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\tdelete this.visibilityState[node.getId()];\r\n\t\t\t\t\tchildHolder.classList.remove(\"hide\");\r\n\t\t\t\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.visibilityState[node.getId()] = true;\r\n\t\t\t\t\tchildHolder.classList.add(\"hide\");\r\n\t\t\t\t\ttoggleElement.innerHTML = \"navigate_next\";\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tconst outerRow = document.createElement(\"row\");\r\n\t\t\touterRow.classList.add(this.cssId + \"-item-folder\");\r\n\t\t\touterRow.appendChild(toggleElement);\r\n\t\t\touterRow.appendChild(row);\r\n\t\t\tparentElement.appendChild(outerRow);\r\n\t\t\tparentElement.appendChild(childHolder);\r\n\r\n\t\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\t\ttoggleElement.onclick = (e) => {\r\n\t\t\t\tvisible = !visible;\r\n\t\t\t\ttoggleFunc();\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t};\r\n\t\t\ttoggleFunc();\r\n\r\n\t\t\treturn childHolder;\r\n\t\t}\r\n\t}\r\n\r\n\tchangeSolution(currentSolution, type, node) {\r\n\t\tconst options = [];\r\n\t\tfor (let sol of Editor.project.solutions) {\r\n\t\t\tif (sol.id !== currentSolution.id) {\r\n\t\t\t\toptions.push({\r\n\t\t\t\t\t\"id\": sol.id,\r\n\t\t\t\t\t\"name\": sol.name,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (options === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst tailFunction = (solutionId) => {\r\n\t\t\tEditor.project.changeSolution(type, node, solutionId);\r\n\t\t\tEditor.onNodeUpdated(this.id, node);\r\n\t\t};\r\n\r\n\t\tif (options.length === 1) {\r\n\t\t\tif (confirm(`Move \${type} \${node.getName()} to \${options[0].name}?`)) {\r\n\t\t\t\ttailFunction(options[0].id);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tshowModalList(null, options, (v) => tailFunction(v.id));\r\n\t\t}\r\n\t}\r\n\r\n\tonCreateNewNode(solution) {\r\n\t\tconst types = this.getNodesToPopulate(solution).types;\r\n\t\tshowModalList(null, types.concat([\"folder\"]), (v) => {\r\n\t\t\tswitch (v.toLowerCase()) {\r\n\t\t\t\tcase \"template\":\r\n\t\t\t\tcase \"component\":\r\n\t\t\t\t\tconst schema = Editor.project.getSchema(solution.getId());\r\n\t\t\t\t\tconst types = schema.getWidgetsOfType(null);\r\n\t\t\t\t\tshowModalList(null, types, (selectedType) => {\r\n\t\t\t\t\t\tthis.createNode(solution, v, selectedType);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn this.createNode(solution, v);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tcreateNode(solution, type, prop) {\r\n\t\tconst nameInput = document.createElement(\"input\");\r\n\t\tnameInput.setAttribute(\"placeholder\", \"Name the new \" + type);\r\n\r\n\t\tconst noFolder = document.createElement(\"option\");\r\n\t\tnoFolder.value = \"\";\r\n\t\tnoFolder.innerHTML = \"Select a folder for the new \" + type;\r\n\t\tnoFolder.setAttribute(\"disabled\", \"disabled\");\r\n\t\tnoFolder.setAttribute(\"hidden\", \"hidden\");\r\n\t\tnoFolder.setAttribute(\"selected\", \"selected\");\r\n\t\tconst folderSelector = document.createElement(\"select\");\r\n\t\tfolderSelector.appendChild(noFolder);\r\n\t\tfor (let folder of Editor.project.getFolders(solution.id)) {\r\n\t\t\tlet option = document.createElement(\"option\");\r\n\t\t\toption.value = folder.getId();\r\n\t\t\toption.innerHTML = folder.getName();\r\n\t\t\tfolderSelector.appendChild(option);\r\n\t\t}\r\n\r\n\t\tconst column = document.createElement(\"column\");\r\n\t\tcolumn.style.setProperty(\"gap\", \"10px\");\r\n\t\tcolumn.appendChild(nameInput);\r\n\t\tcolumn.appendChild(folderSelector);\r\n\r\n\t\tshowModalForm(\"New \" + type, column, () => {\r\n\t\t\tlet newNode;\r\n\t\t\tswitch (type.toLowerCase()) {\r\n\t\t\t\tcase \"screen\":\r\n\t\t\t\t\tnewNode = solution.createScreen();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"template\":\r\n\t\t\t\t\tnewNode = solution.createTemplate(prop);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"component\":\r\n\t\t\t\t\tnewNode = solution.createComponent(prop);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"model\":\r\n\t\t\t\t\tnewNode = solution.createType(\"KModel\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"request\":\r\n\t\t\t\t\tnewNode = solution.createType(\"KRequest\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"folder\":\r\n\t\t\t\t\tnewNode = solution.createFolder();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn;\r\n\t\t\t}\r\n\t\r\n\t\t\tif (newNode) {\r\n\t\t\t\tif (nameInput.value) {\r\n\t\t\t\t\tnewNode.setName(nameInput.value);\r\n\t\t\t\t}\r\n\t\t\t\tif (folderSelector.value) {\r\n\t\t\t\t\tnewNode.setFolder(folderSelector.value);\r\n\t\t\t\t}\r\n\t\t\t\tEditor.onNodeCreated(this.id, newNode);\r\n\t\t\t\tif (type.toLowerCase() !== \"folder\") {\r\n\t\t\t\t\tEditor.selectNode(newNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tnameInput.focus();\r\n\t}\r\n\r\n\tonNodeClick(node) {\r\n\t\tEditor.selectNode(node);\r\n\t}\r\n\r\n\tonNodeDoubleClick(screen) {\r\n\t}\r\n\r\n\tstatic onToolbarClick(idx) {\r\n\t\t// SolutionPanel.onToolbarSetVisibility(true);\r\n\t\tconst toolbar = document.getElementById(\"solution-tabs-buttons\");\r\n\t\tfor (let child of toolbar.children) {\r\n\t\t\tchild.classList.remove(\"collapsible-tabs-button-selected\");\r\n\t\t}\r\n\t\ttoolbar.children[idx].classList.add(\"collapsible-tabs-button-selected\");\r\n\r\n\t\tconst panelHolder = document.getElementById(\"explorer-tabs-panels\");\r\n\t\tfor (let child of panelHolder.children)\r\n\t\t\tchild.classList.add(\"hidden\");\r\n\t\tpanelHolder.children[idx].classList.remove(\"hidden\");\r\n\t}\r\n\r\n\tstatic onToolbarOver(idx) {\r\n\t\tSolutionPanel.onToolbarClick(idx);\r\n\t}\r\n\r\n\tstatic onToolbarToggle() {\r\n\t\tconst panel = document.getElementById(\"explorer-tabs\");\r\n\t\tSolutionPanel.onToolbarSetVisibility(panel.classList.contains(\"collapsible-tabs-collapsed\"));\r\n\t}\r\n\r\n\tstatic onToolbarSetVisibility(visible = true) {\r\n\t\tconst panel = document.getElementById(\"explorer-tabs\");\r\n\t\tconst toggler = document.getElementById(\"solution-tabs-toggler\");\r\n\t\tif (visible)\r\n\t\t{\r\n\t\t\ttoggler.innerHTML = \"chevron_left\";\r\n\t\t\tpanel.classList.remove(\"collapsible-tabs-collapsed\");\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ttoggler.innerHTML = \"chevron_right\";\r\n\t\t\tpanel.classList.add(\"collapsible-tabs-collapsed\");\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nclass TemplatePanel extends SolutionPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"template-panel\";\r\n\t}\r\n\r\n\tgetNodesToPopulate(solution) {\r\n\t\treturn {\r\n\t\t\ttypes: [\"template\"],\r\n\t\t\tnodes: [solution.templates]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n\r\nclass ComponentPanel extends SolutionPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"component-panel\";\r\n\t}\r\n\r\n\tgetNodesToPopulate(solution) {\r\n\t\treturn {\r\n\t\t\ttypes: [\"component\"],\r\n\t\t\tnodes: [solution.components]\r\n\t\t};\r\n\t}\r\n}\r\n\r\n\r\nclass TypePanel extends SolutionPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"type-panel\";\r\n\t}\r\n\r\n\tgetNodesToPopulate(solution) {\r\n\t\treturn {\r\n\t\t\ttypes: [\"model\", \"request\"],\r\n\t\t\tnodes: [\r\n\t\t\t\tsolution.types.filter(e => e.extends === \"KModel\"),\r\n\t\t\t\tsolution.types.filter(e => e.extends === \"KRequest\")\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n}\nclass ScreenPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"screen-panel\";\r\n\t\tthis.node;\r\n\t\tthis.visibilityState = {};\r\n\t\tthis.injectedStyles = {};\r\n\t\twindow.setTimeout(() => this.rebuildFrame(), 100);\r\n\t}\r\n\r\n\tpopulate() {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\t\tconst flutterPanel = document.getElementById(\"flutter-panel\");\r\n\t\tflutterPanel.onVisible = () => document.getElementById(\"flutter-panel-toolbar\").classList.remove(\"hidden\");\r\n\t\tflutterPanel.onInvisible = () => document.getElementById(\"flutter-panel-toolbar\").classList.add(\"hidden\");\r\n\t\tthis.node = null;\r\n\t\tthis.solutionId = null;\r\n\t\tthis.solutionSchema = null;\r\n\t}\r\n\r\n\tonNodeUpdated(origin, node, screen) {\r\n\t\tif (screen?.getId() === this.node?.getId() || node.getId() === this.node?.getId()) {\r\n\t\t\tthis.internalSelectNode(this.node);\r\n\t\t}\r\n\t\tthis.internalSelectNode(Editor.selectedNode);\r\n\t}\r\n\r\n\tselectNode(node) {\r\n\t\tif (node.getId() == this.node?.getId()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.internalSelectNode(node);\r\n\t}\r\n\r\n\tinternalSelectNode(node) {\r\n\t\tif (node instanceof Screen) {\r\n\t\t\tthis.node = node;\r\n\t\t\tthis.solutionId = node.getSolutionId();\r\n\t\t\tthis.solutionSchema = Editor.project.getSchema(this.solutionId);\r\n\t\t\tthis.buildScreen(node);\r\n\t\t} else if (node instanceof Component) {\r\n\t\t\tthis.node = node;\r\n\t\t\tthis.solutionId = node.getSolutionId();\r\n\t\t\tthis.solutionSchema = Editor.project.getSchema(this.solutionId);\r\n\t\t\tthis.buildComponent(node);\r\n\t\t}\r\n\r\n\t\tif (node instanceof Widget) {\r\n\t\t\tconst rootElement = document.getElementById(this.id);\r\n\t\t\tconst children = rootElement.getElementsByClassName(this.id + \"-item-selected\");\r\n\t\t\tfor (let child of children) {\r\n\t\t\t\tchild.classList.remove(this.id + \"-item-selected\");\r\n\t\t\t}\r\n\r\n\t\t\tconst selectedChild = rootElement.getElementsByClassName(node.getId());\r\n\t\t\tif (selectedChild.length > 0) {\r\n\t\t\t\tselectedChild[0].classList.add(this.id + \"-item-selected\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbuildScreen(screen) {\r\n\t\tconst rootElement = document.getElementById(this.id);\r\n\t\trootElement.innerHTML = \"\";\r\n\t\tif (screen.getBody()) {\r\n\t\t\tthis.buildWidget(screen, \"body\", rootElement);\r\n\t\t} else {\r\n\t\t\tconst screenPlaceholder = { key: \"body\", type: \"RootWidget\" };\r\n\t\t\tconst widgetTypes = this.solutionSchema.getWidgetsOfType(\"RootWidget\");\r\n\t\t\t\r\n\t\t\tconst message = document.createElement(\"span\");\r\n\t\t\tmessage.classList.add(this.id + \"-root-message\");\r\n\t\t\tmessage.innerText = \"Select your root widget:\";\r\n\r\n\t\t\tconst holder = document.createElement(\"column\");\r\n\t\t\tholder.classList.add(this.id + \"-root\");\r\n\t\t\tholder.appendChild(message);\r\n\t\t\trootElement.appendChild(holder);\r\n\r\n\t\t\tconst buildWidgetTypeButton = (widgetType) => {\r\n\t\t\t\tconst button = document.createElement(\"span\");\r\n\t\t\t\tbutton.innerText = widgetType.name;\r\n\t\t\t\tbutton.classList.add(this.id + \"-root-select\");\r\n\t\t\t\tbutton.onclick = () => {\r\n\t\t\t\t\tthis.createWidget(widgetType, screen, screenPlaceholder);\r\n\t\t\t\t};\r\n\t\t\t\tholder.appendChild(button);\r\n\t\t\t};\r\n\t\t\tfor (let type of widgetTypes) {\r\n\t\t\t\tbuildWidgetTypeButton({ type: type, name: type });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbuildComponent(component) {\r\n\t\tconst rootElement = document.getElementById(this.id);\r\n\t\trootElement.innerHTML = \"\";\r\n\t\tconst dummyScreen = new Screen(component.getSolutionId());\r\n\t\tdummyScreen.setBody(component);\r\n\t\tthis.buildWidget(dummyScreen, \"body\", rootElement, null, true);\r\n\t}\r\n\r\n\tbuildWidget(parentWidget, parentKey, parentElement, idx, isRoot) {\r\n\t\tconst keyValue = parentWidget.getWidget(parentKey);\r\n\t\tconst isArray = Array.isArray(keyValue);\r\n\t\tconst widget = isArray ? keyValue[idx] : keyValue;\r\n\r\n\t\tconst toggleElement = document.createElement(\"span\");\r\n\t\ttoggleElement.className = this.id + \"-item-toggler material-symbols-outlined\";\r\n\r\n\t\tconst iconElement = document.createElement(\"span\");\r\n\t\ticonElement.className = this.id + \"-item-icon material-symbols-outlined\";\r\n\t\ticonElement.innerHTML = getIconForWidget(widget.getType());\r\n\r\n\t\tlet title;\r\n\t\tlet subtitle;\r\n\t\tconst relevantProperties = [\r\n\t\t\twidget.getName(),\r\n\t\t\twidget.getProperty(\"alias\"),\r\n\t\t\twidget.getTemplate()?.getName() ?? widget.getType(),\r\n\t\t\t!parentKey.includes(\"child\") ? parentKey : null,\r\n\t\t];\r\n\t\tfor (let prop of relevantProperties) {\r\n\t\t\tif (prop != null) {\r\n\t\t\t\tif (!title) {\r\n\t\t\t\t\ttitle = prop;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsubtitle = prop;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst titleElement = document.createElement(\"span\");\r\n\t\ttitleElement.className = this.id + \"-item-title\";\r\n\t\ttitleElement.innerHTML = title;\r\n\r\n\t\tconst subtitleElement = document.createElement(\"span\");\r\n\t\tsubtitleElement.className = this.id + \"-item-subtitle\";\r\n\t\tsubtitleElement.innerHTML = subtitle ?? \"\";\r\n\r\n\t\tconst nameElement = document.createElement(\"div\");\r\n\t\tnameElement.className = this.id + \"-item-name\";\r\n\t\tnameElement.appendChild(titleElement);\r\n\t\tnameElement.appendChild(subtitleElement);\r\n\r\n\t\tconst element = document.createElement(\"div\");\r\n\t\telement.className = this.id + \"-item\";\r\n\t\tif (widget.getId())\r\n\t\t\telement.classList.add(widget.getId());\r\n\t\telement.onclick = () => Editor.selectNode(widget);\r\n\t\telement.appendChild(toggleElement);\r\n\t\telement.appendChild(iconElement);\r\n\t\telement.appendChild(nameElement);\r\n\t\tparentElement.appendChild(element);\r\n\r\n\t\tconst addWidgetKeys = [];\r\n\t\tconst properties = widget.getWidgetSchema();\r\n\t\tconst childrenHolder = [];\r\n\t\tif (properties) {\r\n\t\t\tconst configDropEvents = (elem) => {\r\n\t\t\t\telem.ondragenter = () => elem.classList.add(`\${this.id}-item-children-drop-over`);\r\n\t\t\t\telem.ondragleave = (e) => {\r\n\t\t\t\t\tif (!childOf(e.fromElement, elem)) {\r\n\t\t\t\t\t\telem.classList.remove(`\${this.id}-item-children-drop-over`);\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t};\r\n\r\n\t\t\tfor (let key in properties) {\r\n\t\t\t\tconst type = properties[key];\r\n\t\t\t\tif (type.startsWith(\"[\")) {\r\n\t\t\t\t\tlet arrayProperty = widget.getWidget(key);\r\n\t\t\t\t\taddWidgetKeys.push({ key, type, hasValue: arrayProperty !== null && arrayProperty !== undefined });\r\n\t\t\t\t\tif (arrayProperty) {\r\n\t\t\t\t\t\tconst childHolder = document.createElement(\"column\");\r\n\t\t\t\t\t\tchildHolder.classList.add(`\${this.id}-item-children`);\r\n\t\t\t\t\t\tchildHolder.classList.add(`\${this.id}-item-children-\${type.replace(\"[\", \"\").replace(\"]\", \"\")}`);\r\n\t\t\t\t\t\tconfigDropEvents(childHolder);\r\n\t\t\t\t\t\tchildrenHolder.push(childHolder);\r\n\r\n\t\t\t\t\t\tlet i;\r\n\t\t\t\t\t\tfor (i = 0; i < arrayProperty.length; i++) {\r\n\t\t\t\t\t\t\tchildHolder.appendChild(this.buildDropSeparator(widget, key, type, i));\r\n\t\t\t\t\t\t\tthis.buildWidget(widget, key, childHolder, i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tchildHolder.appendChild(this.buildDropSeparator(widget, key, type, i));\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (widget.getWidget(key)) {\r\n\t\t\t\t\t\tconst childHolder = document.createElement(\"div\");\r\n\t\t\t\t\t\tchildHolder.className = this.id + \"-item-children\";\r\n\t\t\t\t\t\tchildrenHolder.push(childHolder);\r\n\t\t\t\t\t\tthis.buildWidget(widget, key, childHolder);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\taddWidgetKeys.push({ key, type });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (childrenHolder.length > 0) {\r\n\t\t\tfor (let childHolder of childrenHolder) {\r\n\t\t\t\tparentElement.appendChild(childHolder);\r\n\t\t\t}\r\n\r\n\t\t\tlet visible = !this.visibilityState[widget.getId()];\r\n\t\t\tconst toggleFunc = () => {\r\n\t\t\t\tif (visible) {\r\n\t\t\t\t\tdelete this.visibilityState[widget.getId()];\r\n\t\t\t\t\tfor (let childHolder of childrenHolder) {\r\n\t\t\t\t\t\tchildHolder.classList.remove(\"hide\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.visibilityState[widget.getId()] = true;\r\n\t\t\t\t\tfor (let childHolder of childrenHolder) {\r\n\t\t\t\t\t\tchildHolder.classList.add(\"hide\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttoggleElement.innerHTML = \"navigate_next\";\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\ttoggleElement.innerHTML = \"expand_more\";\r\n\t\t\ttoggleElement.onclick = (e) => {\r\n\t\t\t\tvisible = !visible;\r\n\t\t\t\ttoggleFunc();\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t}\r\n\t\t\ttoggleFunc();\r\n\t\t}\r\n\r\n\t\t// Build toolbar\r\n\t\tconst options = [];\r\n\t\tconst buttonHolder = document.createElement(\"div\");\r\n\t\tbuttonHolder.className = this.id + \"-item-actions\";\r\n\t\telement.appendChild(buttonHolder);\r\n\r\n\t\tif (!isRoot && widget.isOfType(\"Widget\")) {\r\n\t\t\t// const wrapButton = document.createElement(\"span\");\r\n\t\t\t// wrapButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\t\t// wrapButton.innerHTML = \"crop_free\";\r\n\t\t\t// wrapButton.title = \"Add a Widget around this Widget\";\r\n\t\t\t// wrapButton.onclick = () => {\r\n\t\t\t// \tthis.selectWrappableWidgetType(widget, parentWidget, parentKey);\r\n\t\t\t// }\r\n\t\t\t// buttonHolder.appendChild(wrapButton);\r\n\t\t\toptions.push({\r\n\t\t\t\ticon: \"crop_free\",\r\n\t\t\t\tname: \"Add a Widget around this Widget\",\r\n\t\t\t\tfunc: () => this.selectWrappableWidgetType(widget, parentWidget, parentKey)\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (isArray) {\r\n\t\t\tif (idx > 0) {\r\n\t\t\t\tconst upButton = document.createElement(\"span\");\r\n\t\t\t\tupButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\t\t\tupButton.innerHTML = \"arrow_upward\";\r\n\t\t\t\tupButton.title = \"Move this widget upward\";\r\n\t\t\t\tupButton.onclick = () => {\r\n\t\t\t\t\tkeyValue.splice(idx, 1);\r\n\t\t\t\t\tkeyValue.splice(idx - 1, 0, widget);\r\n\t\t\t\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\t\t\t};\r\n\t\t\t\tbuttonHolder.appendChild(upButton);\r\n\t\t\t}\r\n\r\n\t\t\tif (idx < keyValue.length - 1) {\r\n\t\t\t\tconst downButton = document.createElement(\"span\");\r\n\t\t\t\tdownButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\t\t\tdownButton.innerHTML = \"arrow_downward\";\r\n\t\t\t\tdownButton.title = \"Move this widget downward\";\r\n\t\t\t\tdownButton.onclick = () => {\r\n\t\t\t\t\tkeyValue.splice(idx, 1);\r\n\t\t\t\t\tkeyValue.splice(idx + 1, 0, widget);\r\n\t\t\t\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\t\t\t};\r\n\t\t\t\tbuttonHolder.appendChild(downButton);\r\n\t\t\t}\r\n\r\n\t\t\t// const cloneButton = document.createElement(\"span\");\r\n\t\t\t// cloneButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\t\t// cloneButton.innerHTML = \"add_to_photos\";\r\n\t\t\t// cloneButton.title = \"Clone this widget\";\r\n\t\t\t// cloneButton.onclick = () => {\r\n\t\t\t// \tkeyValue.push(widget.clone());\r\n\t\t\t// \tEditor.onNodeUpdated(this.id, this.node);\r\n\t\t\t// }\r\n\t\t\t// buttonHolder.appendChild(cloneButton);\r\n\t\t\toptions.push({\r\n\t\t\t\ticon: \"add_to_photos\",\r\n\t\t\t\tname: \"Clone this widget\",\r\n\t\t\t\tfunc: () => {\r\n\t\t\t\t\tconst widgetClone = widget.clone();\r\n\t\t\t\t\tkeyValue.push(widgetClone);\r\n\t\t\t\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\t\t\t\tEditor.logInfo(`[ScreenPanel] New Widget '\${widgetClone.getType()}' created as '\${parentWidget.getName() || parentWidget.getId()}''s '\${parentKey}'.`, widgetClone, parentWidget, this.node);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (addWidgetKeys.length > 0) {\r\n\t\t\tthis.configDropZones(widget, addWidgetKeys, element);\r\n\t\t\tconst addButton = document.createElement(\"span\");\r\n\t\t\taddButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\t\taddButton.innerHTML = \"add\";\r\n\t\t\taddButton.title = \"Add a new Widget\";\r\n\t\t\taddButton.onclick = () => this.selectAddAction(addWidgetKeys, widget);\r\n\t\t\tbuttonHolder.appendChild(addButton);\r\n\t\t}\r\n\r\n\t\tif (!isRoot) {\r\n\t\t\toptions.push({\r\n\t\t\t\ticon: \"content_copy\",\r\n\t\t\t\tname: \"Copy this Widget\",\r\n\t\t\t\tfunc: () => Editor.clipboardPut(widget)\r\n\t\t\t});\r\n\r\n\t\t\toptions.push({\r\n\t\t\t\ticon: \"delete\",\r\n\t\t\t\tname: \"Remove this Widget\",\r\n\t\t\t\tfunc: () => {\r\n\t\t\t\t\tif (!confirm(\"Remove this Widget?\")) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (isArray) {\r\n\t\t\t\t\t\tkeyValue.splice(idx, 1);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tparentWidget.setWidget(parentKey, null);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\t\t\t\tEditor.logInfo(`[ScreenPanel] Widget '\${widget.getName() || widget.getId()}' removed from '\${parentWidget.getName() || parentWidget.getId()}''s '\${parentKey}'.`, widget, parentWidget, this.node);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst optionsButton = document.createElement(\"span\");\r\n\t\toptionsButton.className = this.id + \"-item-action material-symbols-outlined\";\r\n\t\toptionsButton.innerHTML = \"more_vert\";\r\n\t\toptionsButton.title = \"More options\";\r\n\t\toptionsButton.onclick = () => showModalList(null, options, (option) => option.func());\r\n\t\tbuttonHolder.appendChild(optionsButton);\r\n\t}\r\n\r\n\tbuildDropSeparator(widget, key, type, idx) {\r\n\t\tconst rootType = type.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\tconst separator = document.createElement(\"div\");\r\n\t\tseparator.appendChild(document.createElement(\"div\"));\r\n\t\tseparator.classList.add(`\${this.id}-drop-separator`);\r\n\t\tseparator.classList.add(`\${this.id}-drop-separator-\${rootType}`);\r\n\t\tseparator.ondragenter = () => separator.classList.add(`\${this.id}-drop-separator-over`);\r\n\t\tseparator.ondragleave = () => separator.classList.remove(`\${this.id}-drop-separator-over`);\r\n\t\tseparator.ondragover = (ev) => {\r\n\t\t\tev.preventDefault();\r\n\t\t\tev.dataTransfer.dropEffect = \"copy\";\r\n\t\t}\r\n\t\tseparator.ondrop = (ev) => {\r\n\t\t\tconst draggedType = ev.dataTransfer.getData(\"text\");\r\n\t\t\tthis.createWidget({ type: draggedType }, widget, { key, type, idx });\r\n\t\t};\r\n\t\treturn separator;\r\n\t}\r\n\r\n\tconfigDropZones(widget, dropZones, element) {\r\n\t\tif (!dropZones || dropZones.length === 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\telement.ondragenter = () => element.classList.add(`\${this.id}-item-drop-over`);\r\n\t\telement.ondragleave = (e) => {\r\n\t\t\tif (!childOf(e.fromElement, element)) {\r\n\t\t\t\telement.classList.remove(`\${this.id}-item-drop-over`);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst dropZoneHolderMap = {};\r\n\t\tconst createZone = (zone) => {\r\n\t\t\tconst rootType = zone.type.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\t\tif (!dropZoneHolderMap[rootType]) {\r\n\t\t\t\tconst dropZoneHolder = document.createElement(\"column\");\r\n\t\t\t\tdropZoneHolder.classList.add(`\${this.id}-drop-zones`);\r\n\t\t\t\tdropZoneHolder.classList.add(`\${this.id}-drop-zones-\${rootType}`);\r\n\t\t\t\telement.appendChild(dropZoneHolder);\r\n\t\t\t\tdropZoneHolderMap[rootType] = dropZoneHolder;\r\n\t\t\t}\r\n\r\n\t\t\tconst dropZone = document.createElement(\"span\");\r\n\t\t\tdropZone.classList.add(`\${this.id}-drop-zone`);\r\n\t\t\tdropZone.classList.add(`\${this.id}-drop-zone-\${rootType}`);\r\n\t\t\tdropZone.innerText = zone.key;\r\n\t\t\tdropZone.ondragenter = () => dropZone.classList.add(`\${this.id}-drop-zone-over`);\r\n\t\t\tdropZone.ondragleave = () => dropZone.classList.remove(`\${this.id}-drop-zone-over`);\r\n\t\t\tdropZone.ondragover = (ev) => {\r\n\t\t\t\tev.preventDefault();\r\n\t\t\t\tev.dataTransfer.dropEffect = \"copy\";\r\n\t\t\t}\r\n\t\t\tdropZone.ondrop = (ev) => {\r\n\t\t\t\tconst draggedType = ev.dataTransfer.getData(\"text\");\r\n\t\t\t\tthis.createWidget({ type: draggedType }, widget, zone);\r\n\t\t\t};\r\n\t\t\tdropZoneHolderMap[rootType].appendChild(dropZone);\r\n\t\t};\r\n\r\n\t\tfor (let entry of dropZones) {\r\n\t\t\tif (entry.hasValue) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet rootType = entry.type.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\t\telement.classList.add(`\${this.id}-item-\${rootType}`);\r\n\r\n\t\t\tlet styleKey = `.widget-drag-\${rootType}`;\r\n\t\t\tif (!this.injectedStyles[styleKey]) {\r\n\t\t\t\t// Style widget\r\n\t\t\t\tlet style = document.createElement(\"style\");\r\n\t\t\t\tstyle.setAttribute(\"type\", \"text/css\");\r\n\t\t\t\tstyle.innerHTML = `\${styleKey} .\${this.id}-item-\${rootType} {\r\n\t\t\t\t\tborder: 1px dashed;\r\n\t\t\t\t\tborder-radius: 4px;\r\n\t\t\t\t}`;\r\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n\t\t\t\t// Style widget drop zones\r\n\t\t\t\tstyle = document.createElement(\"style\");\r\n\t\t\t\tstyle.setAttribute(\"type\", \"text/css\");\r\n\t\t\t\tstyle.innerHTML = `\${styleKey} .\${this.id}-item-\${rootType}.\${this.id}-item-drop-over > .\${this.id}-drop-zones-\${rootType} {\r\n\t\t\t\t\theight: auto;\r\n\t\t\t\t}`;\r\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n\t\t\t\t// Style children holder\r\n\t\t\t\tstyle = document.createElement(\"style\");\r\n\t\t\t\tstyle.setAttribute(\"type\", \"text/css\");\r\n\t\t\t\tstyle.innerHTML = `\${styleKey} .\${this.id}-item-children-\${rootType} {\r\n\t\t\t\t\tborder: 1px dashed;\r\n\t\t\t\t\tborder-radius: 4px;\r\n\t\t\t\t}`;\r\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n\t\t\t\t// Style children holder's drop separators\r\n\t\t\t\tstyle = document.createElement(\"style\");\r\n\t\t\t\tstyle.setAttribute(\"type\", \"text/css\");\r\n\t\t\t\tstyle.innerHTML = `\${styleKey} .\${this.id}-item-children-\${rootType}.\${this.id}-item-children-drop-over > .\${this.id}-drop-separator-\${rootType} {\r\n\t\t\t\t\t--border-width: 1px;\r\n\t\t\t\t\tpadding: 5px 10px;\r\n\t\t\t\t}`;\r\n\t\t\t\tdocument.getElementsByTagName(\"head\")[0].appendChild(style);\r\n\r\n\t\t\t\tthis.injectedStyles[styleKey] = true;\r\n\t\t\t}\r\n\r\n\t\t\tcreateZone(entry);\r\n\t\t}\r\n\t}\r\n\r\n\tselectAddAction(options, parentWidget) {\r\n\t\tif (options.length > 1) {\r\n\t\t\tshowModalList(null, options.map(o => o.key), (selectedKey) => {\r\n\t\t\t\tthis.selectWidgetType(parentWidget, options.find((o) => o.key === selectedKey));\r\n\t\t\t}, \"Select a Widget placing\");\r\n\t\t} else {\r\n\t\t\tthis.selectWidgetType(parentWidget, options[0]);\r\n\t\t}\r\n\t}\r\n\r\n\tselectWidgetType(parentWidget, option) {\r\n\t\tconst types = [];\r\n\t\tconst widgetTypes = this.solutionSchema.getWidgetsOfType(option.type);\r\n\r\n\t\tconst clipboardObj = Editor.clipboardGet();\r\n\t\tif (clipboardObj && clipboardObj instanceof Widget && clipboardObj.isOfType(option.type)) {\r\n\t\t\ttypes.push({ type: \"_clipboard\", name: \"(copied) \" + clipboardObj.getType() });\r\n\t\t}\r\n\r\n\t\tfor (let type of widgetTypes) {\r\n\t\t\ttypes.push({ type: type, name: type });\r\n\r\n\t\t\tlet components = Editor.project.findComponents(this.solutionId, type);\r\n\t\t\tif (components) {\r\n\t\t\t\tfor (let component of components) {\r\n\t\t\t\t\ttypes.push({ type: type, name: \"&emsp;Link to \" + component.getName(), component: component.getId() });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet templates = Editor.project.findTemplates(this.solutionId, type);\r\n\t\t\tif (templates) {\r\n\t\t\t\tfor (let template of templates) {\r\n\t\t\t\t\ttypes.push({ type: type, name: \"&emsp;\" + template.getName(), template: template.getId() });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tshowModalList(null, types, (selectedType) => {\r\n\t\t\tthis.createWidget(selectedType, parentWidget, option);\r\n\t\t}, \"Select a Widget type\");\r\n\t}\r\n\r\n\tcreateWidget(selectedType, parentWidget, option) {\r\n\t\tconst key = option.key;\r\n\t\tconst type = option.type;\r\n\t\tlet newWidget; \r\n\t\tif (selectedType.component) {\r\n\t\t\tnewWidget = Widget.create(parentWidget.getSolutionId(), \"WidgetComponent\");\r\n\t\t\tnewWidget.setProperty(\"component\", selectedType.component);\r\n\t\t} else {\r\n\t\t\tnewWidget = selectedType.type === \"_clipboard\"\r\n\t\t\t\t? Editor.clipboardGet().clone()\r\n\t\t\t\t: Widget.create(parentWidget.getSolutionId(), selectedType.type);\r\n\r\n\t\t\tif (selectedType.template) {\r\n\t\t\t\tnewWidget.setTemplate(selectedType.template);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (type.startsWith(\"[\")) {\r\n\t\t\tif (!parentWidget.getWidget(key)) {\r\n\t\t\t\tparentWidget.setWidget(key, []);\r\n\t\t\t}\r\n\t\t\tconst list = parentWidget.getWidget(key);\r\n\t\t\tif (option.idx !== null && option.idx !== undefined) {\r\n\t\t\t\tlist.splice(option.idx, 0, newWidget);\r\n\t\t\t} else {\r\n\t\t\t\tlist.push(newWidget);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tparentWidget.setWidget(key, newWidget);\r\n\t\t}\r\n\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\tEditor.logInfo(`[ScreenPanel] New Widget '\${newWidget.getType()}' created as '\${parentWidget.getName() || parentWidget.getId()}''s '\${key}'.`, newWidget, parentWidget, this.node);\r\n\t}\r\n\r\n\tselectWrappableWidgetType(widget, parentWidget, key) {\r\n\t\tconst types = this.solutionSchema.getWidgetsWithProperties(\"Widget\", [\"child\", \"children\"], \"Widget\");\r\n\t\tshowModalList(null, types, (selectedType) => {\r\n\t\t\tthis.wrapWidget(widget, parentWidget, key, selectedType);\r\n\t\t});\r\n\t}\r\n\r\n\twrapWidget(widget, parentWidget, key, widgetType) {\r\n\t\tconst newWidget = Widget.create(widget.getSolutionId(), widgetType);\r\n\t\tconst keyValue = parentWidget.getWidget(key);\r\n\r\n\t\tif (Array.isArray(keyValue)) {\r\n\t\t\tconst idx = keyValue.indexOf(widget);\r\n\t\t\tkeyValue.splice(idx, 1, newWidget);\r\n\t\t} else {\r\n\t\t\tparentWidget.setWidget(key, newWidget);\r\n\t\t}\r\n\r\n\t\tconst typeSchema = newWidget.getWidgetSchema();\r\n\t\tif (typeSchema.hasOwnProperty(\"child\")) {\r\n\t\t\tnewWidget.setWidget(\"child\", widget);\r\n\t\t} else if (typeSchema.hasOwnProperty(\"children\")) {\r\n\t\t\tnewWidget.setWidget(\"children\", [widget]);\r\n\t\t}\r\n\r\n\t\tEditor.onNodeUpdated(this.id, this.node);\r\n\t\tEditor.logInfo(`[ScreenPanel] New Widget '\${newWidget.getType()}' created as '\${parentWidget.getName() || parentWidget.getId()}''s '\${key}'.`, newWidget, parentWidget, this.node);\r\n\t}\r\n\r\n\tframeFull() {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"width\", \"100%\");\r\n\t\tframe.setAttribute(\"height\", \"100%\");\r\n\t}\r\n\r\n\tframePhone() {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"width\", \"400px\");\r\n\t\tframe.setAttribute(\"height\", \"800px\");\r\n\t}\r\n\r\n\tframeTablet() {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"width\", \"800px\");\r\n\t\tframe.setAttribute(\"height\", \"600px\");\r\n\t}\r\n\r\n\tframeWidth(v) {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"width\", v + \"px\");\r\n\t}\r\n\r\n\tframeHeight(v) {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"height\", v + \"px\");\r\n\t}\r\n\r\n\tasync frameReload() {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.setAttribute(\"src\", \"\");\r\n\t\tawait fetch(\"rebuild\", { method: \"GET\", });\r\n\t\tthis.rebuildFrame();\r\n\t}\r\n\r\n\trebuildFrame() {\r\n\t\tconst frame = document.getElementById(\"flutter-panel-frame\");\r\n\t\tframe.src = \"/index.html?ts=\" + Date.now().toString();\r\n\t\tframe.contentWindow.location.href = frame.src;\r\n\t\t// frame.setAttribute(\"src\", \"/index.html?ts=\" + Date.now().toString());\r\n\t\tframe.setAttribute(\"name\", Date.now().toString());\r\n\t}\r\n}\r\n\nclass NavigationPanel extends EditorPanel {\r\n    constructor() {\r\n        super();\r\n        this.id = \"navigation-panel\";\r\n        this.rootNode = null;\r\n        this.gridHandler = null;\r\n        this.screenToElement = {};\r\n        this.screenToSvgPath = {};\r\n        this.widgetToSvgPath = {};\r\n        this.gridSize = 300;\r\n        this.router;\r\n    }\r\n\r\n    populate() {\r\n        this.clearGrid();\r\n        this.rootNode = null;\r\n        document.getElementById(this.id).onVisible = () => this.rebuild();\r\n    }\r\n\r\n    selectNode(node) {\r\n        if (node instanceof Widget) {\r\n            this.selectSvg(this.widgetToSvgPath[node.getId()]);\r\n        }\r\n\r\n        if (!(node instanceof Screen)) {\r\n            return;\r\n        }\r\n\r\n        if (this.screenToElement[node.getId()]) {\r\n            // selected screen exists in the grid\r\n            this.rootNode = node;\r\n            for (let screenId of Object.keys(this.screenToElement)) {\r\n                let element = this.screenToElement[screenId];\r\n                element.classList.remove(this.id + \"-screenHolder-selected\");\r\n                if (screenId === node.getId()) {\r\n                    element.classList.add(this.id + \"-screenHolder-selected\");\r\n                }\r\n            }\r\n\r\n            for (let screenId of Object.keys(this.screenToSvgPath)) {\r\n                var list = this.screenToSvgPath[screenId];\r\n                for (let path of list) {\r\n                    path.classList.remove(this.id + \"-grid-svg-selected\");\r\n                    if (screenId === node.getId()) {\r\n                        path.classList.add(this.id + \"-grid-svg-selected\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        this.rootNode = node;\r\n        this.rebuild();\r\n    }\r\n\r\n    rebuild() {\r\n        this.clearGrid();\r\n        if (this.rootNode) {\r\n            this.buildScreen(this.rootNode, null, null);\r\n        }\r\n    }\r\n\r\n    onNodeUpdated(origin, node, rootNode) {\r\n        // TODO: make sure all events have a rootNode, otherwise it wont be possible to know if a rebuild is needed\r\n        if (this.rootNode && rootNode instanceof Screen && this.screenToElement[rootNode.getId()]) {\r\n            this.rebuild();\r\n        }\r\n    }\r\n\r\n    onNodeDeleted(origin, node, rootNode) {\r\n        this.onNodeUpdated(origin, node, rootNode);\r\n    }\r\n\r\n    buildScreen(screen, parentScreen, actionType) {\r\n        if (!screen || this.screenToElement[screen.getId()]) {\r\n            // Screen already exists\r\n            return;\r\n        }\r\n\r\n        const screenHolder = document.createElement(\"div\");\r\n        screenHolder.className = this.id + \"-screenHolder\";\r\n        screenHolder.classList.add(this.id + \"-screenHolder-\" + (actionType ?? \"KActionNavigate\"));\r\n        if (screen.getId() === this.rootNode.getId()) {\r\n            screenHolder.classList.add(this.id + \"-screenHolder-selected\");\r\n        }\r\n        screenHolder.onclick = () => Editor.selectNode(screen);\r\n\r\n        this.appendToGrid(screenHolder, screen, parentScreen);\r\n        this.screenToElement[screen.getId()] = screenHolder;\r\n\r\n        const screenName = document.createElement(\"div\");\r\n        screenName.className = this.id + \"-screenName\";\r\n        screenName.innerHTML = screen.getName() ?? screen.getId();\r\n        screenHolder.appendChild(screenName);\r\n\r\n        const childHolder = document.createElement(\"div\");\r\n        childHolder.className = this.id + \"-childHolder\";\r\n        screenHolder.appendChild(childHolder);\r\n\r\n        const typeDecoration = document.createElement(\"div\");\r\n        typeDecoration.className = this.id + \"-decoration\";\r\n        screenHolder.appendChild(typeDecoration);\r\n\r\n        this.buildWidget(screen, screen.getBody(), childHolder);\r\n    }\r\n\r\n    buildWidget(screen, widget, element) {\r\n        if (!widget) {\r\n            return;\r\n        }\r\n\r\n        const actions = widget.getActions();\r\n        for (let key of Object.keys(actions)) {\r\n            this.handleAction(screen, widget, key, actions[key], element);\r\n        }\r\n\r\n        const widgets = widget.getWidgets();\r\n        for (let key of Object.keys(widgets)) {\r\n            let value = widgets[key];\r\n            if (value instanceof Widget) {\r\n                this.buildWidget(screen, value, element);\r\n            } else if (Array.isArray(value)) {\r\n                for (let child of value) {\r\n                    this.buildWidget(screen, child, element);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    handleAction(screen, widget, widgetKey, action, element) {\r\n        if (!action || !action.getType) {\r\n            return;\r\n        }\r\n\r\n        let screenId = action.getProperty(\"jumpToScreen\");\r\n        if (screenId) {\r\n            let linkedScreen = Editor.project.getScreen(screenId);\r\n            if (linkedScreen) {\r\n                let widgetElement = this.buildWidgetAction(widget, widgetKey, element);\r\n                this.buildScreen(linkedScreen, screen, action.getType());\r\n                let svg = this.linkScreens(widgetElement, screen, linkedScreen);\r\n                this.widgetToSvgPath[widget.getId()] = svg;\r\n            }\r\n        } else {\r\n            const actions = action.getActions();\r\n            for (let key of Object.keys(actions)) {\r\n                this.handleAction(screen, widget, widgetKey, actions[key], element);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildWidgetAction(widget, actionKey, element) {\r\n        const name = document.createElement(\"div\");\r\n        name.className = this.id + \"-widget-name\";\r\n        name.innerHTML = widget.getName() ?? widget.getType();\r\n\r\n        const event = document.createElement(\"div\");\r\n        event.className = this.id + \"-widget-event\";\r\n        event.innerHTML = actionKey;\r\n\r\n        const holder = document.createElement(\"div\");\r\n        holder.className = this.id + \"-widget-holder\";\r\n        holder.onclick = (e) => {\r\n            window.setTimeout(() => Editor.selectNode(widget));\r\n            // Editor.selectNode(widget);\r\n            // e.stopPropagation();\r\n        };\r\n        holder.appendChild(name);\r\n        holder.appendChild(event);\r\n        element.appendChild(holder);\r\n        return holder;\r\n    }\r\n\r\n    appendToGrid(screenHolder, screen, parentScreen) {\r\n        const pos = this.gridHandler.getNextPosition(screen, parentScreen);\r\n        screenHolder.style.left = (pos.x * this.gridSize) + \"px\";\r\n        screenHolder.style.top = (pos.y * this.gridSize) + \"px\";\r\n        this.gridHandler.holder.appendChild(screenHolder);\r\n    }\r\n\r\n    linkScreens(widgetElement, fromScreen, toScreen) {\r\n        const elementWidth = 136;\r\n        const elementHeight = 240;\r\n        const widgetHeight = widgetElement.offsetHeight;\r\n        const fromPos = this.gridHandler.getNodePosition(fromScreen);\r\n        const toPos = this.gridHandler.getNodePosition(toScreen);\r\n\r\n        let fromX = fromPos.x <= toPos.x ? 0 : (fromPos.x - toPos.x) * this.gridSize;\r\n        let fromY = (fromPos.y <= toPos.y ? 0 : (fromPos.y - toPos.y) * this.gridSize) + widgetElement.offsetTop;\r\n        let toX = toPos.x <= fromPos.x ? 0 : (toPos.x - fromPos.x) * this.gridSize;\r\n        let toY = toPos.y <= fromPos.y ? 0 : (toPos.y - fromPos.y) * this.gridSize;\r\n\r\n        const startAttributes = {\r\n            code: fromScreen.getId(),\r\n            left: fromX,\r\n            right: fromX + elementWidth,\r\n            top: fromY,\r\n            bottom: fromY + widgetHeight,\r\n            xIndex: fromPos.x,\r\n            yIndex: fromPos.y\r\n        };\r\n        const finishAttributes = {\r\n            code: toScreen.getId(),\r\n            left: toX,\r\n            right: toX + elementWidth,\r\n            top: toY,\r\n            bottom: toY + elementHeight,\r\n            xIndex: toPos.x,\r\n            yIndex: toPos.y\r\n        };\r\n        const pathString = this.router.getRoute(startAttributes, finishAttributes);\r\n\r\n        const width = Math.max(fromX, toX) - Math.min(fromX, toX) + elementWidth;\r\n        const height = Math.max(fromY, toY) - Math.min(fromY, toY) + elementHeight;\r\n        const extraMargin = 40;\r\n\r\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        svg.classList.add(this.id + \"-grid-svg\");\r\n        if (fromScreen.getId() === this.rootNode.getId()) {\r\n            svg.classList.add(this.id + \"-grid-svg-selected\");\r\n        }\r\n        svg.setAttribute(\"width\", (width + extraMargin) + \"px\");\r\n        svg.setAttribute(\"height\", (height + extraMargin) + \"px\");\r\n        svg.style.left = (Math.min(fromPos.x, toPos.x) * this.gridSize) + \"px\";\r\n        svg.style.top = (Math.min(fromPos.y, toPos.y) * this.gridSize) + \"px\";\r\n        svg.style.position = \"absolute\";\r\n\r\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        path.classList.add(this.id + \"-grid-line\");\r\n        path.setAttribute(\"d\", pathString);\r\n        path.onclick = (e) => {\r\n            this.selectSvg(svg);\r\n            e.stopPropagation();\r\n        };\r\n        svg.appendChild(path);\r\n\r\n        if (!this.screenToSvgPath[fromScreen.getId()]) {\r\n            this.screenToSvgPath[fromScreen.getId()] = [];\r\n        }\r\n        this.screenToSvgPath[fromScreen.getId()].push(svg);\r\n\r\n        this.gridHandler.holder.appendChild(svg);\r\n        return svg;\r\n    }\r\n\r\n    clearGrid() {\r\n        this.router = new Routing();\r\n        this.screenToElement = {};\r\n        this.screenToSvgPath = {};\r\n        this.widgetToSvgPath = {};\r\n        const gridHolder = document.getElementById(this.id + \"-grid\");\r\n        gridHolder.innerHTML = \"\";\r\n        this.gridHandler = new Grid(gridHolder);\r\n    }\r\n\r\n    selectSvg(selectedSvg) {\r\n        for (let screenId of Object.keys(this.screenToSvgPath)) {\r\n            var list = this.screenToSvgPath[screenId];\r\n            for (let svg of list) {\r\n                svg.classList.remove(this.id + \"-grid-svg-selected\");\r\n            }\r\n        }\r\n        if (selectedSvg) {\r\n            selectedSvg.classList.add(this.id + \"-grid-svg-selected\");\r\n        }\r\n    }\r\n}\r\n\nclass FlowPanel extends EditorPanel {\r\n    constructor() {\r\n        super();\r\n        this.id = \"flow-panel\";\r\n        this.rootNode = null;\r\n        this.solutionId = null;\r\n        this.widgetToElement = {};\r\n        this.actionToElement = {};\r\n        this.actionToSvgPath = {};\r\n        this.gridSize = 200;\r\n        this.router;\r\n    }\r\n\r\n    populate() {\r\n        this.clearGrid();\r\n        this.rootNode = null;\r\n        this.solutionId = null;\r\n        this.solutionSchema = null;\r\n        document.getElementById(this.id).onVisible = () => this.rebuild();\r\n    }\r\n\r\n    selectNode(node) {\r\n        this.updateSelectedNode(node);\r\n        if (node instanceof Screen) {\r\n            this.clearGrid();\r\n            this.rootNode = node;\r\n            this.solutionId = node.getSolutionId();\r\n            this.solutionSchema = Editor.project.getSchema(this.solutionId);\r\n            this.buildScreen(this.rootNode);\r\n        } else if (node instanceof Component) {\r\n            this.clearGrid();\r\n            this.rootNode = node;\r\n            this.solutionId = node.getSolutionId();\r\n            this.solutionSchema = Editor.project.getSchema(this.solutionId);\r\n            this.buildComponent(this.rootNode);\r\n        } else if (node instanceof Widget) {\r\n            const element = this.widgetToElement[node.getId()];\r\n            if (element) {\r\n                element.scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\r\n                // element.scrollIntoViewIfNeeded();\r\n            }\r\n        }\r\n    }\r\n\r\n    rebuild() {\r\n        const rootElement = document.getElementById(this.id);\r\n        const scrollTop = rootElement.parentElement.scrollTop;\r\n        this.clearGrid();\r\n        if (this.rootNode instanceof Screen) {\r\n            this.buildScreen(this.rootNode);\r\n        } else if (this.rootNode instanceof Component) {\r\n            this.buildComponent(this.rootNode);\r\n        }\r\n        this.selectNode(Editor.selectedNode);\r\n        rootElement.parentElement.scrollTop = scrollTop;\r\n    }\r\n\r\n    onNodeUpdated(origin, node, rootNode) {\r\n        this.rebuild();\r\n    }\r\n\r\n    onNodeDeleted(origin, node, rootNode) {\r\n        this.onNodeUpdated(origin, node, rootNode);\r\n    }\r\n\r\n    buildScreen(screen) {\r\n        this.buildRootActions(screen);\r\n        this.buildWidget(screen.getBody());\r\n    }\r\n\r\n    buildComponent(component) {\r\n        this.buildWidget(component);\r\n    }\r\n\r\n    buildWidget(widget) {\r\n        if (!widget) {\r\n            return;\r\n        }\r\n        this.buildRootActions(widget);\r\n        const widgets = widget.getWidgets();\r\n        for (let key of Object.keys(widgets)) {\r\n            let value = widgets[key];\r\n            if (value instanceof Widget) {\r\n                this.buildWidget(value);\r\n            } else if (Array.isArray(value)) {\r\n                for (let child of value) {\r\n                    this.buildWidget(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    buildRootActions(node) {\r\n        const gridHolder = document.getElementById(this.id + \"-grid-holder\");\r\n        const actions = node.getActionSchema();\r\n        if (!actions || Object.keys(actions).length === 0) {\r\n            return;\r\n        }\r\n\r\n        if (!(node instanceof Screen)) {\r\n            const nodeInfoHolder = document.createElement(\"div\");\r\n            nodeInfoHolder.classList.add(this.id + \"-nodeInfo\");\r\n            nodeInfoHolder.innerHTML = node.getName() ?? node.getType();\r\n            nodeInfoHolder.onclick = () => Editor.selectNode(node);\r\n            gridHolder.appendChild(nodeInfoHolder);\r\n            this.widgetToElement[node.getId()] = nodeInfoHolder;\r\n        }\r\n\r\n        for (let key of Object.keys(actions)) {\r\n            let actionHolder = document.createElement(\"div\");\r\n            actionHolder.classList.add(this.id + \"-rootAction-holder\");\r\n            gridHolder.appendChild(actionHolder);\r\n\r\n            let actionName = document.createElement(\"div\");\r\n            actionName.classList.add(this.id + \"-rootAction-name\");\r\n            actionName.innerHTML = key;\r\n            actionHolder.appendChild(actionName);\r\n\r\n            let action = node.actions[key];\r\n            if (action instanceof Action) {\r\n                let actionGrid = document.createElement(\"div\");\r\n                actionGrid.classList.add(this.id + \"-action-grid\");\r\n                let actionGridHolder = document.createElement(\"div\");\r\n                actionGridHolder.classList.add(this.id + \"-action-gridHolder\");\r\n                actionGridHolder.appendChild(actionGrid);\r\n                actionHolder.appendChild(actionGridHolder);\r\n\r\n                this.buildAction(new Grid(actionGrid), action, node);\r\n            } else {\r\n                let addAction = document.createElement(\"div\");\r\n                addAction.classList.add(this.id + \"-rootAction-add\");\r\n                addAction.classList.add(\"material-symbols-outlined\");\r\n                addAction.innerHTML = \"add_circle\";\r\n                addAction.onclick = () => {\r\n                    this.selectActionType(node, key);\r\n                };\r\n                actionName.appendChild(addAction);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildAction(grid, action, parentNode) {\r\n        const actionHolder = document.createElement(\"div\");\r\n        actionHolder.classList.add(this.id + \"-action-holder\");\r\n        actionHolder.onclick = () => Editor.selectNode(action);\r\n        this.appendToGrid(grid, actionHolder, action, parentNode instanceof Action ? parentNode : null);\r\n        this.actionToElement[action.getId()] = actionHolder;\r\n\r\n        let actionName \r\n        if (action.getType() === \"KActionRequest\" || action.getType() === \"KListActionRequest\") {\r\n            const requestData = action.getProperty(\"request\");\r\n            if (requestData) {\r\n                const request = Editor.project.getRequest(requestData[\"_type\"]);\r\n                actionName = request?.getName();;\r\n            }\r\n        }\r\n        actionName ??= action.getType().replace(\"KAction\", \"\").replace(\"KListAction\", \"\");\r\n\r\n        const typeName = document.createElement(\"div\");\r\n        typeName.classList.add(this.id + \"-actionName\");\r\n        typeName.innerHTML = actionName;\r\n        actionHolder.appendChild(typeName);\r\n\r\n        const actionActionsHolder = document.createElement(\"div\");\r\n        actionActionsHolder.classList.add(this.id + \"-action-actions-holder\");\r\n        actionHolder.appendChild(actionActionsHolder);\r\n\r\n        const nextActionsKeys = [];\r\n        const nextActions = action.getActionSchema();\r\n        for (let key of Object.keys(nextActions)) {\r\n            let nextAction = action.actions[key];\r\n            if (nextAction instanceof Action) {\r\n                let propertyElement = document.createElement(\"div\");\r\n                propertyElement.classList.add(this.id + \"-action-property\");\r\n                propertyElement.innerHTML = key;\r\n                actionHolder.appendChild(propertyElement);\r\n\r\n                this.buildAction(grid, nextAction, action);\r\n                let svg = this.linkActions(grid, propertyElement, action, nextAction);\r\n                propertyElement.onclick = () => window.setTimeout(() => this.selectSvg(svg));\r\n            } else {\r\n                nextActionsKeys.push(key);\r\n            }\r\n        }\r\n\r\n        if (nextActionsKeys.length > 0) {\r\n            const addActionElement = document.createElement(\"div\");\r\n            addActionElement.classList.add(\"material-symbols-outlined\");\r\n            addActionElement.classList.add(this.id + \"-action-actions-item\");\r\n            addActionElement.innerHTML = \"add\";\r\n            addActionElement.onclick = (e) => {\r\n                this.addAction(action, nextActionsKeys);\r\n                e.stopPropagation();\r\n            };\r\n            actionActionsHolder.appendChild(addActionElement);\r\n        }\r\n\r\n        const deleteActionElement = document.createElement(\"div\");\r\n        deleteActionElement.classList.add(\"material-symbols-outlined\");\r\n        deleteActionElement.classList.add(this.id + \"-action-actions-item\");\r\n        deleteActionElement.innerHTML = \"delete\";\r\n        deleteActionElement.onclick = (e) => {\r\n            const node = parentNode ?? this.rootNode;\r\n            for (let key of Object.keys(node.actions)) {\r\n                if (node.actions[key] === action) {\r\n                    delete node.actions[key];\r\n                    Editor.onNodeUpdated(this.id, this.rootNode);\r\n                    Editor.logInfo(`[FlowPanel] Action '\${action.getType()}' removed from '\${parentNode.getName() || parentNode.getType()}'.`, action, parentNode, this.rootNode);\r\n                }\r\n            }\r\n            e.stopPropagation();\r\n        };\r\n        actionActionsHolder.appendChild(deleteActionElement);\r\n    }\r\n\r\n    appendToGrid(grid, actionHolder, action, parentNode) {\r\n        const pos = grid.getNextPosition(action, parentNode);\r\n        actionHolder.style.left = (pos.x * this.gridSize) + \"px\";\r\n        actionHolder.style.top = (pos.y * this.gridSize) + \"px\";\r\n        grid.holder.appendChild(actionHolder);\r\n\r\n        // Update grid height\r\n        grid.holder.style.height = (pos.y * this.gridSize + actionHolder.offsetHeight) + \"px\";\r\n    }\r\n\r\n    linkActions(grid, actionElement, fromAction, toAction) {\r\n        const elementWidth = 106;\r\n        const elementHeight = 106;\r\n        const widgetHeight = actionElement.offsetHeight;\r\n        const fromPos = grid.getNodePosition(fromAction);\r\n        const toPos = grid.getNodePosition(toAction);\r\n\r\n        let fromX = fromPos.x <= toPos.x ? 0 : (fromPos.x - toPos.x) * this.gridSize;\r\n        let fromY = (fromPos.y <= toPos.y ? 0 : (fromPos.y - toPos.y) * this.gridSize) + actionElement.offsetTop;\r\n        let toX = toPos.x <= fromPos.x ? 0 : (toPos.x - fromPos.x) * this.gridSize;\r\n        let toY = toPos.y <= fromPos.y ? 0 : (toPos.y - fromPos.y) * this.gridSize;\r\n\r\n        const startAttributes = {\r\n            code: fromAction.getId(),\r\n            left: fromX,\r\n            right: fromX + elementWidth,\r\n            top: fromY,\r\n            bottom: fromY + widgetHeight,\r\n            xIndex: fromPos.x,\r\n            yIndex: fromPos.y\r\n        };\r\n        const finishAttributes = {\r\n            code: toAction.getId(),\r\n            left: toX,\r\n            right: toX + elementWidth,\r\n            top: toY,\r\n            bottom: toY + elementHeight,\r\n            xIndex: toPos.x,\r\n            yIndex: toPos.y\r\n        };\r\n        const pathString = this.router.getRoute(startAttributes, finishAttributes);\r\n\r\n        const width = Math.max(fromX, toX) - Math.min(fromX, toX) + elementWidth;\r\n        const height = Math.max(fromY, toY) - Math.min(fromY, toY) + elementHeight;\r\n        const extraMargin = 40;\r\n\r\n        const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\r\n        svg.classList.add(this.id + \"-action-grid-svg\");\r\n        if (fromAction.getId() === this.rootNode.getId()) {\r\n            svg.classList.add(this.id + \"-action-grid-svg-selected\");\r\n        }\r\n        svg.setAttribute(\"width\", (width + extraMargin) + \"px\");\r\n        svg.setAttribute(\"height\", (height + extraMargin) + \"px\");\r\n        svg.style.left = (Math.min(fromPos.x, toPos.x) * this.gridSize) + \"px\";\r\n        svg.style.top = (Math.min(fromPos.y, toPos.y) * this.gridSize) + \"px\";\r\n        svg.style.position = \"absolute\";\r\n\r\n        const path = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\r\n        path.classList.add(this.id + \"-action-grid-line\");\r\n        path.setAttribute(\"d\", pathString);\r\n        // path.onclick = (e) => {\r\n        //     this.selectSvg(svg);\r\n        //     e.stopPropagation();\r\n        // };\r\n        svg.appendChild(path);\r\n\r\n        if (!this.actionToSvgPath[fromAction.getId()]) {\r\n            this.actionToSvgPath[fromAction.getId()] = [];\r\n        }\r\n        this.actionToSvgPath[fromAction.getId()].push(svg);\r\n\r\n        grid.holder.appendChild(svg);\r\n        return svg;\r\n    }\r\n\r\n    addAction(action, options) {\r\n        if (options.length > 1) {\r\n            showModalList(null, options, (selectedKey) => {\r\n                this.selectActionType(action, selectedKey);\r\n            });\r\n        } else {\r\n            this.selectActionType(action, options[0]);\r\n        }\r\n    }\r\n\r\n    selectActionType(node, key) {\r\n        const baseType = node.getActionSchema()[key];\r\n        const actionTypes = this.solutionSchema.getActionTypes(baseType);\r\n        const types = [];\r\n        for (let type of actionTypes) {\r\n            types.push({ \"type\": type, \"name\": type.replace(\"KAction\", \"\").replace(\"KListAction\", \"\") });\r\n        }\r\n\r\n        showModalList(null, types, (option) => {\r\n            const newAction = new Action(this.rootNode.getSolutionId(), { \"_type\": option.type });\r\n            node.actions[key] = newAction;\r\n            Editor.onNodeUpdated(this.id, this.rootNode);\r\n            Editor.logInfo(`[FlowPanel] Action '\${option.type}' created and linked to '\${node.getName() || node.getType()}'.`, newAction, node, this.rootNode);\r\n        });\r\n    }\r\n\r\n    selectSvg(selectedSvg) {\r\n        for (let actionId of Object.keys(this.actionToSvgPath)) {\r\n            var list = this.actionToSvgPath[actionId];\r\n            for (let svg of list) {\r\n                svg.classList.remove(this.id + \"-action-grid-svg-selected\");\r\n            }\r\n        }\r\n        if (selectedSvg) {\r\n            selectedSvg.classList.add(this.id + \"-action-grid-svg-selected\");\r\n        }\r\n    }\r\n\r\n    updateSelectedNode(node) {\r\n        for (let nodeId of Object.keys(this.widgetToElement)) {\r\n            let element = this.widgetToElement[nodeId];\r\n            element.classList.remove(this.id + \"-nodeInfo-selected\");\r\n            if (nodeId === node.getId()) {\r\n                element.classList.add(this.id + \"-nodeInfo-selected\");\r\n            }\r\n        }\r\n\r\n        for (let actionId of Object.keys(this.actionToElement)) {\r\n            let element = this.actionToElement[actionId];\r\n            element.classList.remove(this.id + \"-actionHolder-selected\");\r\n            if (actionId === node.getId()) {\r\n                element.classList.add(this.id + \"-actionHolder-selected\");\r\n            }\r\n        }\r\n\r\n        for (let actionId of Object.keys(this.actionToSvgPath)) {\r\n            var list = this.actionToSvgPath[actionId];\r\n            for (let path of list) {\r\n                path.classList.remove(this.id + \"-action-grid-svg-selected\");\r\n                if (actionId === node.getId()) {\r\n                    path.classList.add(this.id + \"-action-grid-svg-selected\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clearGrid() {\r\n        this.router = new Routing();\r\n        this.widgetToElement = {};\r\n        this.actionToElement = {};\r\n        this.actionToSvgPath = {};\r\n        document.getElementById(this.id + \"-grid-holder\").innerHTML = \"\";\r\n    }\r\n}\r\n\nclass ConsolePanel extends EditorPanel {\r\n    constructor() {\r\n        super();\r\n        this.id = \"console-panel\";\r\n    }\r\n\r\n    buildPanel() {\r\n        this.logPanel = document.getElementById(this.id + \"-logs\");\r\n        this.logPanel.innerHTML = \"\";\r\n        document.getElementById(this.id).onmouseleave = () => this.logPanel.scrollTo(0, this.logPanel.scrollHeight);\r\n        this._buildToolbar();\r\n    }\r\n\r\n    onLog(logMessage) {\r\n        if (!this.logPanel)\r\n            this.buildPanel();\r\n\r\n        const type = this._getLogType(logMessage.type ?? \"info\");\r\n        const origin = logMessage.origin?.toLowerCase();\r\n\r\n        const logData = this._buildLogData(logMessage);\r\n        logData.classList.add(this.id + \"-level-\" + type);\r\n        logData.classList.add(this.id + \"-origin-\" + origin);\r\n\r\n        const logRow = document.createElement(\"row\");\r\n        logRow.classList.add(this.id + \"-logLine\");\r\n        logRow.classList.add(this.id + \"-level-\" + type);\r\n        logRow.classList.add(this.id + \"-origin-\" + origin);\r\n        logRow.classList.add(this.id + \"-logLine-\" + type);\r\n        logRow.classList.add(this.id + \"-logLine-\" + origin);\r\n        logRow.onclick = () => {\r\n            const selectedRows = this.logPanel.getElementsByClassName(this.id + \"-logLine-selected\");\r\n            for (let row of selectedRows) {\r\n                row.classList.remove(this.id + \"-logLine-selected\");\r\n            }\r\n            logRow.classList.add(this.id + \"-logLine-selected\");\r\n            logData.classList.toggle(\"hidden\");\r\n        };\r\n\r\n        const message = document.createElement(\"span\");\r\n        message.innerText = logMessage.message;\r\n        logRow.append(message);\r\n\r\n        this.logPanel.appendChild(logRow);\r\n        this.logPanel.appendChild(logData);\r\n        \r\n        let children = this.logPanel.getElementsByClassName(this.id + \"-logLine\");\r\n        while (children.length > 200) {\r\n            this.logPanel.children[0].remove();\r\n            this.logPanel.children[0].remove();\r\n            children = this.logPanel.getElementsByClassName(this.id + \"-logLine\");\r\n        }\r\n\r\n        this.logPanel.scrollTo(0, this.logPanel.scrollHeight);\r\n        this._filterLogs(this.searchInput.value);\r\n    }\r\n\r\n    _buildLogData(logMessage) {\r\n        const logData = document.createElement(\"column\");\r\n        logData.classList.add(this.id + \"-logData\");\r\n        logData.classList.add(\"hidden\");\r\n\r\n        if (logMessage.error || logMessage.stackTrace) {\r\n            const logErrorHolder = document.createElement(\"column\");\r\n            logErrorHolder.classList.add(this.id + \"-logData-error\");\r\n            logData.appendChild(logErrorHolder);\r\n            if (logMessage.error) {\r\n                const logError = document.createElement(\"span\");\r\n                logError.innerHTML = logMessage.error;\r\n                logErrorHolder.appendChild(logError);\r\n            }\r\n            if (logMessage.stackTrace) {\r\n                const logStack = document.createElement(\"span\");\r\n                logStack.innerHTML = logMessage.stackTrace.replaceAll(\"\\n\", \"<br>\");\r\n                logErrorHolder.appendChild(logStack);\r\n            }\r\n        }\r\n\r\n        if (logMessage.context) {\r\n            const logContext = document.createElement(\"row\");\r\n            logData.appendChild(logContext);\r\n    \r\n            const keys = Object.keys(logMessage.context);\r\n            for (let key of keys) {\r\n                let entry = this._buildLogObject(key, logMessage.context[key]);\r\n                logContext.appendChild(entry);\r\n            }\r\n        }\r\n        return logData;\r\n    }\r\n\r\n    _buildLogObject(key, val) {\r\n        const holder = document.createElement(\"column\");\r\n        holder.classList.add(this.id + \"-logData-holder\");\r\n        \r\n        const valueRow = document.createElement(\"row\");\r\n        valueRow.classList.add(this.id + \"-logData-value\");\r\n        holder.appendChild(valueRow);\r\n\r\n        const name = document.createElement(\"span\");\r\n        name.classList.add(this.id + \"-logData-name\");\r\n        name.innerHTML = `\${key}:`;\r\n        valueRow.append(name);\r\n        \r\n         if (val !== null && val !== undefined && typeof val === 'object') {\r\n            const type = document.createElement(\"icon\");\r\n            type.classList.add(this.id + \"-logData-type\");\r\n            type.classList.add(\"material-symbols-outlined\");\r\n            valueRow.appendChild(type);\r\n\r\n            const data = document.createElement(\"column\");\r\n            holder.appendChild(data);\r\n\r\n            if (Array.isArray(val)) {\r\n                type.innerHTML = \"data_array\";\r\n                const arr = val.slice(0, Math.min(val.length, 10));\r\n                if (val.length > 10) {\r\n                    arr.push(\"...\");\r\n                }\r\n                for (let i = 0; i < arr.length; i++) {\r\n                    let entryData = this._buildLogObject(i, arr[i]);\r\n                    data.appendChild(entryData);\r\n                }\r\n            } else {\r\n                type.innerHTML = \"data_object\";\r\n                const keys = Object.keys(val);\r\n                for (let key of keys) {\r\n                    let entry = this._buildLogObject(key, val[key]);\r\n                    data.appendChild(entry);\r\n                }\r\n            }\r\n        } else {\r\n            const dataVal = document.createElement(\"span\");\r\n            dataVal.classList.add(this.id + \"-logData-value\");\r\n            dataVal.innerHTML = `\${val}`;\r\n            valueRow.appendChild(dataVal);\r\n        }\r\n\r\n        return holder;\r\n    }\r\n\r\n    _buildToolbar() {\r\n        this._buildToolbarLevels();\r\n        this._buildToolbarFilters();\r\n        this._buildToolbarSearch();\r\n        this._buildToolbarOrigins();\r\n    }\r\n\r\n    _buildToolbarLevels() {\r\n        const buildButton = (level) => {\r\n            const button = document.createElement(\"span\");\r\n            button.classList.add(this.id + \"-toolbar-toggler\");\r\n            button.classList.add(this.id + \"-toolbar-toggler-active\");\r\n            button.classList.add(this.id + \"-toolbar-level-\" + level);\r\n            button.innerHTML = level;\r\n            button.onclick = () => {\r\n                button.classList.toggle(this.id + \"-toolbar-toggler-active\");\r\n                this.logPanel.classList.toggle(this.id + \"-hide-\" + level);\r\n            };\r\n            return button;\r\n        };\r\n\r\n        const levels = [\"info\", \"warn\", \"error\"];\r\n        const row = document.createElement(\"row\");\r\n        row.classList.add(this.id + \"-toolbar-buttons\");\r\n        document.getElementById(this.id + \"-toolbar\").appendChild(row);\r\n        for (let level of levels) {\r\n            row.appendChild(buildButton(level));\r\n        }\r\n    }\r\n\r\n    _buildToolbarFilters() {\r\n        const row = document.createElement(\"row\");\r\n        row.classList.add(this.id + \"-toolbar-filters\");\r\n        row.classList.add(this.id + \"-toolbar-buttons\");\r\n        document.getElementById(this.id + \"-toolbar\").appendChild(row);\r\n    }\r\n\r\n    _buildToolbarSearch() {\r\n        let timeoutId;\r\n        this.searchInput = document.createElement(\"input\");\r\n        this.searchInput.setAttribute(\"type\", \"search\");\r\n        this.searchInput.setAttribute(\"placeholder\", \"Find logs\");\r\n        \r\n        this.searchInput.oninput = () => {\r\n            window.clearTimeout(timeoutId);\r\n            timeoutId = window.setTimeout(() => this._filterLogs(this.searchInput.value), 500);\r\n        };\r\n\r\n        const icon = document.createElement(\"icon\");\r\n        icon.classList.add(\"material-symbols-outlined\");\r\n        icon.innerHTML = \"search\";\r\n\r\n        const clearButton = document.createElement(\"icon\");\r\n        clearButton.classList.add(\"material-symbols-outlined\");\r\n        clearButton.classList.add(this.id + \"-toolbar-button\");\r\n        clearButton.setAttribute(\"title\", \"Clear console\");\r\n        clearButton.innerHTML = \"delete\";\r\n        clearButton.onclick = () => this.logPanel.innerHTML = \"\";\r\n\r\n        const row = document.createElement(\"row\");\r\n        row.classList.add(this.id + \"-toolbar-search\");\r\n        row.appendChild(icon);\r\n        row.appendChild(this.searchInput);\r\n        row.appendChild(clearButton);\r\n        \r\n        document.getElementById(this.id + \"-toolbar\").appendChild(row);\r\n    }\r\n\r\n    _buildToolbarOrigins() {\r\n        const buildButton = (origin) => {\r\n            const button = document.createElement(\"span\");\r\n            button.classList.add(this.id + \"-toolbar-toggler\");\r\n            button.classList.add(this.id + \"-toolbar-toggler-active\");\r\n            button.classList.add(this.id + \"-toolbar-origin-\" + origin);\r\n            button.innerHTML = origin;\r\n            button.onclick = () => {\r\n                button.classList.toggle(this.id + \"-toolbar-toggler-active\");\r\n                this.logPanel.classList.toggle(this.id + \"-hide-\" + origin);\r\n            };\r\n            return button;\r\n        };\r\n\r\n        const origins = [\"editor\", \"client\", \"server\"];\r\n        const row = document.createElement(\"row\");\r\n        row.classList.add(this.id + \"-toolbar-buttons\");\r\n        document.getElementById(this.id + \"-toolbar\").appendChild(row);\r\n        for (let origin of origins) {\r\n            row.appendChild(buildButton(origin));\r\n        }\r\n    }\r\n\r\n    _filterLogs(text) {\r\n        text = text.toLowerCase();\r\n\r\n        const filterLog = (line, data) => {\r\n            let spans = line.getElementsByTagName(\"span\");\r\n            for (let span of spans) {\r\n                if (span.innerHTML.toLowerCase().indexOf(text) >= 0) {\r\n                    line.classList.remove(this.id + \"-hidden\");\r\n                    data.classList.remove(this.id + \"-hidden\");\r\n                    return;\r\n                }\r\n            };\r\n            spans = data.getElementsByTagName(\"span\");\r\n            for (let span of spans) {\r\n                if (span.innerHTML.toLowerCase().indexOf(text) >= 0) {\r\n                    line.classList.remove(this.id + \"-hidden\");\r\n                    data.classList.remove(this.id + \"-hidden\");\r\n                    return;\r\n                }\r\n            };\r\n\r\n            line.classList.add(this.id + \"-hidden\");\r\n            data.classList.add(this.id + \"-hidden\");\r\n        };\r\n\r\n        const lines = this.logPanel.getElementsByClassName(this.id + \"-logLine\");\r\n        const linesData = this.logPanel.getElementsByClassName(this.id + \"-logData\");\r\n        for (let i = 0; i < lines.length; i++) {\r\n            filterLog(lines[i], linesData[i]);\r\n        }\r\n    }\r\n\r\n    _getLogType(value) {\r\n        switch (value.toLowerCase()) {\r\n            case \"warn\":\r\n            case \"warning\":\r\n                return \"warn\";\r\n            case \"error\":\r\n            case \"severe\":\r\n            case \"shout\":\r\n                return \"error\";\r\n            default:\r\n                return \"info\";\r\n        }\r\n    }\r\n}\nclass WidgetPanel extends EditorPanel {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.id = \"widget-panel\";\r\n\t\tthis.cssId = \"widget-panel\";\r\n        this.schema = null;\r\n\t}\r\n\r\n    populate() {\r\n\t\tconst rootPanel = document.getElementById(this.id);\r\n\t\trootPanel.innerHTML = \"\";\r\n\r\n        this.schema = Editor.project.getSchema(Editor.project.getTopSolution().id);\r\n\t\tconst widgetTypes = this.schema.getWidgetsOfType(null);\r\n\r\n        const categoryMap = {\r\n            \"common\": [],\r\n            \"layout\": [],\r\n            \"text\": [],\r\n            \"input\": [],\r\n            \"action\": [],\r\n            \"data list\": [],\r\n            \"asset\": [],\r\n            \"decoration\": [],\r\n            \"button\": [],\r\n            \"structure & navigation\": [],\r\n            \"scrolling\": [],\r\n            \"animation\": [],\r\n        };\r\n        for (let type of widgetTypes) {\r\n            let spec = this.schema.widgets[type]\r\n            let widgetCategories = spec.tags ?? [\"misc\"];\r\n            widgetCategories.sort();\r\n            for (let category of widgetCategories) {\r\n                if (!categoryMap[category]) {\r\n                    categoryMap[category] = [];\r\n                }\r\n                categoryMap[category].push({\r\n                    name: type,\r\n                    ...spec\r\n                });\r\n            }\r\n        }\r\n\r\n        const categories = Object.keys(categoryMap);\r\n        // categories.sort();\r\n        for (let category of categories) {\r\n            if (categoryMap[category] && categoryMap[category].length > 0) {\r\n                let element = this.buildCategory(category, categoryMap[category]);\r\n                rootPanel.appendChild(element);\r\n            }\r\n        }\r\n\t}\r\n\r\n    buildCategory(category, widgetList) {\r\n        const holder = document.createElement(\"column\");\r\n        holder.classList.add(`\${this.cssId}-category`);\r\n\r\n        const header = document.createElement(\"row\");\r\n        header.classList.add(`\${this.cssId}-category-header`);\r\n        header.onclick = () => {\r\n            holder.classList.toggle(`\${this.cssId}-category-collapsed`);\r\n        }\r\n        const title = document.createElement(\"span\");\r\n        title.innerHTML = category;\r\n        header.appendChild(title);\r\n\r\n        const itemsHolder = document.createElement(\"grid\");\r\n        itemsHolder.classList.add(`\${this.cssId}-category-items`);\r\n\r\n        for (let widget of widgetList) {\r\n            let element = this.buildWidget(widget);\r\n            itemsHolder.appendChild(element);\r\n        }\r\n\r\n        holder.append(header);\r\n        holder.append(itemsHolder);\r\n\r\n        return holder;\r\n    }\r\n\r\n    buildWidget(widget) {\r\n        const types = this.schema.getWidgetInheritance(widget.name);\r\n\r\n        const icon = document.createElement(\"icon\");\r\n        icon.classList.add(\"material-symbols-outlined\");\r\n        icon.innerHTML = getIconForWidget(widget.name);\r\n        const name = document.createElement(\"span\");\r\n        name.innerHTML = widget.name;\r\n\r\n        const element = document.createElement(\"column\");\r\n        element.classList.add(`\${this.cssId}-category-item`);\r\n        element.title = widget.name;\r\n        element.appendChild(icon);\r\n        element.appendChild(name);\r\n        element.setAttribute(\"draggable\", true);\r\n        element.ondragstart = (ev) => {\r\n            ev.dataTransfer.clearData();\r\n            ev.dataTransfer.setData(\"text/plain\", widget.name);\r\n            for (let type of types) {\r\n                document.body.classList.add(`widget-drag-\${type}`);\r\n            }\r\n        };\r\n        element.ondragend = () => {\r\n            for (let type of types) {\r\n                document.body.classList.remove(`widget-drag-\${type}`);\r\n            }\r\n        };\r\n        return element;\r\n    }\r\n}\nclass Schema {\r\n\tconstructor(solutionId, schemaData) {\r\n\t\tthis.solutionId = solutionId;\r\n\t\tthis.widgets = schemaData.widgets;\r\n\t\tthis.actions = schemaData.actions;\r\n\t\tthis.properties = schemaData.properties;\r\n\t\tthis.widgetTypes = {};\r\n\r\n\t\tfor (let widget in this.widgets) {\r\n\t\t\tlet types = this.getWidgetInheritance(widget);\r\n\t\t\tfor (let type of types) {\r\n\t\t\t\tif (!this.widgetTypes[type]) {\r\n\t\t\t\t\tthis.widgetTypes[type] = [];\r\n\t\t\t\t}\r\n\t\t\t\tthis.widgetTypes[type].push({\r\n\t\t\t\t\t\"type\": widget,\r\n\t\t\t\t\t\"spec\": this.widgets[widget]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_getTypeSchema(rootType) {\r\n\t\tswitch (rootType.toLowerCase()) {\r\n\t\t\tcase \"widget\":\r\n\t\t\tcase \"widgets\":\r\n\t\t\t\treturn this.widgets;\r\n\t\t\tcase \"action\":\r\n\t\t\tcase \"actions\":\r\n\t\t\tcase \"kaction\":\r\n\t\t\tcase \"klistaction\":\r\n\t\t\t\treturn this.actions;\r\n\t\t\tdefault:\r\n\t\t\t\tconst props = {...this.properties};\r\n\t\t\t\tfor (let type of Editor.project.getTypes(this.solutionId)) {\r\n\t\t\t\t\tprops[type.getType()] = type;\r\n\t\t\t\t}\r\n\t\t\t\treturn props;\r\n\t\t}\r\n\t}\r\n\r\n\tgetSchema(node) {\r\n\t\tif (!node || !(node instanceof Node) || node instanceof Folder)\r\n\t\t\treturn null;\r\n\r\n\t\treturn this._getTypeSchema(node.rootType)[node.getType()];\r\n\t}\r\n\r\n\tgetWidgets(node) {\r\n\t\tif (!node || !(node instanceof Node) || node instanceof Folder)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tconst typeName = node.getType();\r\n\t\tconst schema = this._getTypeSchema(node.rootType);\r\n\t\tconst type = schema[typeName];\r\n\t\tif (!type)\r\n\t\t\treturn null;\r\n\t\tif (Array.isArray(type))\r\n\t\t\treturn type;\r\n\r\n\t\tconst typeWidgets = type.widgets || {};\r\n\t\tconst widgets = {};\r\n\t\tfor (const key in typeWidgets) {\r\n\t\t\twidgets[key] = typeWidgets[key];\r\n\t\t}\r\n\r\n\t\tlet baseTypeName = type[\"extends\"];\r\n\t\twhile (baseTypeName) {\r\n\t\t\tconst baseType = schema[baseTypeName];\r\n\t\t\tif (!baseType) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet baseWidgets = baseType.widgets || {};\r\n\t\t\tfor (const key in baseWidgets) {\r\n\t\t\t\twidgets[key] = baseWidgets[key];\r\n\t\t\t}\r\n\t\t\tbaseTypeName = baseType[\"extends\"];\r\n\t\t}\r\n\t\treturn widgets;\r\n\t}\r\n\r\n\tgetActions(node) {\r\n\t\tif (!node || !(node instanceof Node) || node instanceof Folder)\r\n\t\t\treturn null;\r\n\t\t\r\n\t\tconst typeName = node.getType();\r\n\t\tconst schema = this._getTypeSchema(node.rootType);\r\n\t\tconst type = schema[typeName];\r\n\t\tif (!type)\r\n\t\t\treturn null;\r\n\t\tif (Array.isArray(type))\r\n\t\t\treturn type;\r\n\r\n\t\tconst typeActions = type.actions || {};\r\n\t\tconst actions = {};\r\n\t\tfor (const key in typeActions) {\r\n\t\t\tactions[key] = typeActions[key];\r\n\t\t}\r\n\r\n\t\tlet baseTypeName = type[\"extends\"];\r\n\t\twhile (baseTypeName) {\r\n\t\t\tconst baseType = schema[baseTypeName];\r\n\t\t\tif (!baseType) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet baseActions = baseType.actions || {};\r\n\t\t\tfor (const key in baseActions) {\r\n\t\t\t\tactions[key] = baseActions[key];\r\n\t\t\t}\r\n\t\t\tbaseTypeName = baseType[\"extends\"];\r\n\t\t}\r\n\t\treturn actions;\r\n\t}\r\n\r\n\tgetProperties(node) {\r\n\t\tif (!node || !(node instanceof Node) || node instanceof Folder)\r\n\t\t\treturn null;\r\n\r\n\t\tconst schema = this._getTypeSchema(node.rootType);\r\n\t\treturn this._getPropertyProperties(schema, node.getType());\r\n\t}\r\n\r\n\tgetPropertyProperties(typeName) {\r\n\t\tconst schema = this._getTypeSchema(\"properties\");\r\n\t\treturn this._getPropertyProperties(schema, typeName);\r\n\t}\r\n\r\n\t_getPropertyProperties(schema, typeName) {\r\n\t\tconst type = schema[typeName];\r\n\t\tif (!type)\r\n\t\t\treturn null;\r\n\t\tif (Array.isArray(type))\r\n\t\t\treturn type;\r\n\r\n\t\tconst typeProperties = type.properties || {};\r\n\t\tconst properties = {};\r\n\t\tfor (const key in typeProperties) {\r\n\t\t\tproperties[key] = typeProperties[key];\r\n\t\t}\r\n\r\n\t\tlet baseTypeName = type[\"extends\"];\r\n\t\twhile (baseTypeName) {\r\n\t\t\tconst baseType = schema[baseTypeName];\r\n\t\t\tif (!baseType) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet baseProperties = baseType.properties || {};\r\n\t\t\tfor (const key in baseProperties) {\r\n\t\t\t\tproperties[key] = baseProperties[key];\r\n\t\t\t}\r\n\t\t\tbaseTypeName = baseType[\"extends\"];\r\n\t\t}\r\n\t\treturn properties;\r\n\t}\r\n\r\n\tgetTypes(rootType, typeName) {\r\n\t\tif (!rootType) {\r\n\t\t\treturn [];\r\n\t\t}\r\n\t\tif (!typeName) {\r\n\t\t\ttypeName = \"\";\r\n\t\t}\r\n\r\n\t\tconst schema = this._getTypeSchema(rootType);\r\n\t\tconst results = [];\r\n\t\ttypeName = typeName.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\tconst returnAll = typeName.length === 0;\r\n\r\n\t\tfor (let key in schema) {\r\n\t\t\tlet type = schema[key];\r\n\t\t\tif (type.abstract) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (returnAll || key === typeName) {\r\n\t\t\t\tresults.push(key);\r\n\t\t\t} else {\r\n\t\t\t\tlet subType = type.extends;\r\n\t\t\t\twhile (subType) {\r\n\t\t\t\t\tif (subType == typeName) {\r\n\t\t\t\t\t\tresults.push(key);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsubType = schema[subType]?.extends;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetWidgetTypes(typeName) {\r\n\t\treturn this.getTypes(\"widget\", typeName);\r\n\t}\r\n\r\n\tgetActionTypes(typeName) {\r\n\t\treturn this.getTypes(\"action\", typeName);\r\n\t}\r\n\r\n\tgetPropertyTypes(typeName) {\r\n\t\treturn this.getTypes(\"property\", typeName);\r\n\t}\r\n\t\r\n\tgetWidgetInheritance(typeName) {\r\n\t\tconst types = [];\r\n\t\tconst type = this.widgets[typeName];\r\n\t\tif (type) {\r\n\t\t\ttypes.push(typeName);\r\n\t\t\tlet base = type[\"extends\"];\r\n\t\t\twhile (base) {\r\n\t\t\t\ttypes.push(base);\r\n\t\t\t\tlet baseType = this.widgets[base];\r\n\t\t\t\tif (baseType) {\r\n\t\t\t\t\tbase = baseType[\"extends\"];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbase = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn types;\r\n\t}\r\n\r\n\tgetWidgetsOfType(typeName) {\r\n\t\ttypeName = typeName || \"Widget\";\r\n\t\tconst results = [];\r\n\t\ttypeName = typeName.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\r\n\t\tif (this.widgetTypes.hasOwnProperty(typeName)) {\r\n\t\t\tfor (let type of this.widgetTypes[typeName]) {\r\n\t\t\t\tif (type.spec[\"abstract\"]) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tresults.push(type.type);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetWidgetsWithProperties(widgetType, targetProperties, propertyType) {\r\n\t\tconst results = [];\r\n\t\tconst widgets = this.widgetTypes[widgetType];\r\n\t\tconst widgetTypes = [propertyType, \"[\" + propertyType + \"]\"];\r\n\r\n\t\tfor (let widget of widgets) {\r\n\t\t\tif (widget.spec[\"abstract\"]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet objectsToSearch = [\r\n\t\t\t\twidget.spec.properties,\r\n\t\t\t\twidget.spec.actions,\r\n\t\t\t\twidget.spec.widgets\r\n\t\t\t];\r\n\r\n\t\t\tfor (let obj of objectsToSearch) {\r\n\t\t\t\tif (obj) {\r\n\t\t\t\t\tfor (let targetProperty of targetProperties) {\r\n\t\t\t\t\t\tif (obj.hasOwnProperty(targetProperty) && widgetTypes.indexOf(obj[targetProperty]) >= 0) {\r\n\t\t\t\t\t\t\tresults.push(widget.type);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tisWidget(typeName) {\r\n\t\tif (typeof typeName != \"string\" || typeName === \"Screen\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttypeName = typeName.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\treturn this.widgetTypes.hasOwnProperty(typeName);\r\n\t}\r\n\t\r\n\tisAction(typeName) {\r\n\t\tif (typeof typeName != \"string\") {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\ttypeName = typeName.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\treturn this.actions.hasOwnProperty(typeName);\r\n\t}\r\n}\r\n\nclass Project {\r\n\tbuild(solutions) {\r\n\t\t// A Solution can have Schema but no Model (eg: Lowder)\r\n\t\tthis.solutions = [];\r\n\t\tthis._solutions = {};\r\n\r\n\t\tthis._mergeSchemas(solutions);\r\n\r\n\t\tfor (let solutionData of solutions) {\r\n\t\t\tif (solutionData.name === \"Lowder\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet solution;\r\n\t\t\tif (solutionData.filePath) {\r\n\t\t\t\tsolution = new Solution();\r\n\t\t\t\tsolutionData.data.id ??= getUUID();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlet solutionId = solutionData.data?.id ?? solutionData.name;\r\n\t\t\tlet schema = new Schema(solutionId, solutionData);\r\n\r\n\t\t\tthis._solutions[solutionId] = {\r\n\t\t\t\tid: solutionId,\r\n\t\t\t\tname: solutionData.name,\r\n\t\t\t\tfilePath: solutionData.filePath,\r\n\t\t\t\tabsolutePath: solutionData.absolutePath,\r\n\t\t\t\tschema: schema,\r\n\t\t\t\tschemaStats: solutionData.schemaStats,\r\n\t\t\t\tsolution: solution,\r\n\t\t\t};\r\n\r\n\t\t\tif (solution) {\r\n\t\t\t\tthis.solutions.unshift(solution);\r\n\t\t\t\tsolution.build(solutionData.name, solutionData.filePath, solutionData.data ?? {});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdateSchema(schemaData) {\r\n\t\tthis._mergeSchemas(schemaData);\r\n\t\tconst solutionList = [];\r\n\t\tfor (let key in this._solutions) {\r\n\t\t\tsolutionList.push(this._solutions[key]);\r\n\t\t}\r\n\r\n\t\tfor (let schema of schemaData) {\r\n\t\t\tlet solution = solutionList.find(s => s.name === schema.name && s.filePath === schema.filePath);\r\n\t\t\tif (solution) {\r\n\t\t\t\tsolution.schema = new Schema(solution.id, schema);\r\n\t\t\t\tsolution.schemaStats = schema.schemaStats;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_mergeSchemas(schemas) {\r\n\t\t// All Solutions have access to Lowder Schema, but only the Top Solution has access to all Schemas.\r\n\t\t// Intermediate Solutions will have access to it's own Schema and Lowder's\r\n\t\tconst lowder = schemas.find(s => s.name === \"Lowder\");\r\n\t\tconst baseWidgets = lowder?.widgets ?? {};\r\n\t\tconst baseActions = lowder?.actions ?? {};\r\n\t\tconst baseProperties = lowder?.properties ?? {};\r\n\r\n\t\tconst cumulativeWidgets = {};\r\n\t\tconst cumulativeActions = {};\r\n\t\tconst cumulativeProperties = {};\r\n\r\n\t\tfor (let i = 0; i < schemas.length; i++) {\r\n\t\t\tlet schema = schemas[i];\r\n\t\t\tif (schema.name === \"Lowder\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tschema.schemaStats = {\r\n\t\t\t\twidgets: Object.keys(schema.widgets).length,\r\n\t\t\t\tactions: Object.keys(schema.actions).length,\r\n\t\t\t\tproperties: Object.keys(schema.properties).length,\r\n\t\t\t};\r\n\r\n\t\t\tmergeMaps(schema.widgets, baseWidgets);\r\n\t\t\tmergeMaps(schema.actions, baseActions);\r\n\t\t\tmergeMaps(schema.properties, baseProperties);\r\n\r\n\t\t\tif (i === schemas.length - 1) {\r\n\t\t\t\tmergeMaps(schema.widgets, cumulativeWidgets);\r\n\t\t\t\tmergeMaps(schema.actions, cumulativeActions);\r\n\t\t\t\tmergeMaps(schema.properties, cumulativeProperties);\r\n\t\t\t} else {\r\n\t\t\t\tmergeMaps(cumulativeWidgets, schema.widgets);\r\n\t\t\t\tmergeMaps(cumulativeActions, schema.actions);\r\n\t\t\t\tmergeMaps(cumulativeProperties, schema.properties);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetSchema(solutionId) {\r\n\t\treturn this._solutions[solutionId]?.schema;\r\n\t}\r\n\r\n\tgetSchemaStats(solutionId) {\r\n\t\treturn this._solutions[solutionId]?.schemaStats;\r\n\t}\r\n\r\n\t_getSolutionsForId(solutionId) {\r\n\t\tif (solutionId === this.getTopSolution().id) {\r\n\t\t\treturn this.solutions;\r\n\t\t}\r\n\t\treturn [this.getSolution(solutionId)];\r\n\t}\r\n\r\n\tgetSolution(id) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tif (solution.getId() === id)\r\n\t\t\t\treturn solution;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTopSolution() {\r\n\t\treturn this.solutions[0];\r\n\t}\r\n\r\n\tgetFolders(solutionId) {\r\n\t\treturn this.getSolution(solutionId)?.folders ?? [];\r\n\t}\r\n\r\n\tgetScreen(id) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getScreen(id);\r\n\t\t\tif (obj) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfindWidget(id) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.findWidget(id);\r\n\t\t\tif (obj) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetScreens(solutionId) {\r\n\t\tlet results = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.screens;\r\n\t\t\tif (obj)\r\n\t\t\t\tresults = results.concat(obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetTemplate(id) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getTemplate(id);\r\n\t\t\tif (obj) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfindTemplates(solutionId, widgetType) {\r\n\t\tlet types = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.findTemplates(widgetType);\r\n\t\t\tif (obj)\r\n\t\t\t\ttypes = types.concat(obj);\r\n\t\t}\r\n\t\treturn types;\r\n\t}\r\n\r\n\tgetTemplates(solutionId) {\r\n\t\tlet results = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.templates;\r\n\t\t\tif (obj)\r\n\t\t\t\tresults = results.concat(obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetComponent(id) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getComponent(id);\r\n\t\t\tif (obj) {\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfindComponents(solutionId, widgetType) {\r\n\t\tlet types = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.findComponents(widgetType);\r\n\t\t\tif (obj)\r\n\t\t\t\ttypes = types.concat(obj);\r\n\t\t}\r\n\t\treturn types;\r\n\t}\r\n\r\n\tgetComponents(solutionId) {\r\n\t\tlet results = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.components;\r\n\t\t\tif (obj)\r\n\t\t\t\tresults = results.concat(obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetModel(type) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getModel(type);\r\n\t\t\tif (obj)\r\n\t\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetModels(solutionId) {\r\n\t\tlet types = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.getModels();\r\n\t\t\tif (obj)\r\n\t\t\t\ttypes = types.concat(obj);\r\n\t\t}\r\n\t\treturn types;\r\n\t}\r\n\r\n\tgetRequest(type) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getRequest(type);\r\n\t\t\tif (obj)\r\n\t\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetRequests(solutionId) {\r\n\t\tlet results = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.getRequests();\r\n\t\t\tif (obj)\r\n\t\t\t\tresults = results.concat(obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetTypes(solutionId) {\r\n\t\tlet results = [];\r\n\t\tfor (let solution of this._getSolutionsForId(solutionId)) {\r\n\t\t\tlet obj = solution.types;\r\n\t\t\tif (obj)\r\n\t\t\t\tresults = results.concat(obj);\r\n\t\t}\r\n\t\treturn results;\r\n\t}\r\n\r\n\tgetTestData(nodeId) {\r\n\t\tfor (let solution of this.solutions) {\r\n\t\t\tlet obj = solution.getTestData(nodeId);\r\n\t\t\tif (obj)\r\n\t\t\t\treturn obj;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tsetTestData(solutionId, nodeId, data) {\r\n\t\tthis.getSolution(solutionId).setTestData(nodeId, data);\r\n\t}\r\n\r\n\tchangeSolution(type, node, solutionId) {\r\n\t\tthis.getSolution(node.getSolutionId()).removeRootNode(type, node);\r\n\t\tthis.getSolution(solutionId).appendRootNode(type, node);\r\n\t}\r\n}\r\n\r\nclass Solution {\r\n\tconstructor() {\r\n\t}\r\n\r\n\tbuild(name, filePath, solutionData) {\r\n\t\tthis.id = solutionData[\"id\"] ?? getUUID();\r\n\t\tthis.name = name ?? solutionData[\"name\"];\r\n\t\tthis.filePath = filePath;\r\n\t\tthis.type = solutionData[\"type\"] ?? \"flutter\";\r\n\t\tthis.landingScreen = solutionData[\"landingScreen\"];\r\n\t\tthis.screens = [];\r\n\t\tthis.templates = [];\r\n\t\tthis.components = [];\r\n\t\tthis.types = [];\r\n\t\tthis.folders = [];\r\n\t\tthis.testData = solutionData[\"testData\"] || {};\r\n\t\tthis.environmentData = new EnvironmentVariables(solutionData[\"environmentData\"]);\r\n\t\tthis.stringResources = new StringResources(solutionData[\"stringResources\"]);\r\n\r\n\t\tif (solutionData[\"folders\"]) {\r\n\t\t\tfor (let folderData of solutionData[\"folders\"]) {\r\n\t\t\t\tconst folder = new Folder(this.id, folderData);\r\n\t\t\t\tthis.folders.push(folder);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (solutionData[\"types\"]) {\r\n\t\t\tfor (let typeData of solutionData[\"types\"]) {\r\n\t\t\t\tconst type = new TypeNode(this.id, typeData);\r\n\t\t\t\tthis.types.push(type);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (solutionData[\"templates\"]) {\r\n\t\t\tfor (let templateData of solutionData[\"templates\"]) {\r\n\t\t\t\tconst template = new Template(this.id, templateData);\r\n\t\t\t\tthis.templates.push(template);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (solutionData[\"components\"]) {\r\n\t\t\tfor (let componentData of solutionData[\"components\"]) {\r\n\t\t\t\tconst component = new Component(this.id, componentData);\r\n\t\t\t\tthis.components.push(component);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (solutionData[\"screens\"]) {\r\n\t\t\tfor (let screenData of solutionData[\"screens\"]) {\r\n\t\t\t\tconst screen = new Screen(this.id, screenData);\r\n\t\t\t\tthis.screens.push(screen);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetId() {\r\n\t\treturn this.id;\r\n\t}\r\n\r\n\tgetScreen(screenId) {\r\n\t\treturn this.screens.find(s => s.getId() === screenId) ?? null;\r\n\t}\r\n\r\n\tfindWidget(widgetId) {\r\n\t\tlet widget;\r\n\t\tfor (let screen of this.screens) {\r\n\t\t\twidget = screen.findWidget(widgetId);\r\n\t\t\tif (widget)\r\n\t\t\t\treturn widget;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTemplate(id) {\r\n\t\tif (id) {\r\n\t\t\treturn this.templates.find(e => e.getId() === id);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfindTemplates(widgetType) {\r\n\t\tif (widgetType) {\r\n\t\t\treturn this.templates.filter(e => e.getType() === widgetType);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetComponent(id) {\r\n\t\tif (id) {\r\n\t\t\treturn this.components.find(e => e.getId() === id);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tfindComponents(widgetType) {\r\n\t\tif (widgetType) {\r\n\t\t\treturn this.components.filter(e => e.getType() === widgetType);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetModels() {\r\n\t\treturn this.types.filter(e => e.extends === \"KModel\");\r\n\t}\r\n\r\n\tgetModel(type) {\r\n\t\tif (type) {\r\n\t\t\treturn this.getModels().find(e => e.getType() === type);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetRequests() {\r\n\t\treturn this.types.filter(e => e.extends === \"KRequest\");\r\n\t}\r\n\r\n\tgetRequest(type) {\r\n\t\tif (type) {\r\n\t\t\treturn this.getRequests().find(e => e.getType() === type);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tcreateScreen() {\r\n\t\tconst newScreen = new Screen(this.id, { _id: getUUID() });\r\n\t\tthis.screens.push(newScreen);\r\n\t\tEditor.logInfo(`[Solution] New Screen '\${newScreen.getName() || newScreen.getId()}' created on '\${this.name}'.`, null, null, newScreen);\r\n\t\treturn newScreen;\r\n\t}\r\n\r\n\tcreateTemplate(widgetType) {\r\n\t\tconst newTemplate = Template.create(this.id, widgetType);\r\n\t\tthis.templates.push(newTemplate);\r\n\t\tEditor.logInfo(`[Solution] New '\${widgetType}' Template '\${newTemplate.getName() || newTemplate.getId()}' created on '\${this.name}'.`, null, null, newTemplate);\r\n\t\treturn newTemplate;\r\n\t}\r\n\r\n\tcreateComponent(widgetType) {\r\n\t\tconst newComponent = Component.create(this.id, widgetType);\r\n\t\tthis.components.push(newComponent);\r\n\t\tEditor.logInfo(`[Solution] New '\${widgetType}' Component '\${newComponent.getName() || newComponent.getId()}' created on '\${this.name}'.`, null, null, newComponent);\r\n\t\treturn newComponent;\r\n\t}\r\n\r\n\tcreateType(baseType) {\r\n\t\tconst id = getUUID();\r\n\t\tconst args = {\r\n\t\t\t_id: id,\r\n\t\t\t_type: id,\r\n\t\t\textends: baseType,\r\n\t\t};\r\n\t\tconst newType = baseType === \"request\" ? new RequestNode(this.id, args) : new TypeNode(this.id, args);\r\n\t\tthis.types.push(newType);\r\n\t\tEditor.logInfo(`[Solution] New '\${baseType}' '\${newType.getName() || newType.getId()}' created on '\${this.name}'.`, null, null, newType);\r\n\t\treturn newType;\r\n\t}\r\n\r\n\tcreateFolder() {\r\n\t\tconst newFolder = new Folder(this.id, { _id: getUUID() });\r\n\t\tthis.folders.push(newFolder);\r\n\t\treturn newFolder;\r\n\t}\r\n\r\n\tremoveRootNode(type, node) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tconst idx = array.indexOf(node);\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tarray.splice(idx, 1);\r\n\t\t\t\tEditor.logInfo(`[Solution] '\${type}' '\${node.getName() || node.getId()}' removed from '\${this.name}'.`, null, null, node);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcloneRootNode(type, node) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tconst newNode = node.clone();\r\n\t\t\tarray.push(newNode);\r\n\t\t\tEditor.logInfo(`[Solution] '\${type}' '\${newNode.getId()}' cloned from '\${node.getName() || node.getId()}' on '\${this.name}'.`, null, null, newNode);\r\n\t\t\treturn newNode;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tappendRootNode(type, node) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tnode._solution = this.getId();\r\n\t\t\tarray.push(node);\r\n\t\t}\r\n\t}\r\n\r\n\tcanMoveUp(type, node) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tconst folder = node.getFolder();\r\n\t\t\tconst folderArray = array.filter((entry) => entry.getFolder() === folder);\r\n\t\t\treturn folderArray.indexOf(node) > 0;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcanMoveDown(type, node) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tconst folder = node.getFolder();\r\n\t\t\tconst folderArray = array.filter((entry) => entry.getFolder() === folder);\r\n\t\t\treturn folderArray.indexOf(node) < folderArray.length - 1;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tmoveRootNode(type, node, direction) {\r\n\t\tconst array = this._getTypeArray(type);\r\n\t\tif (array) {\r\n\t\t\tconst idx = array.indexOf(node);\r\n\t\t\tif (idx >= 0) {\r\n\t\t\t\tconst folder = node.getFolder();\r\n\t\t\t\tconst folderArray = array.filter((entry) => entry.getFolder() === folder);\r\n\t\t\t\tconst folderIdx = folderArray.indexOf(node);\r\n\r\n\t\t\t\tif (direction == \"up\" && this.canMoveUp(type, node)) {\r\n\t\t\t\t\tconst prevIdx = array.indexOf(folderArray[folderIdx - 1]);\r\n\t\t\t\t\tarray.splice(idx, 1);\r\n\t\t\t\t\tarray.splice(prevIdx, 0, node);\r\n\t\t\t\t} else if (direction == \"down\" && this.canMoveDown(type, node)) {\r\n\t\t\t\t\tconst nextIdx = array.indexOf(folderArray[folderIdx + 1]);\r\n\t\t\t\t\tarray.splice(idx, 1);\r\n\t\t\t\t\tarray.splice(nextIdx, 0, node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_getTypeArray(type) {\r\n\t\tswitch (type) {\r\n\t\t\tcase \"screen\":\r\n\t\t\t\treturn this.screens;\r\n\t\t\tcase \"template\":\r\n\t\t\t\treturn this.templates;\r\n\t\t\tcase \"component\":\r\n\t\t\t\treturn this.components;\r\n\t\t\tcase \"type\":\r\n\t\t\tcase \"model\":\r\n\t\t\tcase \"request\":\r\n\t\t\t\treturn this.types;\r\n\t\t\tcase \"folder\":\r\n\t\t\t\treturn this.folders;\r\n\t\t\tdefault:\r\n\t\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\tgetTestData(nodeId) {\r\n\t\treturn this.testData[nodeId];\r\n\t}\r\n\t\r\n\tsetTestData(nodeId, data) {\r\n\t\tthis.testData[nodeId] = data;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nfunction EnvironmentVariables(data) {\r\n\tthis.environments = data?.environments ?? [\"Dev\", \"QA\", \"Prod\"];\r\n\tthis.keys = data?.keys ?? [];\r\n\tthis.values = data?.values ?? [];\r\n}\r\n\r\nfunction StringResources(data) {\r\n\tthis.languages = data?.languages ?? [\"en\", \"pt\"];\r\n\tthis.keys = data?.keys ?? [];\r\n\tthis.values = data?.values ?? [];\r\n}\r\n\nclass Node {\r\n\tconstructor(solution, nodeData) {\r\n\t\tthis._solution = solution;\r\n\t\tthis._id = getUUID();\r\n\t\tthis._type = null;\r\n\t\tthis.name = null;\r\n\t\tthis.properties = {};\r\n\t\tthis.actions = {};\r\n\t\tthis.fromObject(nodeData);\r\n\t}\r\n\r\n\tfromObject(nodeData) {\r\n\t\tif (nodeData) {\r\n\t\t\tthis._id = nodeData[\"_id\"] ?? this.getId();\r\n\t\t\tthis._type = nodeData[\"_type\"] ?? this.getType();\r\n\t\t\tthis.name = nodeData[\"name\"] ?? this.getName();\r\n\t\t}\r\n\t}\r\n\r\n\tgetSolutionId() {\r\n\t\treturn this._solution;\r\n\t}\r\n\r\n\tgetId() {\r\n\t\treturn this._id;\r\n\t}\r\n\r\n\tgetType() {\r\n\t\treturn this._type;\r\n\t}\r\n\r\n\tget rootType() {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tsetName(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tgetSchema() {\r\n\t\treturn Editor.project.getSchema(this.getSolutionId()).getSchema(this);\r\n\t}\r\n\r\n\tgetActions() {\r\n\t\treturn this.actions;\r\n\t}\r\n\r\n\tgetActionSchema() {\r\n\t\treturn Editor.project.getSchema(this.getSolutionId()).getActions(this);\r\n\t}\r\n\r\n\tgetAction(key) {\r\n\t\treturn this.actions[key];\r\n\t}\r\n\r\n\tsetAction(key, action) {\r\n\t\tthis.actions[key] = action;\r\n\t}\r\n\r\n\tremoveAction(key) {\r\n\t\tdelete this.actions[key];\r\n\t}\r\n\r\n\tgetProperties() {\r\n\t\treturn this.properties;\r\n\t}\r\n\r\n\tgetPropertySchema() {\r\n\t\treturn Editor.project.getSchema(this.getSolutionId()).getProperties(this);\r\n\t}\r\n\r\n\tgetProperty(key) {\r\n\t\treturn this.properties[key];\r\n\t}\r\n\r\n\tsetProperty(key, value) {\r\n\t\tthis.properties[key] = value;\r\n\t}\r\n\r\n\tremoveProperty(key) {\r\n\t\tdelete this.properties[key];\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass RootNode extends Node {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t\tthis.isRootNode = true;\r\n\t}\r\n\r\n\tfromObject(data) {\r\n\t\tsuper.fromObject(data);\r\n\t\tif (data) {\r\n\t\t\tthis._folder = data[\"_folder\"];\r\n\t\t}\r\n\t}\r\n\r\n\tgetFolder() {\r\n\t\treturn this._folder ?? null;\r\n\t}\r\n\r\n\tsetFolder(value) {\r\n\t\tthis._folder = value;\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Folder extends RootNode {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t\tthis._type = this._type ?? \"Folder\";\r\n\t}\r\n\r\n\tsetFolder(value) {\r\n\t\tif (value !== this.getId()) {\r\n\t\t\tsuper.setFolder(value);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass TypeNode extends RootNode {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tfromObject(data) {\r\n\t\tsuper.fromObject(data);\r\n\t\tif (data) {\r\n\t\t\tthis.extends = data[\"extends\"];\r\n\t\t\tconst props = data[\"properties\"] || {};\r\n\t\t\tfor (let key in props) {\r\n\t\t\t\tthis.setProperty(key, props[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn super.getName() ?? this.getId();\r\n\t}\r\n\r\n\tgetType() {\r\n\t\treturn this.getId();\r\n\t}\r\n\r\n\tget rootType() {\r\n\t\treturn \"Type\";\r\n\t}\r\n\r\n\tclone() {\r\n\t\tconst newObj = JSON.parse(stringify(this));\r\n\t\tdelete newObj[\"_id\"];\r\n\t\tdelete newObj[\"_type\"];\r\n\t\treturn new TypeNode(this.getSolutionId(), newObj);\r\n\t}\r\n}\r\n\r\nclass RequestNode extends TypeNode {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tclone() {\r\n\t\tconst newObj = JSON.parse(stringify(this));\r\n\t\tdelete newObj[\"_id\"];\r\n\t\tdelete newObj[\"_type\"];\r\n\t\treturn new RequestNode(this.getSolutionId(), newObj);\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Action extends Node {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tget rootType() {\r\n\t\treturn \"Action\";\r\n\t}\r\n\r\n\tfromObject(objData) {\r\n\t\tsuper.fromObject(objData);\r\n\t\tconst solutionId = this.getSolutionId();\r\n\t\tconst props = objData[\"properties\"] || {};\r\n\t\tconst actions = objData[\"actions\"] || {};\r\n\r\n\t\t// Sanitize properties: only add existing properties in the schema\r\n\t\tconst propSchema = this.getPropertySchema();\r\n\t\tfor (let key in propSchema) {\r\n\t\t\tthis.removeProperty(key);\r\n\t\t}\r\n\t\tfor (let key in props) {\r\n\t\t\tif (propSchema[key]) {\r\n\t\t\t\tthis.setProperty(key, props[key]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sanitize actions: only add existing actions in the schema\r\n\t\tconst actionSchema = this.getActionSchema();\r\n\t\tfor (let key in actionSchema) {\r\n\t\t\tthis.removeAction(key);\r\n\t\t}\r\n\t\tfor (let key in actions) {\r\n\t\t\tif (actionSchema[key]) {\r\n\t\t\t\tthis.setAction(key, new Action(solutionId, actions[key]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tclone() {\r\n\t\tconst newObj = JSON.parse(stringify(this));\r\n\t\tdelete newObj[\"_id\"];\r\n\t\tconst actions = {};\r\n\t\tnewObj[\"actions\"] = actions;\r\n\r\n\t\tconst props = this.getActions();\r\n\t\tfor (let key in props) {\r\n\t\t\tlet prop = props[key];\r\n\t\t\tif (prop instanceof Action) {\r\n\t\t\t\tactions[key] = prop.clone();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn new Action(this.getSolutionId(), newObj);\r\n\t}\r\n}\r\n\nclass Screen extends RootNode {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t\tthis._type = this._type ?? \"Screen\";\r\n\t}\r\n\r\n\tget rootType() {\r\n\t\treturn \"Widget\";\r\n\t}\r\n\t\r\n\tfromObject(screenData) {\r\n\t\tsuper.fromObject(screenData);\r\n\t\tconst solutionId = this.getSolutionId();\r\n\t\tconst schema = Editor.project.getSchema(solutionId);\r\n\t\tthis.widgets = {};\r\n\r\n\t\tif (screenData) {\r\n\t\t\tconst props = screenData[\"properties\"] || screenData;\r\n\t\t\tconst propsSchema = schema.getProperties(this) ?? {};\r\n\t\t\tfor (let key in propsSchema) {\r\n\t\t\t\tif (props.hasOwnProperty(key)) {\r\n\t\t\t\t\tthis.properties[key] = props[key];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst widgets = screenData[\"widgets\"] || screenData;\r\n\t\t\tconst widgetSchema = schema.getWidgets(this) ?? {};\r\n\t\t\tfor (let key in widgetSchema) {\r\n\t\t\t\tif (widgets.hasOwnProperty(key)) {\r\n\t\t\t\t\tthis.widgets[key] = new Widget(solutionId, widgets[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst actions = screenData[\"actions\"] || screenData;\r\n\t\t\tconst actionSchema = schema.getActions(this) ?? {};\r\n\t\t\tfor (let key in actionSchema) {\r\n\t\t\t\tif (actions.hasOwnProperty(key)) {\r\n\t\t\t\t\tthis.actions[key] = new Action(solutionId, actions[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetWidget(key) {\r\n\t\treturn this.widgets[key];\r\n\t}\r\n\r\n\tsetWidget(key, widget) {\r\n\t\tthis.widgets[key] = widget;\r\n\t}\r\n\r\n\tgetBody() {\r\n\t\treturn this.getWidget(\"body\");\r\n\t}\r\n\r\n\tsetBody(widget) {\r\n\t\tthis.setWidget(\"body\", widget);\r\n\t}\r\n\r\n\tfindWidget(widgetId) {\r\n\t\tconst body = this.getBody();\r\n\t\tif (!body)\r\n\t\t\treturn null;\r\n\t\tif (body.getId() === widgetId)\r\n\t\t\treturn body;\r\n\t\treturn body.findWidget(widgetId);\r\n\t}\r\n\r\n\tclone() {\r\n\t\tvar newObj = JSON.parse(stringify(this));\r\n\t\tdelete newObj[\"_id\"];\r\n\t\tconst widgets = {};\r\n\t\tnewObj[\"widgets\"] = widgets;\r\n\t\tconst actions = {};\r\n\t\tnewObj[\"actions\"] = actions;\r\n\r\n\t\tlet props = this.widgets;\r\n\t\tfor (let key in props) {\r\n\t\t\tlet prop = this.getWidget(key);\r\n\t\t\tif (prop instanceof Widget) {\r\n\t\t\t\twidgets[key] = prop.clone();\r\n\t\t\t} else if (Array.isArray(prop)) {\r\n\t\t\t\tlet arr = [];\r\n\t\t\t\twidgets[key] = arr;\r\n\t\t\t\tfor (let i = 0; i < prop.length; i++) {\r\n\t\t\t\t\tif (prop[i] instanceof Widget) {\r\n\t\t\t\t\t\tarr[i] = prop[i].clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\tprops = this.actions;\r\n\t\tfor (let key in props) {\r\n\t\t\tlet prop = props[key];\r\n\t\t\tif (prop instanceof Action) {\r\n\t\t\t\tactions[key] = prop.clone();\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\treturn new Screen(this.getSolutionId(), newObj);\r\n\t}\r\n}\r\n\nclass Widget extends Node {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tget rootType() {\r\n\t\treturn \"Widget\";\r\n\t}\r\n\r\n\tfromObject(objData) {\r\n\t\tsuper.fromObject(objData);\r\n\t\tif (!objData) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst solutionId = this.getSolutionId();\r\n\t\tthis.widgets = {};\r\n\t\tthis._template = objData[\"_template\"] ?? null;\r\n\r\n\t\tconst props = objData[\"properties\"] || {};\r\n\t\tconst actions = objData[\"actions\"] || {};\r\n\t\tconst widgets = objData[\"widgets\"] || {};\r\n\r\n\t\tif (this.isComponent()) {\r\n\t\t\t// Set this property before getting the schema, otherwise component exposed schema would not be loaded\r\n\t\t\tthis.setProperty(\"component\", props[\"component\"]);\r\n\t\t}\r\n\r\n\t\t// Sanitize properties: only add existing properties in the schema\r\n\t\tconst propSchema = this.getPropertySchema();\r\n\t\tfor (let key in propSchema) {\r\n\t\t\tthis.removeProperty(key);\r\n\t\t}\r\n\t\tfor (let key in props) {\r\n\t\t\tif (propSchema[key]) {\r\n\t\t\t\tthis.setProperty(key, props[key]);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.warn(`Property \${key} not found in schema for type '\${this.getType()}'`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sanitize actions: only add existing actions in the schema\r\n\t\tconst actionSchema = this.getActionSchema();\r\n\t\tfor (let key in actionSchema) {\r\n\t\t\tthis.removeAction(key);\r\n\t\t}\r\n\t\tfor (let key in actions) {\r\n\t\t\tif (actionSchema[key]) {\r\n\t\t\t\tthis.setAction(key, new Action(solutionId, actions[key]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sanitize widgets: only add existing widgets in the schema\r\n\t\tconst widgetSchema = this.getWidgetSchema();\r\n\t\tfor (let key in widgetSchema) {\r\n\t\t\tthis.removeWidget(key);\r\n\t\t}\r\n\r\n\t\tfor (let key in widgets) {\r\n\t\t\tif (!widgetSchema[key]) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = widgets[key];\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tlet arr = [];\r\n\t\t\t\tthis.widgets[key] = arr;\r\n\t\t\t\tfor (let obj of value)\r\n\t\t\t\t\tarr.push(new Widget(solutionId, obj));\r\n\t\t\t} else {\r\n\t\t\t\tthis.widgets[key] = new Widget(solutionId, widgets[key]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetPropertySchema() {\r\n\t\tconst schema = {};\r\n\t\tif (this.isComponent()) {\r\n\t\t\tconst componentSchema = this._getComponentExposedSchema(this.getProperty(\"component\"), \"property\");\r\n\t\t\tObject.assign(schema, componentSchema);\r\n\t\t}\r\n\t\tObject.assign(schema, super.getPropertySchema());\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tgetActionSchema() {\r\n\t\tlet schema = super.getActionSchema();\r\n\t\tif (this.isComponent()) {\r\n\t\t\tconst componentSchema = this._getComponentExposedSchema(this.getProperty(\"component\"), \"action\");\r\n\t\t\tschema = Object.assign(schema, componentSchema);\r\n\t\t}\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tgetWidgetSchema() {\r\n\t\tlet schema = Editor.project.getSchema(this.getSolutionId()).getWidgets(this);\r\n\t\tif (this.isComponent()) {\r\n\t\t\tconst componentSchema = this._getComponentExposedSchema(this.getProperty(\"component\"), \"widget\");\r\n\t\t\tschema = Object.assign(schema, componentSchema);\r\n\t\t}\r\n\t\treturn schema;\r\n\t}\r\n\r\n\t_getComponentExposedSchema(componentId, schemaType) {\r\n\t\tif (componentId) {\r\n\t\t\tconst component = Editor.project.getComponent(componentId);\r\n\t\t\tif (component) {\r\n\t\t\t\treturn component.getExposedPropertiesOfType(schemaType);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.error(`Component '\${componentId}' not found`)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {};\r\n\t}\r\n\r\n\tgetWidgets() {\r\n\t\treturn this.widgets;\r\n\t}\r\n\r\n\tgetWidget(key) {\r\n\t\treturn this.widgets[key];\r\n\t}\r\n\r\n\tsetWidget(key, widget) {\r\n\t\tthis.widgets[key] = widget;\r\n\t}\r\n\r\n\tremoveWidget(key) {\r\n\t\tdelete this.widgets[key];\r\n\t}\r\n\r\n\tfindWidget(widgetId) {\r\n\t\tif (widgetId === this.getId())\r\n\t\t\treturn this;\r\n\t\t\r\n\t\tfor (let key in this.widgets) {\r\n\t\t\tlet value = this.widgets[key];\r\n\t\t\tif (Array.isArray(value)) {\r\n\t\t\t\tfor (let entry of value) {\r\n\t\t\t\t\tlet widget = entry.findWidget(widgetId);\r\n\t\t\t\t\tif (widget)\r\n\t\t\t\t\t\treturn widget;\r\n\t\t\t\t}\r\n\t\t\t} else if (value) {\r\n\t\t\t\tlet widget = value.findWidget(widgetId);\r\n\t\t\t\tif (widget)\r\n\t\t\t\t\treturn widget;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTemplate() {\r\n\t\treturn Editor.project.getTemplate(this._template);\r\n\t}\r\n\r\n\tsetTemplate(templateId) {\r\n\t\tthis._template = templateId;\r\n\t}\r\n\r\n\tisComponent() {\r\n\t\treturn this.getType() === \"WidgetComponent\" || this.getType() === \"PreferredSizeComponent\";\r\n\t}\r\n\r\n\tisOfType(typeName) {\r\n\t\ttypeName = typeName.replace(\"[\", \"\").replace(\"]\", \"\");\r\n\t\treturn Editor.project.getSchema(this.getSolutionId()).getWidgetInheritance(this.getType()).includes(typeName);\r\n\t}\r\n\r\n\tclone() {\r\n\t\tvar newObj = JSON.parse(stringify(this));\r\n\t\tdelete newObj[\"_id\"];\r\n\t\tconst widgets = {};\r\n\t\tnewObj[\"widgets\"] = widgets;\r\n\t\tconst actions = {};\r\n\t\tnewObj[\"actions\"] = actions;\r\n\r\n\t\tlet props = this.getWidgets();\r\n\t\tfor (let key in props) {\r\n\t\t\tlet prop = this.getWidget(key);\r\n\t\t\tif (prop instanceof Widget) {\r\n\t\t\t\twidgets[key] = prop.clone();\r\n\t\t\t} else if (Array.isArray(prop)) {\r\n\t\t\t\tlet arr = [];\r\n\t\t\t\twidgets[key] = arr;\r\n\t\t\t\tfor (let i = 0; i < prop.length; i++) {\r\n\t\t\t\t\tif (prop[i] instanceof Widget) {\r\n\t\t\t\t\t\tarr[i] = prop[i].clone();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprops = this.getActions();\r\n\t\tfor (let key in props) {\r\n\t\t\tlet prop = props[key];\r\n\t\t\tif (prop instanceof Action) {\r\n\t\t\t\tactions[key] = prop.clone();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.createInstanceFromMap(this.getSolutionId(), newObj);\r\n\t}\r\n\r\n\tcreateInstanceFromMap(solutionId, objData) {\r\n\t\treturn new Widget(solutionId, objData);\r\n\t}\r\n\r\n\tstatic create(solutionId, type) {\r\n\t\treturn new Widget(solutionId, { _type: type });\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass WidgetDerivative extends Widget {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t\tthis.isRootNode = true;\r\n\t\tthis._folder = this._folder ?? null;\r\n\t\tthis.name = this.name ?? null;\r\n\t}\r\n\r\n\tfromObject(props) {\r\n\t\tsuper.fromObject(props);\r\n\t\tif (props) {\r\n\t\t\tthis._folder = props[\"_folder\"];\r\n\t\t\tthis.name = props[\"name\"];\r\n\t\t}\r\n\t}\r\n\r\n\tgetFolder() {\r\n\t\treturn this._folder;\r\n\t}\r\n\r\n\tsetFolder(value) {\r\n\t\tthis._folder = value;\r\n\t}\r\n\r\n\tgetName() {\r\n\t\treturn this.name;\r\n\t}\r\n\r\n\tsetName(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Template extends WidgetDerivative {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tcreateInstanceFromMap(solutionId, objData) {\r\n\t\treturn new Template(solutionId, objData);\r\n\t}\r\n\r\n\tsetTemplate(templateId) {\r\n\t\tif (templateId !== this.getId()) {\r\n\t\t\tsuper.setTemplate(templateId);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic create(solutionId, type) {\r\n\t\treturn new Template(solutionId, { _type: type });\r\n\t}\r\n}\r\n\r\n\r\n\r\nclass Component extends WidgetDerivative {\r\n\tconstructor(solution, nodeData) {\r\n\t\tsuper(solution, nodeData);\r\n\t}\r\n\r\n\tfromObject(data) {\r\n\t\tsuper.fromObject(data);\r\n\t\tif (data) {\r\n\t\t\tthis.exposedProperties = data[\"exposedProperties\"] || {};\r\n\t\t}\r\n\t}\r\n\r\n\tcreateInstanceFromMap(solutionId, objData) {\r\n\t\treturn new Component(solutionId, objData);\r\n\t}\r\n\r\n\tgetExposedPropertiesOfType(type) {\r\n\t\tconst schema = {};\r\n\t\t// format: <widgetId>.<type(action, property, widget)>.key\r\n\t\tfor (let key in this.exposedProperties) {\r\n\t\t\tlet val = this.exposedProperties[key];\r\n\t\t\tif (val.split(\".\")[1] !== type) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet widgetId = val.split(\".\")[0];\r\n\t\t\tlet widget = this.findWidget(widgetId);\r\n\t\t\tlet widgetPropertyKey = val.replace(`\${widgetId}.\${type}.`, \"\");\r\n\r\n\t\t\tlet childSchema;\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase \"action\":\r\n\t\t\t\t\tchildSchema = widget.getActionSchema();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"property\":\r\n\t\t\t\t\tchildSchema = widget.getPropertySchema();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"widget\":\r\n\t\t\t\t\tchildSchema = widget.getWidgetSchema();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (childSchema[widgetPropertyKey]) {\r\n\t\t\t\tschema[key] = childSchema[widgetPropertyKey];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn schema;\r\n\t}\r\n\r\n\tstatic create(solutionId, type) {\r\n\t\treturn new Component(solutionId, { _type: type });\r\n\t}\r\n}\r\n\nclass Editor {\r\n\tstatic schema = null;\r\n\tstatic _clientSchema = null;\r\n\tstatic project = null;\r\n\tstatic editMode = false;\r\n\tstatic selectedNode;\r\n\tstatic selectedRootNode;\r\n\tstatic solutionPanel = new SolutionPanel();\r\n\tstatic templatePanel = new TemplatePanel();\r\n\tstatic componentPanel = new ComponentPanel();\r\n\tstatic typePanel = new TypePanel();\r\n\tstatic widgetPanel = new WidgetPanel();\r\n\tstatic screenPanel = new ScreenPanel();\r\n\tstatic navigationPanel = new NavigationPanel();\r\n\tstatic flowPanel = new FlowPanel();\r\n\tstatic propertyPanel = new PropertyPanel();\r\n\t// this.actionPanel = new ActionPanel();\r\n\tstatic testPanel = new TestPanel();\r\n\tstatic jsonPanel = new JsonPanel();\r\n\tstatic consolePanel = new ConsolePanel();\r\n\tstatic panels = [Editor.solutionPanel, Editor.templatePanel, Editor.componentPanel, Editor.typePanel, Editor.widgetPanel, Editor.screenPanel, Editor.navigationPanel,\r\n\t\tEditor.flowPanel, Editor.propertyPanel, /*Editor.actionPanel,*/ Editor.testPanel, Editor.jsonPanel, Editor.consolePanel];\r\n\r\n\tconstructor() {\r\n\t}\r\n\r\n\tstatic _loadSolution() {\r\n\t\tlet needsConfig = false;\r\n\t\tlet filePathList = [];\r\n\r\n\t\tconst updateAbsolutePath = () => {\r\n\t\t\tneedsConfig = false;\r\n\t\t\tfilePathList = [];\r\n\t\t\tfor (let i = 0; i < this._clientSchema.length; i++) {\r\n\t\t\t\tlet solution = this._clientSchema[i];\r\n\t\t\t\tif (solution.filePath) {\r\n\t\t\t\t\tlet absolutePath = this._getSolutionAbsolutePath(solution);\r\n\t\t\t\t\tif (!absolutePath) {\r\n\t\t\t\t\t\tif (i === this._clientSchema.length - 1) {\r\n\t\t\t\t\t\t\tabsolutePath = solution.filePath;\r\n\t\t\t\t\t\t\twindow.localStorage.setItem(this._getSolutionAbsolutePathKey(solution), absolutePath);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tneedsConfig = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsolution.absolutePath = absolutePath;\r\n\t\t\t\t\tfilePathList.push(absolutePath);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tconst loadFunction = async () => {\r\n\t\t\tconst solutionsData = await (await fetch(\"loadSolutions\", {\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tbody: stringify(filePathList)\r\n\t\t\t})).json();\r\n\r\n\t\t\tfor (let solution of this._clientSchema) {\r\n\t\t\t\tsolution.data = solutionsData.find(d => d.path === solution.absolutePath)?.data;\r\n\t\t\t}\r\n\r\n\t\t\tthis.project = new Project();\r\n\t\t\tthis.project.build(this._clientSchema);\r\n\t\t\tthis.populate();\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tupdateAbsolutePath();\r\n\t\tif (needsConfig) {\r\n\t\t\tconst tailFunction = () => {\r\n\t\t\t\tupdateAbsolutePath();\r\n\t\t\t\tif (needsConfig) {\r\n\t\t\t\t\tshowModalError(\"Error\", \"You must specify the path to all Solutions files.\");\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tloadFunction();\r\n\t\t\t\treturn true;\r\n\t\t\t};\r\n\r\n\t\t\tconst projectData = [];\r\n\t\t\tfor (let schema of this._clientSchema) {\r\n\t\t\t\tprojectData.push({\r\n\t\t\t\t\tname: schema.name,\r\n\t\t\t\t\tfilePath: schema.filePath,\r\n\t\t\t\t\tschemaStats: {\r\n\t\t\t\t\t\twidgets: Object.keys(schema.widgets).length,\r\n\t\t\t\t\t\tactions: Object.keys(schema.actions).length,\r\n\t\t\t\t\t\tproperties: Object.keys(schema.properties).length,\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tconst form = this._buildSettingsForm(projectData);\r\n\t\t\tshowModalForm(\"Missing settings\", form, tailFunction, false);\r\n\t\t} else {\r\n\t\t\tloadFunction();\r\n\t\t}\r\n\t}\r\n\r\n\tstatic populate() {\r\n\t\tconst topSolution = this.project.getTopSolution();\r\n\t\tdocument.getElementById(\"toolbar-solution-name\").innerHTML = topSolution.name;\r\n\r\n\t\tconst environmentSelect = document.getElementById(\"environmentSelect\");\r\n\t\tenvironmentSelect.innerHTML = \"\";\r\n\t\tenvironmentSelect.onchange = () => this.callServer(\"setEnvironment\", environmentSelect.value);\r\n\t\tfor (let environment of topSolution.environmentData.environments) {\r\n\t\t\tconst option = document.createElement(\"option\");\r\n\t\t\toption.value = environment;\r\n\t\t\toption.innerHTML = environment;\r\n\t\t\tenvironmentSelect.appendChild(option);\r\n\t\t}\r\n\r\n\t\tconst languageSelect = document.getElementById(\"languageSelect\");\r\n\t\tlanguageSelect.innerHTML = \"\";\r\n\t\tlanguageSelect.onchange = () => this.callServer(\"setLanguage\", languageSelect.value);\r\n\t\tfor (let language of topSolution.stringResources.languages) {\r\n\t\t\tconst option = document.createElement(\"option\");\r\n\t\t\toption.value = language;\r\n\t\t\toption.innerHTML = language;\r\n\t\t\tlanguageSelect.appendChild(option);\r\n\t\t}\r\n\r\n\t\tthis.selectedNode = null;\r\n\t\tthis.selectedRootNode = null;\r\n\r\n\t\tfor (let panel of this.panels) {\r\n\t\t\tpanel.populate();\r\n\t\t}\r\n\t\tthis.sendSolutionToClient();\r\n\t}\r\n\r\n\tstatic showSettings() {\r\n\t\tconst projectData = [];\r\n\t\tfor (let solution of this.project.solutions) {\r\n\t\t\tprojectData.push({\r\n\t\t\t\tid: solution.id,\r\n\t\t\t\tname: solution.name,\r\n\t\t\t\tfilePath: solution.filePath,\r\n\t\t\t\tmodel: solution,\r\n\t\t\t\tschemaStats: this.project.getSchemaStats(solution.id),\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst form = this._buildSettingsForm(projectData);\r\n\t\tshowModalForm(\"Settings and statistics\", form);\r\n\t}\r\n\r\n\tstatic _buildSettingsForm(projectData) {\r\n\t\tconst rootElement = document.createElement(\"div\");\r\n\r\n\t\tconst buildPathInput = (sol) => {\r\n\t\t\tconst input = document.createElement(\"input\");\r\n\t\t\tinput.classList.add(\"modal-form-content-input\");\r\n\t\t\tinput.placeholder = sol.filePath;\r\n\t\t\tinput.value = sol.absolutePath ?? this._getSolutionAbsolutePath(sol) ?? \"\";\r\n\t\t\tinput.onchange = () => {\r\n\t\t\t\tsol.absolutePath = input.value;\r\n\t\t\t\twindow.localStorage.setItem(this._getSolutionAbsolutePathKey(sol), input.value);\r\n\t\t\t}\r\n\t\t\treturn input;\r\n\t\t};\r\n\r\n\t\tconst buildlandingScreenInput = (sol) => {\r\n\t\t\tconst input = document.createElement(\"select\");\r\n\t\t\tlet option = document.createElement(\"option\");\r\n\t\t\toption.setAttribute(\"value\", null);\r\n\t\t\tinput.appendChild(option);\r\n\r\n\t\t\tfor (const screen of Editor.project.getScreens(sol.id)) {\r\n\t\t\t\toption = document.createElement(\"option\");\r\n\t\t\t\toption.setAttribute(\"value\", screen.getId());\r\n\t\t\t\toption.innerHTML = screen.getName();\r\n\t\t\t\tinput.appendChild(option);\r\n\t\t\t}\r\n\r\n\t\t\tinput.value = sol.landingScreen;\r\n\t\t\tinput.onchange = () => {\r\n\t\t\t\tsol.landingScreen = input.value;\r\n\t\t\t};\r\n\t\t\treturn input;\r\n\t\t};\r\n\r\n\t\tlet spacer;\r\n\t\tfor (let solution of projectData) {\r\n\t\t\tif (solution.name === \"Lowder\") {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (spacer) {\r\n\t\t\t\trootElement.appendChild(spacer);\r\n\t\t\t}\r\n\r\n\t\t\tlet model = solution.model;\r\n\t\t\tlet schemaStats = solution.schemaStats;\r\n\r\n\t\t\tlet nameElement = document.createElement(\"label\");\r\n\t\t\tnameElement.innerHTML = solution.name;\r\n\t\t\trootElement.appendChild(nameElement);\r\n\r\n\t\t\tspacer = document.createElement(\"div\");\r\n\t\t\tspacer.style.height = \"5px\";\r\n\t\t\trootElement.appendChild(spacer);\r\n\r\n\t\t\tlet table = document.createElement(\"table\");\r\n\t\t\trootElement.appendChild(table);\r\n\r\n\t\t\tif (model) {\r\n\t\t\t\tlet label = document.createElement(\"td\");\r\n\t\t\t\tlabel.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tlabel.innerHTML = \"Model: \";\r\n\t\t\t\tlet counter = document.createElement(\"td\");\r\n\t\t\t\tcounter.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tcounter.innerHTML = `\${model.screens?.length ?? 0} Screens, \${model.components?.length ?? 0} Components, \${model.templates?.length ?? 0} Templates`;\r\n\t\t\t\tlet row = document.createElement(\"tr\");\r\n\t\t\t\trow.appendChild(label);\r\n\t\t\t\trow.appendChild(counter);\r\n\t\t\t\ttable.appendChild(row);\r\n\t\t\t}\r\n\r\n\t\t\tif (schemaStats) {\r\n\t\t\t\tlet label = document.createElement(\"td\");\r\n\t\t\t\tlabel.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tlabel.innerHTML = \"Schema: \";\r\n\t\t\t\tlet counter = document.createElement(\"td\");\r\n\t\t\t\tcounter.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tcounter.innerHTML = `\${schemaStats.widgets} Widgets, \${schemaStats.actions} Actions, \${schemaStats.properties} Properties`;\r\n\t\t\t\tlet row = document.createElement(\"tr\");\r\n\t\t\t\trow.appendChild(label);\r\n\t\t\t\trow.appendChild(counter);\r\n\t\t\t\ttable.appendChild(row);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (this.project) {\r\n\t\t\t\tlet label = document.createElement(\"td\");\r\n\t\t\t\tlabel.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tlabel.innerHTML = \"Landing Screen: \";\r\n\t\t\t\tlet inputTd = document.createElement(\"td\");\r\n\t\t\t\tinputTd.appendChild(buildlandingScreenInput(model));\r\n\t\t\t\tlet row = document.createElement(\"tr\");\r\n\t\t\t\trow.appendChild(label);\r\n\t\t\t\trow.appendChild(inputTd);\r\n\t\t\t\ttable.appendChild(row);\r\n\t\t\t}\r\n\r\n\t\t\tif (solution.filePath) {\r\n\t\t\t\tlet label = document.createElement(\"td\");\r\n\t\t\t\tlabel.classList.add(\"modal-form-content-label\");\r\n\t\t\t\tlabel.innerHTML = \"Model file: \";\r\n\t\t\t\tlet inputTd = document.createElement(\"td\");\r\n\t\t\t\tinputTd.appendChild(buildPathInput(solution));\r\n\t\t\t\tlet row = document.createElement(\"tr\");\r\n\t\t\t\trow.appendChild(label);\r\n\t\t\t\trow.appendChild(inputTd);\r\n\t\t\t\ttable.appendChild(row);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tspacer = document.createElement(\"div\");\r\n\t\t\tspacer.style.height = \"20px\";\r\n\t\t}\r\n\r\n\t\treturn rootElement;\r\n\t}\r\n\r\n\tstatic async saveSolution() {\r\n\t\tconst dataToSave = [];\r\n\t\tfor (let solution of this.project.solutions) {\r\n\t\t\tdataToSave.push({\r\n\t\t\t\tpath: this._getSolutionAbsolutePath(solution),\r\n\t\t\t\tdata: solution,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tawait fetch(\"saveSolutions\", {\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: stringify(dataToSave)\r\n\t\t});\r\n\t\tthis.sendSolutionToClient();\r\n\t}\r\n\r\n\tstatic editEnvironmentVariables() {\r\n\t\tif (!this.project) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet spacer;\r\n\t\tconst tableHolder = document.createElement(\"column\");\r\n\t\tfor (let solution of this.project.solutions) {\r\n\t\t\tlet environmentVariables = solution.environmentData;\r\n\r\n\t\t\tif (spacer) {\r\n\t\t\t\ttableHolder.appendChild(spacer);\r\n\t\t\t}\r\n\r\n\t\t\tlet nameElement = document.createElement(\"label\");\r\n\t\t\tnameElement.innerHTML = solution.name;\r\n\t\t\ttableHolder.appendChild(nameElement);\r\n\r\n\t\t\tlet table = buildTable(environmentVariables.environments, environmentVariables.keys, environmentVariables.values);\r\n\t\t\ttableHolder.appendChild(table);\r\n\r\n\t\t\tspacer = document.createElement(\"div\");\r\n\t\t\tspacer.style.height = \"40px\";\r\n\t\t}\r\n\t\tshowModalForm(\"Environment Variables\", tableHolder, this.sendSolutionToClient.bind(this));\r\n\t}\r\n\r\n\tstatic editStringResources() {\r\n\t\tif (!this.project) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet spacer;\r\n\t\tconst tableHolder = document.createElement(\"column\");\r\n\t\tfor (let solution of this.project.solutions) {\r\n\t\t\tlet stringResources = solution.stringResources;\r\n\r\n\t\t\tif (spacer) {\r\n\t\t\t\ttableHolder.appendChild(spacer);\r\n\t\t\t}\r\n\r\n\t\t\tlet nameElement = document.createElement(\"label\");\r\n\t\t\tnameElement.innerHTML = solution.name;\r\n\t\t\ttableHolder.appendChild(nameElement);\r\n\r\n\t\t\tlet table = buildTable(stringResources.languages, stringResources.keys, stringResources.values);\r\n\t\t\ttableHolder.appendChild(table);\r\n\r\n\t\t\tspacer = document.createElement(\"div\");\r\n\t\t\tspacer.style.height = \"40px\";\r\n\t\t}\r\n\t\tshowModalForm(\"String Resources\", tableHolder, this.sendSolutionToClient.bind(this));\r\n\t}\r\n\r\n\tstatic importSwagger() {\r\n\t\tconst form = document.createElement(\"table\");\r\n\r\n\t\tlet label = document.createElement(\"td\");\r\n\t\tlabel.className = \"modal-form-content-label\";\r\n\t\tlabel.innerHTML = \"Solution:\";\r\n\t\t// TODO: options instead of input\r\n\t\tconst solutionInput = document.createElement(\"select\");\r\n\t\tsolutionInput.className = \"modal-form-content-input\";\r\n\t\tfor (let solution of this.project.solutions) {\r\n\t\t\tconst option = document.createElement(\"option\");\r\n\t\t\toption.value = solution.id;\r\n\t\t\toption.innerHTML = solution.name;\r\n\t\t\tsolutionInput.appendChild(option);\r\n\t\t}\r\n\t\tlet row = document.createElement(\"tr\");\r\n\t\trow.appendChild(label);\r\n\t\trow.appendChild(solutionInput);\r\n\t\tform.appendChild(row);\r\n\r\n\t\tlabel = document.createElement(\"td\");\r\n\t\tlabel.className = \"modal-form-content-label\";\r\n\t\tlabel.innerHTML = \"Environment variable:\";\r\n\t\t// TODO: options instead of input\r\n\t\tconst varInput = document.createElement(\"input\");\r\n\t\tvarInput.placeholder = \"eg: rest_api_uri\";\r\n\t\tvarInput.className = \"modal-form-content-input\";\r\n\t\trow = document.createElement(\"tr\");\r\n\t\trow.appendChild(label);\r\n\t\trow.appendChild(varInput);\r\n\t\tform.appendChild(row);\r\n\r\n\t\tlabel = document.createElement(\"td\");\r\n\t\tlabel.className = \"modal-form-content-label\";\r\n\t\tlabel.innerHTML = \"From Url:\";\r\n\t\tconst urlInput = document.createElement(\"input\");\r\n\t\turlInput.className = \"modal-form-content-input\";\r\n\t\turlInput.placeholder = \"eg: http://some.address/swagger/v1/swagger.json\";\r\n\t\trow = document.createElement(\"tr\");\r\n\t\trow.appendChild(label);\r\n\t\trow.appendChild(urlInput);\r\n\t\tform.appendChild(row);\r\n\r\n\t\tlabel = document.createElement(\"td\");\r\n\t\tlabel.className = \"modal-form-content-label\";\r\n\t\tlabel.innerHTML = \"From File:\";\r\n\t\tconst fileInput = document.createElement(\"input\");\r\n\t\tfileInput.className = \"modal-form-content-input\";\r\n\t\tfileInput.setAttribute(\"type\", \"file\");\r\n\t\tfileInput.setAttribute(\"accept\", \".json\");\r\n\t\tfileInput.placeholder = \"Pick a file\";\r\n\t\trow = document.createElement(\"tr\");\r\n\t\trow.appendChild(label);\r\n\t\trow.appendChild(fileInput);\r\n\t\tform.appendChild(row);\r\n\r\n\t\tshowModalForm(\"Import from Swagger\", form, async () => {\r\n\t\t\tif (!solutionInput.value || !varInput.value || (!urlInput.value && !fileInput.files.length > 0)) {\r\n\t\t\t\tshowModalError(\"Error\", \"You're missing some inputs.\");\r\n\t\t\t\treturn false;\r\n\t\t\t} else {\r\n\t\t\t\tif (fileInput.files.length > 0) {\r\n\t\t\t\t\tconst file = fileInput.files[0];\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tEditor.internalImportSwagger(solutionInput.value, varInput.value, JSON.parse(await file.text()));\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tshowModalError(\"Error importing Swagger from file.\", e);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet response;\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tresponse = await fetch(urlInput.value, { method: \"GET\" });\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tshowModalError(\"Error importing Swagger from url\", e);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\t\tEditor.internalImportSwagger(solutionInput.value, varInput.value, await response.json());\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshowModalError(\"Error importing Swagger from url\", response.statusText);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tstatic internalImportSwagger(solutionId, uriVar, data) {\r\n\t\tconst paths = data.paths;\r\n\t\tconst models = data.components?.schemas;\r\n\t\tconst solution = this.project.getSolution(solutionId);\r\n\t\tconst existingTypes = solution.types;\r\n\t\tconst existingFolders = solution.folders;\r\n\r\n\t\tif (models) {\r\n\t\t\tlet folder = existingFolders.find(m => m.getName() === \"Models\");\r\n\t\t\tif (!folder) {\r\n\t\t\t\tfolder = solution.createFolder();\r\n\t\t\t\tfolder.setName(\"Models\");\r\n\t\t\t}\r\n\r\n\t\t\tfor (let name in models) {\r\n\t\t\t\tlet model = existingTypes.find(m => m.getName() === name);\r\n\t\t\t\tif (!model) {\r\n\t\t\t\t\tmodel = solution.createType(\"KModel\");\r\n\t\t\t\t\tmodel.setName(name);\r\n\t\t\t\t\tmodel.setFolder(folder.getId());\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet props = models[name].properties;\r\n\t\t\t\tfor (let key in props) {\r\n\t\t\t\t\t// TODO: convert Swagger type to Lowder type\r\n\t\t\t\t\tmodel.setProperty(key, props[key].type);\r\n\t\t\t\t}\r\n\t\t\t\tEditor.onNodeCreated(\"editor\", model);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (paths) {\r\n\t\t\tfor (let pathName in paths) {\r\n\t\t\t\tlet verbs = paths[pathName];\r\n\t\t\t\tlet fixedPathName = pathName.indexOf(\"/\") === 0 ? pathName.substring(1) : pathName;\r\n\r\n\t\t\t\tfor (let verb in verbs) {\r\n\t\t\t\t\tlet requestName = verb + \" \" + fixedPathName;\r\n\t\t\t\t\tlet request = existingTypes.find(m => m.getName() === requestName);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!request) {\r\n\t\t\t\t\t\trequest = solution.createType(\"KRequest\");\r\n\t\t\t\t\t\trequest.setName(requestName);\r\n\r\n\t\t\t\t\t\tlet folderName = fixedPathName;\r\n\t\t\t\t\t\tif (verbs[verb].tags && verbs[verb].tags.length > 0) {\r\n\t\t\t\t\t\t\tfolderName = verbs[verb].tags[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet folder = existingFolders.find(m => m.getName() === folderName);\r\n\t\t\t\t\t\tif (!folder) {\r\n\t\t\t\t\t\t\tfolder = solution.createFolder();\r\n\t\t\t\t\t\t\tfolder.setName(folderName);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trequest.setFolder(folder.getId());\r\n\t\t\t\t\t}\r\n\t\t\t\t\trequest.setProperty(\"url\", \"\${env.\" + uriVar + \"}\");\r\n\t\t\t\t\trequest.setProperty(\"path\", pathName);\r\n\t\t\t\t\trequest.setProperty(\"method\", verb);\r\n\r\n\t\t\t\t\tlet queryParams = verbs[verb].parameters;\r\n\t\t\t\t\tif (queryParams && queryParams.length > 0) {\r\n\t\t\t\t\t\tlet pathParamsModelName = requestName + \" Params\";\r\n\t\t\t\t\t\tlet queryParamsModelName = requestName + \" Query\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (let parameter of queryParams) {\r\n\t\t\t\t\t\t\tswitch (parameter[\"in\"]) {\r\n\t\t\t\t\t\t\t\tcase \"path\":\r\n\t\t\t\t\t\t\t\t\tlet pathParamsModel = existingTypes.find(m => m.getName() === pathParamsModelName);\r\n\t\t\t\t\t\t\t\t\tif (!pathParamsModel) {\r\n\t\t\t\t\t\t\t\t\t\tpathParamsModel = solution.createType(\"KModel\");\r\n\t\t\t\t\t\t\t\t\t\tpathParamsModel.setName(pathParamsModelName);\r\n\t\t\t\t\t\t\t\t\t\tpathParamsModel.setFolder(request.getFolder());\r\n\t\t\t\t\t\t\t\t\t\trequest.setProperty(\"pathParameters\", { \"_type\": pathParamsModel.getId() });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tpathParamsModel.setProperty(parameter[\"name\"], \"String\");\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase \"query\":\r\n\t\t\t\t\t\t\t\t\tlet queryParamsModel = existingTypes.find(m => m.getName() === queryParamsModelName);\r\n\t\t\t\t\t\t\t\t\tif (!queryParamsModel) {\r\n\t\t\t\t\t\t\t\t\t\tqueryParamsModel = solution.createType(\"KModel\");\r\n\t\t\t\t\t\t\t\t\t\tqueryParamsModel.setName(queryParamsModelName);\r\n\t\t\t\t\t\t\t\t\t\tqueryParamsModel.setFolder(request.getFolder());\r\n\t\t\t\t\t\t\t\t\t\trequest.setProperty(\"queryArgs\", { \"_type\": queryParamsModel.getId() });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tqueryParamsModel.setProperty(parameter[\"name\"], \"String\");\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet requestBody = verbs[verb].requestBody?.content;\r\n\t\t\t\t\tif (requestBody) {\r\n\t\t\t\t\t\tfor (let key in requestBody) {\r\n\t\t\t\t\t\t\tlet schema = requestBody[key]?.schema;\r\n\t\t\t\t\t\t\tif (schema[\"\$ref\"]) {\r\n\t\t\t\t\t\t\t\tlet parts = schema[\"\$ref\"].split(\"/\");\r\n\t\t\t\t\t\t\t\tlet modelName = parts[parts.length -1];\r\n\t\t\t\t\t\t\t\tlet model = existingTypes.find(m => m.getName() === modelName);\r\n\t\t\t\t\t\t\t\tif (model) {\r\n\t\t\t\t\t\t\t\t\trequest.setProperty(\"body\", { \"_type\": model.getId() });\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tEditor.onNodeCreated(\"editor\", request);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstatic showHelp() {\r\n\t\tconst column = document.createElement(\"column\");\r\n\t\tcolumn.classList.add(\"modal-form-content-links\");\r\n\r\n\t\tconst editor = document.createElement(\"a\");\r\n\t\teditor.setAttribute(\"href\", \"https://github.com/HCaseira/lowder_flutter/wiki/About-the-Editor\");\r\n\t\teditor.setAttribute(\"target\", \"_blank\");\r\n\t\teditor.innerHTML = \"About the Editor\";\r\n\t\tcolumn.appendChild(editor);\r\n\r\n\t\tconst wiki = document.createElement(\"a\");\r\n\t\twiki.setAttribute(\"href\", \"https://github.com/HCaseira/lowder_flutter/wiki/\");\r\n\t\twiki.setAttribute(\"target\", \"_blank\");\r\n\t\twiki.innerHTML = \"Lowder Wiki\";\r\n\t\tcolumn.appendChild(wiki);\r\n\r\n\t\tconst api = document.createElement(\"a\");\r\n\t\tapi.setAttribute(\"href\", \"https://pub.dev/documentation/lowder/latest/\");\r\n\t\tapi.setAttribute(\"target\", \"_blank\");\r\n\t\tapi.innerHTML = \"Lowder API reference\";\r\n\t\tcolumn.appendChild(api);\r\n\r\n\t\tconst flutter = document.createElement(\"a\");\r\n\t\tflutter.setAttribute(\"href\", \"https://docs.flutter.dev/ui/widgets\");\r\n\t\tflutter.setAttribute(\"target\", \"_blank\");\r\n\t\tflutter.innerHTML = \"Flutter Widget catalog\";\r\n\t\tcolumn.appendChild(flutter);\r\n\r\n\t\tshowModalForm(\"Helpful Links\", column);\r\n\t}\r\n\r\n\tstatic selectNode(node) {\r\n\t\tthis.selectedNode = node;\r\n\t\tif (node.isRootNode) {\r\n\t\t\tthis.selectedRootNode = node;\r\n\t\t}\r\n\t\tif (node instanceof Screen) {\r\n\t\t\tthis.callServer(\"loadScreen\", {\r\n\t\t\t\tid: node.getId(),\r\n\t\t\t\tstate: this.project.getTestData(node.getId()),\r\n\t\t\t});\r\n\t\t} else if (node instanceof Component) {\r\n\t\t\tthis.callServer(\"loadComponent\", node.getId());\r\n\t\t} else if (node instanceof Widget) {\r\n\t\t\tthis.callServer(\"editorSelectWidget\", node.getId());\r\n\t\t} if (node instanceof Solution) {\r\n\t\t}\r\n\r\n\t\tfor (let panel of this.panels) {\r\n\t\t\tpanel.selectNode(node);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic onNodeCreated(origin, node) {\r\n\t\tfor (let panel of this.panels) {\r\n\t\t\tpanel.onNodeCreated(origin, node, this.selectedRootNode);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic onNodeUpdated(origin, node) {\r\n\t\tfor (let panel of this.panels) {\r\n\t\t\tpanel.onNodeUpdated(origin, node, this.selectedRootNode);\r\n\t\t}\r\n\r\n\t\tif (node instanceof Template) {\r\n\t\t\tthis.callServer(\"template\", node);\r\n\t\t} else if (node instanceof Component) {\r\n\t\t\tthis.callServer(\"component\", node);\r\n\t\t} else if (node instanceof TypeNode) {\r\n\t\t\tthis.callServer(\"request\", node);\r\n\t\t} else if (node instanceof Screen) {\r\n\t\t\tthis.callServer(\"screen\", node);\r\n\t\t} else if (this.selectedRootNode && (node instanceof Widget || node instanceof Action)) {\r\n\t\t\tif (this.selectedRootNode instanceof Screen) {\r\n\t\t\t\tthis.callServer(\"screen\", this.selectedRootNode);\r\n\t\t\t} else if (this.selectedRootNode instanceof Component) {\r\n\t\t\t\tthis.callServer(\"component\", this.selectedRootNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstatic onNodeDeleted(origin, node) {\r\n\t\tfor (let panel of this.panels) {\r\n\t\t\tpanel.onNodeDeleted(origin, node, this.selectedRootNode);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async setEditMode(v) {\r\n\t\tthis.editMode = v === \"true\";\r\n\t\tawait this.callServer(\"editMode\", this.editMode);\r\n\t\t// await sleep(2000);\r\n\t\t// await this.callServer(\"editorSelectWidget\", this.selectedNode);\r\n\t}\r\n\r\n\tstatic sendSolutionToClient() {\r\n\t\tif (this.project) {\r\n\t\t\tthis.callServer(\"solution\", {\r\n\t\t\t\tsolutions: [...this.project.solutions].reverse(),\r\n\t\t\t\tenvironment: document.getElementById(\"environmentSelect\").value,\r\n\t\t\t\tlanguage: document.getElementById(\"languageSelect\").value,\r\n\t\t\t\teditMode: this.editMode,\r\n\t\t\t\tselectedNode: this.selectedNode?.getId(),\r\n\t\t\t\tstate: this.selectedNode ? this.project.getTestData(this.selectedNode?.getId()) : null\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tstatic async callServer(command, value) {\r\n\t\tvar data = {\r\n\t\t\tdataType: command,\r\n\t\t\tdata: value\r\n\t\t};\r\n\r\n\t\treturn await fetch(\"editor\", {\r\n\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: stringify(data)\r\n\t\t});\r\n\t}\r\n\r\n\tstatic async init() {\r\n\t\tthis.initPoll();\r\n\t\t// Wait for the client to connect before letting any action\r\n\t\tconst spinner = document.createElement(\"div\");\r\n\t\tspinner.className = \"loader\";\r\n\t\tconst spinnerMessage = document.createElement(\"span\");\r\n\t\tspinnerMessage.innerHTML = \"Waiting for Flutter client to start.\";\r\n\t\tconst spinnerHolder = document.createElement(\"column\");\r\n\t\tspinnerHolder.className = \"spinner-holder\";\r\n\t\tspinnerHolder.appendChild(spinner);\r\n\t\tspinnerHolder.appendChild(spinnerMessage);\r\n\t\tconst dismissFunction = showModalForm(null, spinnerHolder, null, false);\r\n\r\n\t\tconst loopFunction = () => {\r\n\t\t\tif (this._clientSchema) {\r\n\t\t\t\tdismissFunction();\r\n\t\t\t\tthis._loadSolution();\r\n\t\t\t\t//this.showInitialActions();\r\n\t\t\t} else {\r\n\t\t\t\tthis.callServer(\"getSchema\");\r\n\t\t\t\twindow.setTimeout(loopFunction, 1000);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\twindow.setTimeout(loopFunction, 100);\r\n\t}\r\n\r\n\tstatic async initPoll() {\r\n\t\twhile (true) {\r\n\t\t\ttry {\r\n\t\t\t\tlet response = await fetch(\"editor\", {\r\n\t\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\t\tmethod: \"GET\"\r\n\t\t\t\t});\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tthis.handleClientMessage(await response.json());\r\n\t\t\t\t}\r\n\t\t\t\tawait sleep(100);\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tconsole.error(`Error calling Lowder Server: \${e}`);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstatic handleClientMessage(message) {\r\n\t\tswitch (message.dataType) {\r\n\t\t\tcase \"log\":\r\n\t\t\t\tEditor.consolePanel.onLog(message.data);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"clientSelectWidget\":\r\n\t\t\t\tconst node = this.project.findWidget(message.data);\r\n\t\t\t\tif (node) {\r\n\t\t\t\t\tthis.selectNode(node);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"clientSchema\":\r\n\t\t\t\tif (this.project) {\r\n\t\t\t\t\tthis.project.updateSchema(message.data);\r\n\t\t\t\t\tthis.sendSolutionToClient();\r\n\t\t\t\t} else if (!this._clientSchema) {\r\n\t\t\t\t\tthis._clientSchema = message.data;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"clientLoaded\":\r\n\t\t\t\tthis.sendSolutionToClient();\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic clipboardPut(obj) {\r\n\t\tthis.storedObject = obj;\r\n\t}\r\n\r\n\tstatic clipboardGet() {\r\n\t\treturn this.storedObject;\r\n\t}\r\n\r\n\tstatic logInfo(message, node, parentNode, rootNode) {\r\n\t\tthis._log(\"info\", message, node, parentNode, rootNode);\r\n\t}\r\n\r\n\tstatic logWarn(message, node, parentNode, rootNode) {\r\n\t\tthis._log(\"warn\", message, node, parentNode, rootNode);\r\n\t}\r\n\r\n\tstatic logError(message, node, parentNode, rootNode, error, stackTrace) {\r\n\t\tthis._log(\"error\", message, node, parentNode, rootNode, error, stackTrace);\r\n\t}\r\n\r\n\tstatic _log(type, message, node, parentNode, rootNode, error, stackTrace) {\r\n\t\tconst dt = new Date();\r\n\t\tconst dateTime = `\${dt.getFullYear()}-\${`\${dt.getMonth()}`.padStart(2, \"0\")}-\${`\${dt.getDay()}`.padStart(2, \"0\")} \${`\${dt.getHours()}`.padStart(2, \"0\")}:\${`\${dt.getMinutes()}`.padStart(2, \"0\")}:\${`\${dt.getSeconds()}`.padStart(2, \"0\")}.\${`\${dt.getMilliseconds()}`.padStart(3, \"0\")}`;\r\n\t\trootNode = rootNode || this.selectedRootNode;\r\n\r\n\t\tconst context = {};\r\n\t\tif (node) {\r\n\t\t\tcontext[\"node\"] = {\r\n\t\t\t\tid: node.getId(),\r\n\t\t\t\ttype: node.getType(),\r\n\t\t\t\tname: node.getName(),\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (parentNode) {\r\n\t\t\tcontext[\"parentNode\"] = {\r\n\t\t\t\tid: parentNode.getId(),\r\n\t\t\t\ttype: parentNode.getType(),\r\n\t\t\t\tname: parentNode.getName(),\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (rootNode) {\r\n\t\t\tcontext[\"rootNode\"] = {\r\n\t\t\t\tid: rootNode.getId(),\r\n\t\t\t\ttype: rootNode.getType(),\r\n\t\t\t\tname: rootNode.getName(),\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tEditor.consolePanel.onLog({\r\n\t\t\ttype: type,\r\n\t\t\torigin: \"editor\",\r\n\t\t\tmessage: `\${dateTime} \${message}`,\r\n\t\t\tcontext: context,\r\n\t\t\terror: error,\r\n\t\t\tstackTrace: stackTrace\r\n\t\t});\r\n\t}\r\n\r\n\tstatic _getSolutionAbsolutePathKey(solution) {\r\n\t\treturn solution.name + \"_\" + solution.filePath;\r\n\t}\r\n\r\n\tstatic _getSolutionAbsolutePath(solution) {\r\n\t\treturn window.localStorage.getItem(this._getSolutionAbsolutePathKey(solution));\r\n\t}\r\n}\r\n\n",
  "editor.css":
      ":root {\r\n\t--highlight-color: #e5c519;\r\n\t--panel-background-color: #202124;\r\n\t--body-background-color: #121212;\r\n\t--placeholder-color: #aaa;\r\n}\r\n\r\n::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\r\n\tcolor: var(--placeholder-color);\r\n\topacity: 1; /* Firefox */\r\n}\r\n\r\n:-ms-input-placeholder { /* Internet Explorer 10-11 */\r\n\tcolor: var(--placeholder-color);\r\n}\r\n\r\n::-ms-input-placeholder { /* Microsoft Edge */\r\n\tcolor: var(--placeholder-color);\r\n}\r\n\r\n::-webkit-scrollbar {\r\n\twidth: 8px;\r\n\theight: 8px;\r\n\tcursor: pointer;\r\n}\r\n::-webkit-scrollbar-track {\r\n\tbackground: #00000022;\r\n}\r\n::-webkit-scrollbar-thumb {\r\n\tbackground: #ffffff11;\r\n}\r\n::-webkit-scrollbar-thumb:hover {\r\n\tbackground: #ffffff22;\r\n}\r\n::-webkit-scrollbar-corner {\r\n\tbackground: #00000022;\r\n}\r\n::-webkit-resizer { }\r\n\r\nhtml, body {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tmargin: 0;\r\n\tbackground-color: var(--body-background-color);\r\n\tfont-family: sans-serif;\r\n\tcolor: #999;\r\n}\r\n\r\nrow {\r\n\tdisplay: flex;\r\n\tflex-flow: row;\r\n}\r\ncolumn {\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n}\r\nwrap {\r\n\tdisplay: flex;\r\n\tflex-flow: wrap;\r\n}\r\ngrid {\r\n\tdisplay: grid;\r\n}\r\nlabel {\r\n\tcolor: #dcdcdc;\r\n}\r\nselect:focus-visible, input:focus-visible:not([type=\"file\" i], [type=\"image\" i], [type=\"checkbox\" i], [type=\"radio\" i]) {\r\n\toutline-color: var(--highlight-color);\r\n\toutline-color: #dcdcdc;\r\n    outline-offset: 0;\r\n    outline-style: solid;\r\n\toutline-width: thin;\r\n}\r\n\r\n.show {\r\n\tvisibility: visible;\r\n\topacity: 1;\r\n\ttransition: visibility 0s linear 0s, opacity 300ms;\r\n}\r\n.hide {\r\n\tvisibility: hidden;\r\n\topacity: 0;\r\n\tdisplay: none;\r\n\ttransition: visibility 0s linear 300ms, opacity 300ms;\r\n}\r\n.hidden {\r\n\tdisplay: none;\r\n}\r\n\r\n.content {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n}\r\n\r\n.toolbar {\r\n\tdisplay: flex;\r\n\twidth: 100%;\r\n\tbackground-color: var(--highlight-color);\r\n}\r\n.toolbar-separator {\r\n\tmargin-left: 5px;\r\n\tborder-left: solid 1px var(--body-background-color);\r\n}\r\n.toolbar-item {\r\n\tcolor: var(--body-background-color);\r\n\tmargin: 3px;\r\n\tpadding: 5px;\r\n\tcursor: pointer;\r\n}\r\n.toolbar-item:hover {\r\n\tborder-radius: 50%;\r\n\tbackground-color: #00000022;\r\n}\r\n.toolbar-filler {\r\n\twidth: 100%;\r\n\talign-self: center;\r\n\ttext-align: right;\r\n}\r\n.toolbar-solution-name {\r\n\tfont-size: larger;\r\n\tfont-weight: bold;\r\n\tcolor: var(--body-background-color);\r\n\tpadding-right: 10px;\r\n}\r\n.toolbar input, .toolbar select {\r\n\theight: 27px;\r\n\tfont-size: small;\r\n    color: #dcdcdc;\r\n\tbackground-color: var(--body-background-color);\r\n\tborder: 0;\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n\talign-self: center;\r\n}\r\n\r\n.panels {\r\n\tflex: 1;\r\n\theight: 100%;\r\n\tgap: 7px;\r\n\tpadding: 6px;\r\n\toverflow: hidden;\r\n}\r\n\r\n.collapsible-tabs {\r\n\t--panel-width: 300px;\r\n\tposition: relative;\r\n}\r\n.collapsible-tabs-buttons {\r\n\t--hPadding: 12px;\r\n\t--vPadding: 20px;\r\n\tgap: 30px;\r\n\tpadding: var(--vPadding) var(--hPadding);\r\n\tborder-radius: 6px;\r\n\tbackground-color: var(--panel-background-color);\r\n}\r\n.collapsible-tabs-bottom-buttons {\r\n\tgap: 30px;\r\n\tposition: absolute;\r\n\tbottom: calc(var(--vPadding) / 2);\r\n}\r\n.collapsible-tabs-button, .collapsible-tabs-toggler {\r\n\tcolor: #aaa;\r\n\tcursor: pointer;\r\n}\r\n.collapsible-tabs-toggler {\r\n\t\r\n}\r\n.collapsible-tabs-button:hover, .collapsible-tabs-toggler:hover {\r\n\tcolor: #dcdcdc;\r\n}\r\n.collapsible-tabs-button-selected, .collapsible-tabs-button-selected:hover {\r\n\tcolor: var(--highlight-color);\r\n\tcursor: default;\r\n}\r\n.collapsible-tabs-panels {\r\n\twidth: var(--panel-width);\r\n\tborder-radius: 6px;\r\n\tbackground-color: var(--panel-background-color);\r\n\toverflow-x: hidden;\r\n\toverflow-y: auto;\r\n}\r\n.collapsible-tabs-panel {\r\n\r\n}\r\n.collapsible-tabs-collapsed {\r\n\t\r\n}\r\n\r\n.collapsible-tabs-collapsed > .collapsible-tabs-panels {\r\n    display: none;\r\n\twidth: fit-content;\r\n    min-width: var(--panel-width);\r\n\tmax-height: 100%;\r\n\t/* border-top-right-radius: 6px;\r\n    border-bottom-right-radius: 6px; */\r\n    /* background-color: var(--panel-background-color); */\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\r\n    position: absolute;\r\n    z-index: 2;\r\n}\r\n.collapsible-tabs-collapsed:hover > .collapsible-tabs-panels {\r\n\tdisplay: initial;\r\n}\r\n\r\n\r\n\r\n\r\n.explorer-tabs {\r\n\t--panel-width: 280px;\r\n}\r\n.explorer-tabs > .collapsible-tabs-buttons,\r\n.explorer-tabs.collapsible-tabs-collapsed:hover > .collapsible-tabs-buttons {\r\n\tmargin-right: 1px;\r\n\tborder-top-right-radius: 0;\r\n\tborder-bottom-right-radius: 0;\r\n}\r\n.explorer-tabs > .collapsible-tabs-panels {\r\n\tborder-top-left-radius: 0;\r\n\tborder-bottom-left-radius: 0;\r\n}\r\n.explorer-tabs.collapsible-tabs-collapsed > .collapsible-tabs-buttons {\r\n\tborder-radius: 6px;\r\n}\r\n.explorer-tabs.collapsible-tabs-collapsed > .collapsible-tabs-panels {\r\n\tleft: 49px;\r\n\theight: 100%;\r\n    box-shadow: 5px 0 10px rgba(0, 0, 0, 0.5);\r\n}\r\n.explorer-tabs.collapsible-tabs-collapsed .collapsible-tabs-toggler::after {\r\n\tcontent: \"chevron_right\";\r\n}\r\n.explorer-tabs .collapsible-tabs-toggler::after {\r\n\tcontent: \"chevron_left\";\r\n}\r\n\r\n.config-tabs {\r\n\t--panel-width: 400px;\r\n}\r\n.config-tabs > .collapsible-tabs-buttons,\r\n.config-tabs.collapsible-tabs-collapsed:hover > .collapsible-tabs-buttons {\r\n\tmargin-left: 1px;\r\n\tborder-top-left-radius: 0;\r\n\tborder-bottom-left-radius: 0;\r\n}\r\n.config-tabs > .collapsible-tabs-panels {\r\n\tborder-top-right-radius: 0;\r\n\tborder-bottom-right-radius: 0;\r\n}\r\n.config-tabs.collapsible-tabs-collapsed > .collapsible-tabs-buttons {\r\n\tborder-radius: 6px;\r\n}\r\n.config-tabs.collapsible-tabs-collapsed > .collapsible-tabs-panels {\r\n\tright: 49px;\r\n\theight: 100%;\r\n\tbox-shadow: -5px 0 10px rgba(0, 0, 0, 0.5);\r\n}\r\n.config-tabs.collapsible-tabs-collapsed .collapsible-tabs-toggler::after {\r\n\tcontent: \"chevron_left\";\r\n}\r\n.config-tabs .collapsible-tabs-toggler::after {\r\n\tcontent: \"chevron_right\";\r\n}\r\n\r\n\r\n\r\n.solution-panel {\r\n\tpadding: 5px 0;\r\n}\r\n.solution-panel-addnode-action {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tcolor: #666;\r\n\ttext-align: center;\r\n\tpadding: 15px 10px;\r\n\tcursor: pointer;\r\n}\r\n.solution-panel-addnode-action:hover {\r\n\tbackground-color: #00000033;\r\n}\r\n.solution-panel-addnode-action-label {\r\n\tfont-size: small;\r\n\tpadding-left: 5px;\r\n\tcursor: pointer;\r\n}\r\n.solution-panel-item-solution {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tfont-size: small;\r\n\tfont-weight: bold;\r\n\t/* color: var(--highlight-color); */\r\n\tpadding: 5px;\r\n\tposition: relative;\r\n}\r\n.solution-panel-item-solution .screen-panel-item-toggler {\r\n\tcursor: pointer;\r\n}\r\n.solution-panel-item-solution .solution-panel-item-name {\r\n\tflex: 1;\r\n\tpadding-left: 0;\r\n}\r\n.solution-panel-item {\r\n\tgap: 5px;\r\n\talign-items: center;\r\n\tfont-size: small;\r\n\tcolor: #999;\r\n\twhite-space: nowrap;\r\n\tpadding: 8px 15px;\r\n\tposition: relative;\r\n\tcursor: pointer;\r\n}\r\n.solution-panel-item:hover, .solution-panel-item:hover > .solution-panel-item-actions {\r\n\tbackground-color: var(--body-background-color);\r\n}\r\n.solution-panel-item-folder {\r\n\tdisplay: flex;\r\n    align-items: center;\r\n}\r\n.solution-panel-item-folder .screen-panel-item-toggler {\r\n\tcursor: pointer;\r\n}\r\n.solution-panel-item-folder .solution-panel-item {\r\n\tflex: 1;\r\n\tgap: 10px;\r\n\tcolor: #777;\r\n\tpadding-left: 0;\r\n\tcursor: default;\r\n}\r\n.solution-panel-item-folder > .solution-panel-item:hover { background-color: transparent; }\r\n.solution-panel-item-folder > .solution-panel-item:hover > .solution-panel-item-actions { background-color: var(--panel-background-color); }\r\n.solution-panel-item-icon {\r\n\tfont-size: 18px !important;\r\n\tvertical-align: middle;\r\n}\r\n.solution-panel-item-name {\r\n\tflex: 1;\r\n\tvertical-align: middle;\r\n}\r\n.solution-panel-solution-name {\r\n\tcolor: #dcdcdc;\r\n\tcursor: default;\r\n}\r\n.solution-panel-item-holder {\r\n\tpadding-left: 10px;\r\n}\r\n\r\n.solution-panel-item-selected {\r\n\tcolor: var(--highlight-color);\r\n}\r\n\r\n.solution-panel-no-entries{\r\n\tcolor: #aaa;\r\n\tfont-size: small;\r\n\ttext-align: center;\r\n\tmargin: 10px;\r\n\tpadding: 10px;\r\n\tborder: 1px dashed #aaa;\r\n\tborder-radius: 6px;\r\n}\r\n.solution-panel-no-entries:hover {\r\n\tcolor: #dcdcdc;\r\n\tcursor: pointer;\r\n}\r\n\r\n\r\n#widget-panel {\r\n\tgap: 5px;\r\n}\r\n.widget-panel-category {\r\n    align-items: stretch;\r\n\tpadding: 5px;\r\n\toverflow: hidden;\r\n}\r\n.widget-panel-category-header {\r\n\talign-items: center;\r\n\tcolor: #dcdcdc;\r\n\tline-height: 1;\r\n\tpadding: 3px 0;\r\n}\r\n.widget-panel-category-header:hover {\r\n\tcolor: var(--highlight-color);\r\n\tcursor: pointer;\r\n}\r\n.widget-panel-category-header > span {\r\n\tflex: 1;\r\n\tfont-size: small;\r\n\ttext-transform: capitalize;\r\n}\r\n.widget-panel-category-header::after {\r\n\tcontent: \"expand_more\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n}\r\n.widget-panel-category-collapsed > .widget-panel-category-header::after {\r\n\tcontent: \"expand_less\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n}\r\n.widget-panel-category-items {\r\n\tgrid-template-columns: 1fr 1fr 1fr;\r\n    row-gap: 10px;\r\n\tcolumn-gap: 10px;\r\n}\r\n.widget-panel-category-collapsed > .widget-panel-category-items {\r\n\tdisplay: none;\r\n}\r\n.widget-panel-category-item {\r\n\tgap: 3px;\r\n\talign-items: stretch;\r\n\ttext-align: center;\r\n\tpadding: 5px;\r\n\tborder-radius: 6px;\r\n\tborder: 1px solid #444;\r\n\toverflow: hidden;\r\n}\r\n.widget-panel-category-item > span {\r\n\tfont-size: 11px;\r\n\ttext-transform: capitalize;\r\n\ttext-overflow: ellipsis;\r\n\toverflow: hidden;\r\n}\r\n.widget-panel-category-item:hover {\r\n\tcolor: #dcdcdc;\r\n\tcursor: pointer;\r\n}\r\n\r\n\r\n\r\n.designer-panel {\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tborder-radius: 6px;\r\n\tbackground-color: var(--panel-background-color);\r\n\toverflow: hidden;\r\n}\r\n\r\n\r\n.screen-holder {\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tflex-flow: row;\r\n\theight: 100%;\r\n\toverflow: auto;\r\n}\r\n.flutter-panel {\r\n\tflex: 1;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n}\r\n.flutter-panel-toolbar {\r\n\tflex: 1;\r\n\ttext-align: right;\r\n\tvertical-align: middle;\r\n}\r\n.flutter-panel-toolbar span {\r\n\tcolor: #999;\r\n}\r\n.flutter-panel-toolbar span:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.flutter-panel-toolbar input {\r\n\twidth: 50px;\r\n}\r\n.flutter-panel-toolbar select {\r\n\twidth: 100px;\r\n}\r\n.flutter-panel-toolbar input, .flutter-panel-toolbar select {\r\n\tfont-size: small;\r\n    color: #dcdcdc;\r\n    border: 0;\r\n    border-radius: 4px;\r\n    background-color: #555;\r\n    padding: 3px;\r\n\tvertical-align: super;\r\n}\r\n.flutter-panel iframe {\r\n\t/* flex: 1; */\r\n\tborder: 0;\r\n\talign-self: center;\r\n}\r\n\r\n.screen-panel {\r\n\tmin-width: 290px;\r\n\tpadding: 10px;\r\n    overflow: auto;\r\n\tborder-right: 1px solid var(--body-background-color);\r\n}\r\n.screen-panel-root {\r\n\tfont-size: small;\r\n\tgap: 15px;\r\n\tpadding: 10px;\r\n}\r\n.screen-panel-root-message {\r\n\tpadding: 5px 0;\r\n}\r\n.screen-panel-root-select {\r\n    text-align: center;\r\n\ttext-transform: capitalize;\r\n\tpadding: 7px;\r\n\tborder: 1px solid;\r\n\tborder-radius: 6px;\r\n\tcursor: pointer;\r\n}\r\n.screen-panel-root-select:hover {\r\n\tcolor: #dcdcdc;\r\n}\r\n.screen-panel-item {\r\n\tfont-size: 14px;\r\n\tcolor: #999;\r\n\tdisplay: flex;\r\n    flex-direction: row;\r\n\talign-items: center;\r\n\tpadding: 3px 0;\r\n\tcursor: pointer;\r\n\tposition: relative;\r\n}\r\n.screen-panel-item-toggler {\r\n\twidth: 25px;\r\n\tcolor: #666;\r\n\tfont-size: 16px !important;\r\n\tvertical-align: middle;\r\n\tz-index: 1;\r\n}\r\n.screen-panel-item-toggler:hover {\r\n\tcolor: #999;\r\n}\r\n.screen-panel-item-icon {\r\n\tfont-size: 18px !important;\r\n\tvertical-align: middle;\r\n\tpadding-right: 5px;\r\n}\r\n.screen-panel-item-name {\r\n\tdisplay: flex;\r\n    flex-flow: column;\r\n}\r\n.screen-panel-item-title {\r\n\tfont-size: smaller;\r\n\ttext-transform: capitalize;\r\n}\r\n.screen-panel-item-subtitle {\r\n\tcolor: #666;\r\n\tfont-size: x-small;\r\n\ttext-transform: capitalize;\r\n}\r\n.screen-panel-item:hover .screen-panel-item-name,\r\n.screen-panel-item-selected .screen-panel-item-name {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.screen-panel-item-children {\r\n\tmargin-left: 3px;\r\n\tpadding-left: 8px;\r\n\tborder-left: 1px solid transparent;\r\n\tborder-bottom: 1px solid transparent;\r\n\tborder-bottom-left-radius: 4px;\r\n}\r\n.screen-panel-item:hover + .screen-panel-item-children {\r\n\tborder-color: var(--highlight-color);\r\n}\r\n.solution-panel-item:hover .solution-panel-item-actions,\r\n.solution-panel-item-selected .solution-panel-item-actions,\r\n.screen-panel-item:hover .screen-panel-item-actions,\r\n.screen-panel-item-selected .screen-panel-item-actions {\r\n\topacity: 1;\r\n}\r\n.solution-panel-item-actions,\r\n.screen-panel-item-actions {\r\n\t/* width: 100%; */\r\n\t/* height: 100%;\r\n\ttop: 0; */\r\n\tright: 0;\r\n\tposition: absolute;\r\n\tpadding-left: 10px;\r\n\tpadding-right: 5px;\r\n\tdisplay: flex;\r\n\tgap: 5px;\r\n\talign-items: center;\r\n\tjustify-content: flex-end;\r\n\topacity: 0;\r\n\tbackground-color: var(--panel-background-color);\r\n}\r\n.solution-panel-item-action,\r\n.screen-panel-item-action,\r\n.flow-panel-action-actions-item {\r\n\tfont-size: 18px !important;\r\n\tcursor: pointer;\r\n\t/* border-radius: 50%; */\r\n}\r\n.solution-panel-item-action:hover,\r\n.screen-panel-item-action:hover,\r\n.flow-panel-action-actions-item:hover {\r\n\tcolor: var(--highlight-color);\r\n\t/* background-color: #555; */\r\n}\r\n.screen-panel-drop-zones {\r\n\tgap: 3px;\r\n\theight: 0;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n    right: 0;\r\n    border-radius: 4px;\r\n    background: var(--body-background-color);\r\n\toverflow: hidden;\r\n\tz-index: 100;\r\n}\r\n.screen-panel-drop-zone {\r\n\tfont-size: 12px;\r\n\ttext-transform: capitalize;\r\n\tpadding: 2px 5px;\r\n}\r\n.screen-panel-drop-zone-over {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.screen-panel-drop-separator {\r\n\t--color: #999;\r\n\t--border-width: 0;\r\n}\r\n.screen-panel-drop-separator > div {\r\n\tborder-top: var(--border-width) dashed var(--color);\r\n\tpointer-events: none;\r\n}\r\n.screen-panel-drop-separator-over {\r\n\t--color: var(--highlight-color);\r\n}\r\n\r\n.flow-panel-grid-holder {\r\n\twidth: 100%;\r\n}\r\n.flow-panel-nodeInfo {\r\n\tcolor: #dcdcdc;\r\n\ttext-transform: capitalize;\r\n\tpadding: 5px;\r\n\tpadding-top: 10px;\r\n\tbackground-color: var(--body-background-color);\r\n\tcursor: pointer;\r\n}\r\n.flow-panel-nodeInfo:hover, .flow-panel-nodeInfo-selected {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.flow-panel-rootAction-holder {\r\n\twidth: 100%;\r\n\tborder-bottom: 1px solid var(--body-background-color);\r\n}\r\n.flow-panel-rootAction-name {\r\n\tfont-size: small;\r\n\twhite-space: nowrap;\r\n    overflow: hidden;\r\n    vertical-align: middle;\r\n\tpadding: 5px 10px;\r\n}\r\n.flow-panel-rootAction-add {\r\n\tmargin-left: 10px;\r\n\tvertical-align: middle;\r\n\tcursor: pointer;\r\n}\r\n.flow-panel-rootAction-add:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.flow-panel-action-holder {\r\n\twidth: 100px;\r\n\theight: 100px;\r\n\tposition: absolute;\r\n\tbackground-color: var(--body-background-color);\r\n    border: solid 3px #777;\r\n\tborder-radius: 4px;\r\n\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);\r\n\tz-index: 2;\r\n}\r\n.flow-panel-action-property {\r\n    font-size: 11px;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n\tpadding: 5px;\r\n}\r\n.flow-panel-action-gridHolder {\r\n\toverflow-x: auto;\r\n\toverflow-y: clip;\r\n}\r\n.flow-panel-action-gridHolder .flow-panel-action-grid {\r\n\tmargin: 20px;\r\n}\r\n.flow-panel-action-actions-holder {\r\n\tposition: absolute;\r\n    right: 0;\r\n    top: -24px;\r\n\tdisplay: none;\r\n}\r\n.flow-panel-action-holder:hover > .flow-panel-action-actions-holder,\r\n.flow-panel-actionHolder-selected > .flow-panel-action-actions-holder {\r\n\tdisplay: block;\r\n}\r\n\r\n\r\n.navigation-panel,\r\n.flow-panel {\r\n\t--border-color: #777;\r\n\tflex: 1;\r\n    height: 100%;\r\n}\r\n.navigation-panel-grid,\r\n.flow-panel-action-grid {\r\n\tmargin: 40px;\r\n\tposition: relative;\r\n}\r\n.navigation-panel-grid-svg,\r\n.flow-panel-action-grid-svg {\r\n\toverflow: visible;\r\n\tposition: absolute;\r\n}\r\n.navigation-panel-grid-svg-selected,\r\n.flow-panel-action-grid-svg-selected {\r\n\tz-index: 1;\r\n}\r\n.navigation-panel-grid-svg-selected > .navigation-panel-grid-line,\r\n.flow-panel-action-grid-svg-selected > .flow-panel-action-grid-line {\r\n\tstroke: var(--highlight-color);\r\n}\r\n.navigation-panel-grid-line,\r\n.flow-panel-action-grid-line {\r\n\tstroke: #555;\r\n\tstroke-width: 2;\r\n\tfill: none;\r\n}\r\n.navigation-panel-screenHolder {\r\n\twidth: 130px;\r\n    height: 200px;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n    position: absolute;\r\n\tbackground-color: var(--body-background-color);\r\n    border: solid 3px var(--border-color);\r\n    border-top-width: 10px;\r\n    border-bottom-width: 30px;\r\n\tborder-radius: 4px;\r\n\tbox-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);\r\n\tz-index: 2;\r\n}\r\n.navigation-panel-screenHolder:hover {\r\n\tborder-color: var(--border-color);\r\n}\r\n.navigation-panel-screenHolder-KActionShowDialog {\r\n\t--border-color: #555;\r\n\tborder-width: 1px;\r\n    height: 150px;\r\n}\r\n.navigation-panel-screenHolder-KActionShowDialog .navigation-panel-screenName {\r\n\ttext-align: left;\r\n}\r\n.navigation-panel-screenHolder-KActionShowDialog .navigation-panel-childHolder {\r\n\tborder-bottom: 1px solid var(--border-color);;\r\n}\r\n.navigation-panel-screenHolder-KActionShowDialog .navigation-panel-decoration {\r\n\twidth: 1px;\r\n    height: 25px;\r\n    margin-left: 50%;\r\n    background-color: var(--border-color);\r\n}\r\n.navigation-panel-screenHolder-selected, .navigation-panel-screenHolder-selected:hover,\r\n.flow-panel-actionHolder-selected, .flow-panel-actionHolder-selected:hover {\r\n\tborder-color: var(--highlight-color);\r\n}\r\n.navigation-panel-screenName,\r\n.flow-panel-actionName {\r\n\tcolor: #dcdcdc;\r\n    font-size: small;\r\n    text-align: center;\r\n\twhite-space: nowrap;\r\n    overflow: hidden;\r\n\tpadding: 5px;\r\n    border-bottom: 1px solid var(--border-color);\r\n}\r\n.navigation-panel-childHolder {\r\n\tflex: 1;\r\n\toverflow-y: auto;\r\n\toverflow-x: hidden;\r\n}\r\n.navigation-panel-widget-holder {\r\n\tflex: 1;\r\n\tpadding: 5px;\r\n\tcolor: #dcdcdc;\r\n\tcursor: pointer;\r\n}\r\n.navigation-panel-widget-holder:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.navigation-panel-widget-name {\r\n\tfont-size: 11px;\r\n\twhite-space: nowrap;\r\n\ttext-overflow: ellipsis;\r\n}\r\n.navigation-panel-widget-event {\r\n\tcolor: #999;\r\n\tfont-size: 10px;\r\n\twhite-space: nowrap;\r\n\ttext-overflow: ellipsis;\r\n}\r\n\r\n\r\n.editor-panel {\r\n\twidth: 400px;\r\n\theight: 100%;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n}\r\n\r\n.json-panel, .test-panel {\r\n\theight: 100%;\r\n\toverflow: hidden;\r\n}\r\n.json-panel-editor {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tborder: 0;\r\n\tmargin: 0;\r\n\tpadding: 0;\r\n\tfont-size: small;\r\n\tcolor: #999;\r\n\twhite-space: nowrap;\r\n\tbackground-color: transparent;\r\n}\r\n\r\n.property-panel,\r\n.action-panel {\r\n\theight: 100%;\r\n\toverflow: auto;\r\n}\r\n.property-panel-item-header,\r\n.action-panel-item-header {\r\n\twidth: 100%;\r\n\tdisplay: flex;\r\n\tjustify-content: right;\r\n\tcolor: #ccc;\r\n\tpadding: 10px 0;\r\n}\r\n.property-panel-item-header-type,\r\n.action-panel-item-header-type {\r\n\tfont-weight: bold;\r\n\ttext-align: right;\r\n\ttext-transform: capitalize;\r\n\talign-self: center;\r\n\tcolor: var(--highlight-color);\r\n\tpadding: 0 10px;\r\n}\r\n.property-panel-item-header-name,\r\n.action-panel-item-header-name {\r\n\tflex: 1;\r\n\tcolor: #dcdcdc;\r\n\tmargin-left: 10px;\r\n\tborder: 0;\r\n\tborder-radius: 4px;\r\n\tbackground-color: #555;\r\n\tpadding: 5px;\r\n}\r\n.property-panel-item-header-separator,\r\n.action-panel-item-header-separator {\r\n\tmargin: 20px 0;\r\n\tborder-bottom: 1px solid var(--body-background-color);\r\n}\r\n.property-panel-item-header-prop,\r\n.action-panel-item-header-prop {\r\n\tdisplay: flex;\r\n\tfont-size: small;\r\n\tcolor: #999;\r\n\tpadding: 5px 15px;\r\n}\r\n.property-panel-item-header-prop-name,\r\n.action-panel-item-header-prop-name {\r\n\talign-self: center;\r\n\tpadding-right: 10px;\r\n}\r\n.property-panel-item-header-prop-value,\r\n.action-panel-item-header-prop-value {\r\n\tflex: 1;\r\n\tcolor: #dcdcdc;\r\n\ttext-align: right;\r\n}\r\n.property-panel-item-header-prop select,\r\n.action-panel-item-header-prop select {\r\n\tborder: 0;\r\n\tborder-radius: 4px;\r\n\tbackground-color: #555;\r\n\tpadding: 0 5px;\r\n}\r\n.property-panel-item,\r\n.action-panel-item {\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\tflex-flow: row;\r\n\talign-items: center;\r\n\tpadding: 5px 10px;\r\n}\r\n.property-panel-subitem,\r\n.action-panel-subitem {\r\n\tmargin-left: 10px;\r\n\tborder: 1px solid #555;\r\n    border-top: none;\r\n    border-right: none;\r\n\tborder-bottom-left-radius: 6px;\r\n}\r\n.property-panel-item-name,\r\n.action-panel-item-name {\r\n\tflex: 1;\r\n\tfont-size: small;\r\n\tcolor: #999;\r\n\ttext-transform: capitalize;\r\n}\r\n.property-panel-item-name-filled,\r\n.action-panel-item-name-filled {\r\n\tcolor: #ccc;\r\n}\r\n.property-panel-item-value,\r\n.action-panel-item-value {\r\n\twidth: 100%;\r\n\tflex: 1;\r\n\tfont-size: small;\r\n\tcolor: #dcdcdc;\r\n\talign-items: center;\r\n\tbackground-color: #555;\r\n\tborder: 0;\r\n\tborder-radius: 4px;\r\n}\r\ntextarea.property-panel-item-value,\r\ntextarea.action-panel-item-value {\r\n\tfont-size: small;\r\n\theight: 200px;\r\n}\r\n.property-panel-item-expandable,\r\n.action-panel-item-expandable {\r\n\tflex: 1;\r\n\theight: 1em;\r\n\tfont-size: larger;\r\n\ttext-align: right;\r\n\tcolor: #dcdcdc;\r\n\tcursor: pointer;\r\n}\r\n.property-panel-table .property-panel-item-name {\r\n\ttext-transform: none;\r\n}\r\n.property-panel-item-delete {\r\n\tfont-size: 20px;\r\n\tcursor: pointer;\r\n}\r\n.property-panel-item-delete:hover {\r\n\tcolor: #e52919;\r\n}\r\n.property-panel-option-button {\r\n\tfont-size: 16px;\r\n\tcursor: pointer;\r\n}\r\n.property-panel-option-button:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n\r\n.footer-panel {\r\n\tmin-height: 25px;\r\n\tpadding: 0 6px;\r\n\toverflow: hidden;\r\n}\r\n\r\n.console-panel {\r\n\theight: 15px;\r\n\tgap: 15px;\r\n\tpadding: 5px;\r\n\tborder-top-left-radius: 6px;\r\n\tborder-top-right-radius: 6px;\r\n\tbackground-color: var(--panel-background-color);\r\n}\r\n.console-panel-logs {\r\n\tcolor: #777;\r\n\tfont-size: small;\r\n\toverflow: hidden;\r\n}\r\n.console-panel > .console-panel-toolbar {\r\n\tdisplay: none;\r\n}\r\n.console-panel:hover {\r\n\twidth: calc(100% - 22px);\r\n\theight: 50%;\r\n\tposition: absolute;\r\n\tbottom: 0;\r\n\tbox-shadow: 0 -2px 10px rgba(0, 0, 0, 0.5);\r\n\tz-index: 2;\r\n}\r\n.console-panel:hover > .console-panel-toolbar {\r\n\tdisplay: flex;\r\n}\r\n.console-panel:hover > .console-panel-logs {\r\n\tflex: 1;\r\n\toverflow: auto;\r\n}\r\n.console-panel-logLine {\r\n\talign-items: center;\r\n\tgap: 10px;\r\n\tpadding: 0 5px;\r\n\tcolor: #777;\r\n\tcursor: default;\r\n}\r\n.console-panel:hover > .console-panel-logs > .console-panel-logLine:hover {\r\n\tbackground-color: rgba(0, 0, 0, 0.2);\r\n}\r\n.console-panel:hover > .console-panel-logs > .console-panel-logLine-selected {\r\n\tbackground-color: rgba(0, 0, 0, 0.3);\r\n}\r\n.console-panel-logLine > span {\r\n\tflex: 1;\r\n\tfont-size: small;\r\n}\r\n.console-panel-logLine-info::before {\r\n\tcontent: \"info\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logLine-warn {\r\n\tcolor: darkgoldenrod;\r\n}\r\n.console-panel-logLine-warn::before {\r\n\tcontent: \"warning\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logLine-error {\r\n\tcolor: indianred;\r\n}\r\n.console-panel-logLine-error::before {\r\n\tcontent: \"report\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logLine-client::after {\r\n\tcontent: \"phone_iphone\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logLine-server::after {\r\n\tcontent: \"dns\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logLine-editor::after {\r\n\tcontent: \"edit\";\r\n\tfont-family: 'Material Symbols Outlined';\r\n\tfont-size: 14px;\r\n}\r\n.console-panel-logData {\r\n\tgap: 10px;\r\n    margin-left: 11px;\r\n\tpadding: 5px;\r\n\tpadding-left: 12px;\r\n\tborder: 1px solid #444;\r\n    border-top: none;\r\n    border-right: none;\r\n    border-bottom-left-radius: 6px;\r\n\t/* box-shadow: inset 0 0 10px rgba(0,0,0,0.5); */\r\n}\r\n.console-panel-logData > row {\r\n\tgap: 5px;\r\n}\r\n.console-panel-logData > row > .console-panel-logData-holder:not(:first-child) {\r\n\tborder-left: 1px solid rgba(0, 0, 0, 0.3);\r\n}\r\n.console-panel-logData-holder {\r\n\tflex: 1;\r\n\tpadding-left: 5px;\r\n}\r\n.console-panel-logData-name {\r\n\t\r\n}\r\n.console-panel-logData-value {\r\n\tgap: 5px;\r\n\talign-items: center;\r\n}\r\n.console-panel-logData-type {\r\n\tflex: 1;\r\n\tfont-size: 15px;\r\n    text-align: right;\r\n}\r\n.console-panel-logData-error {\r\n\tcolor: indianred;\r\n\tpadding-left: 5px;\r\n}\r\n.console-panel-toolbar {\r\n\tgap: 20px;\r\n\tpadding: 0 5px;\r\n}\r\n.console-panel-toolbar-buttons {\r\n\tgap: 5px;\r\n}\r\n.console-panel-toolbar-toggler {\r\n\tcolor: #555;\r\n\tfont-size: small;\r\n\tpadding: 1px 10px;\r\n\tborder-radius: 10px;\r\n\tborder: 1px solid;\r\n\tcursor: default;\r\n}\r\n.console-panel-toolbar-toggler-active {\r\n\tcolor: #999;\r\n}\r\n.console-panel-toolbar-button:hover {\r\n\tcolor: #dcdcdc;\r\n\tcursor: pointer;\r\n}\r\n.console-panel-toolbar-filters {\r\n\tflex: 1;\r\n}\r\n.console-panel-toolbar-search {\r\n\tgap: 5px;\r\n\twidth: 300px;\r\n}\r\n.console-panel-toolbar-search icon {\r\n\tfont-size: 18px;\r\n\talign-self: center;\r\n}\r\n.console-panel-toolbar-search input {\r\n\tflex: 1;\r\n\tfont-size: small;\r\n    color: #dcdcdc;\r\n\tpadding: 0 5px;\r\n\tborder: 0;\r\n    border-radius: 4px;\r\n    background-color: #555;\r\n}\r\n.console-panel-hide-info .console-panel-level-info,\r\n.console-panel-hide-warn .console-panel-level-warn,\r\n.console-panel-hide-error .console-panel-level-error,\r\n.console-panel-hide-editor .console-panel-origin-editor,\r\n.console-panel-hide-server .console-panel-origin-server,\r\n.console-panel-hide-client .console-panel-origin-client,\r\n.console-panel-hidden {\r\n\tdisplay: none;\r\n}\r\n\r\n\r\n#designer-tab-items {\r\n\theight: 40px;\r\n}\r\n.tab-item-holder {\r\n\tgap: 10px;\r\n    padding: 0 10px;\r\n    border-bottom: 1px solid var(--body-background-color);\r\n}\r\n.tab-item {\r\n\tfont-size: small;\r\n\tcolor: #8b8b8b;\r\n\tcursor: pointer;\r\n\tgap: 5px;\r\n\talign-items: center;\r\n\tpadding: 5px 10px;\r\n\tborder-bottom: 1px solid transparent;\r\n\t/* border-top-left-radius: 6px;\r\n\tborder-top-right-radius: 6px; */\r\n}\r\n.tab-item > icon {\r\n\tfont-size: 19px;\r\n}\r\n.tab-item-selected {\r\n\tcolor: #dcdcdc;\r\n\tborder-color: #dcdcdc;\r\n\t/* background-color: var(--panel-background-color); */\r\n}\r\n.tab-panel-holder {\r\n\tdisplay: flex;\r\n\tflex: 1;\r\n\toverflow: auto;\r\n}\r\n.tab-panel {\r\n\twidth: 100%;\r\n}\r\n.tab-panel-invisible {\r\n\tdisplay: none;\r\n}\r\n\r\n\r\n.modal-background {\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tbackground-color: #00000066;\r\n\tz-index: 10;\r\n}\r\n\r\n.modal-form {\r\n\tmargin: auto;\r\n\tmargin-top: 15%;\r\n\twidth: fit-content;\r\n\tmin-width: 300px;\r\n\tmax-height: 50%;\r\n\tdisplay: flex;\r\n\tflex-flow: column;\r\n\tgap: 25px;\r\n\tborder-radius: 6px;\r\n\tpadding: 20px;\r\n\tbackground-color: var(--panel-background-color);\r\n\tbox-shadow: 2px 0 10px black;\r\n\toverflow: auto;\r\n\tposition: relative;\r\n}\r\n.modal-form-title {\r\n\talign-items: center;\r\n\tcolor: var(--highlight-color);\r\n\tfont-size: large;\r\n}\r\n.modal-form-title > span { flex: 1; }\r\n.modal-form-content {\r\n\toverflow: auto;\r\n}\r\n.modal-form-close-button {\r\n\tcolor: #999;\r\n\tcursor: pointer;\r\n\tfloat: right;\r\n}\r\n.modal-form-close-button:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.modal-form-content-label {\r\n\tfont-size: small !important;\r\n\tpadding-right: 10px;\r\n}\r\n.modal-form-content-input {\r\n\twidth: 300px;\r\n}\r\n.modal-form-content row {\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n}\r\n.modal-form-content label {\r\n\tflex: 1;\r\n\tfont-size: medium;\r\n\tpadding-right: 10px;\r\n}\r\n.modal-form-content input, .modal-form-content select, .modal-select input {\r\n\tfont-size: small;\r\n    color: #dcdcdc;\r\n\toutline: 1px solid #555;\r\n    border: 0;\r\n    border-radius: 4px;\r\n    background-color: #555;\r\n    padding: 3px;\r\n\tmargin: 4px 1px;\r\n\tflex: 1;\r\n}\r\n.modal-form-buttons {\r\n\tfont-size: medium;\r\n\ttext-align: right;\r\n\tpadding-top: 25px;\r\n}\r\n.modal-form-buttons span {\r\n\tcursor: pointer;\r\n\tpadding-left: 10px;\r\n}\r\n.modal-form-buttons span:hover {\r\n\tcolor: var(--highlight-color);\r\n}\r\n.modal-form-content-links {\r\n\tgap: 20px;\r\n\tpadding: 5px;\r\n}\r\n.modal-form-content-links > a {\r\n\tcolor: #999;\r\n\tfont-size: 14px;\r\n}\r\n\r\n.modal-select {\r\n\tgap: 10px;\r\n\twidth: fit-content;\r\n\tmax-height: 40%;\r\n\tpadding: 5px 0;\r\n\tborder-radius: 6px;\r\n\tbackground-color: var(--panel-background-color);\r\n\tbox-shadow: 0 0 10px black;\r\n\tposition: absolute;\r\n}\r\n.modal-select-title {\r\n\tcolor: #dcdcdc;\r\n\tfont-size: small;\r\n\tpadding: 5px;\r\n}\r\n.modal-select > input {\r\n\tmargin: 0 5px;\r\n}\r\n.modal-select-options {\r\n\toverflow: auto;\r\n}\r\n.modal-option {\r\n\tfont-size: small;\r\n\ttext-transform: capitalize;\r\n\tcolor: #999;\r\n\tcursor: pointer;\r\n\tpadding: 5px 10px;\r\n}\r\n.modal-option:hover {\r\n\tcolor: var(--highlight-color);\r\n\tbackground-color: #00000033;\r\n}\r\n\r\n\r\n.table-container {\r\n\tflex: 1;\r\n\tborder: 0;\r\n\tfont-size: small;\r\n}\r\n.table-column-title {\r\n\tmin-width: 100px;\r\n}\r\n.table-column-title > * { vertical-align: middle;}\r\n.table-container th.table-column-title > icon {\r\n\tfont-size: 19px;\r\n\tmargin-left: 7px;\r\n}\r\n.table-container th.table-column-title > icon:hover { color: #e52919; }\r\n.table-container th > icon:hover {\r\n\tcolor: var(--highlight-color);\r\n\tcursor: pointer;\r\n}\r\n.table-row-title {\r\n\tpadding-right: 10px;\r\n}\r\n.table-row-delete { text-align: center; }\r\n.table-row-delete > icon {\r\n\tfont-size: 19px;\r\n\tcursor: pointer;\r\n}\r\n.table-row-delete:hover {\r\n\tcolor: #e52919;\r\n}\r\n.table-value {\r\n\t\r\n}\r\n.table-value input {\r\n\tfont-size: small;\r\n}\r\n\r\n\r\n\r\n.highlightedColor {\r\n\tcolor: var(--highlight-color);\r\n}\r\n\r\n.spinner-holder {\r\n\talign-items: center;\r\n}\r\n.spinner-holder > span {\r\n\t\r\n}\r\n.loader {\r\n\tcolor: #ffffff;\r\n\tfont-size: 10px;\r\n\tmargin: 50px auto;\r\n\twidth: 1em;\r\n\theight: 1em;\r\n\tborder-radius: 50%;\r\n\tposition: relative;\r\n\ttext-indent: -9999em;\r\n\t-webkit-animation: load4 1.3s infinite linear;\r\n\tanimation: load4 1.3s infinite linear;\r\n\t-webkit-transform: translateZ(0);\r\n\t-ms-transform: translateZ(0);\r\n\ttransform: translateZ(0);\r\n  }\r\n  @-webkit-keyframes load4 {\r\n\t0%,\r\n\t100% {\r\n\t  box-shadow: 0 -3em 0 0.2em, 2em -2em 0 0em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 0;\r\n\t}\r\n\t12.5% {\r\n\t  box-shadow: 0 -3em 0 0, 2em -2em 0 0.2em, 3em 0 0 0, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t25% {\r\n\t  box-shadow: 0 -3em 0 -0.5em, 2em -2em 0 0, 3em 0 0 0.2em, 2em 2em 0 0, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t37.5% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 0, 2em 2em 0 0.2em, 0 3em 0 0em, -2em 2em 0 -1em, -3em 0em 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t50% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 0em, 0 3em 0 0.2em, -2em 2em 0 0, -3em 0em 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t62.5% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 0, -2em 2em 0 0.2em, -3em 0 0 0, -2em -2em 0 -1em;\r\n\t}\r\n\t75% {\r\n\t  box-shadow: 0em -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0.2em, -2em -2em 0 0;\r\n\t}\r\n\t87.5% {\r\n\t  box-shadow: 0em -3em 0 0, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0, -2em -2em 0 0.2em;\r\n\t}\r\n  }\r\n  @keyframes load4 {\r\n\t0%,\r\n\t100% {\r\n\t  box-shadow: 0 -3em 0 0.2em, 2em -2em 0 0em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 0;\r\n\t}\r\n\t12.5% {\r\n\t  box-shadow: 0 -3em 0 0, 2em -2em 0 0.2em, 3em 0 0 0, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t25% {\r\n\t  box-shadow: 0 -3em 0 -0.5em, 2em -2em 0 0, 3em 0 0 0.2em, 2em 2em 0 0, 0 3em 0 -1em, -2em 2em 0 -1em, -3em 0 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t37.5% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 0, 2em 2em 0 0.2em, 0 3em 0 0em, -2em 2em 0 -1em, -3em 0em 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t50% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 0em, 0 3em 0 0.2em, -2em 2em 0 0, -3em 0em 0 -1em, -2em -2em 0 -1em;\r\n\t}\r\n\t62.5% {\r\n\t  box-shadow: 0 -3em 0 -1em, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 0, -2em 2em 0 0.2em, -3em 0 0 0, -2em -2em 0 -1em;\r\n\t}\r\n\t75% {\r\n\t  box-shadow: 0em -3em 0 -1em, 2em -2em 0 -1em, 3em 0em 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0.2em, -2em -2em 0 0;\r\n\t}\r\n\t87.5% {\r\n\t  box-shadow: 0em -3em 0 0, 2em -2em 0 -1em, 3em 0 0 -1em, 2em 2em 0 -1em, 0 3em 0 -1em, -2em 2em 0 0, -3em 0em 0 0, -2em -2em 0 0.2em;\r\n\t}\r\n  }\r\n  ",
  "editor.html":
      "<!DOCTYPE html>\r\n<html>\r\n<head>\r\n<script type=\"text/javascript\" src=\"editor.js\"></script>\n\t<title>Lowder Editor</title>\r\n\t<meta name=\"description\" content=\"Lowder Editor\" />\r\n\t<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\" />\r\n\t<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@48,400,0,0\" />\r\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"editor.css\" />\r\n\t<script>\r\n\t\twindow.onload = () => Editor.init();\r\n\t</script>\r\n</head>\r\n<body>\r\n\t<column class=\"content\">\r\n\t\t<row class=\"toolbar\">\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.showSettings()\" title=\"Solution settings\">settings</span>\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.saveSolution()\" title=\"Save Solution\">save</span>\r\n\t\t\t<div class=\"toolbar-separator\">&nbsp;</div>\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.editEnvironmentVariables()\" title=\"Environment Variables\">assignment</span>\r\n\t\t\t<select id=\"environmentSelect\" title=\"Select Environment\"></select>\r\n\t\t\t<div class=\"toolbar-separator\">&nbsp;</div>\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.editStringResources()\" title=\"Language Resources\">translate</span>\r\n\t\t\t<select id=\"languageSelect\" title=\"Select Language\"></select>\r\n\t\t\t<div class=\"toolbar-separator\">&nbsp;</div>\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.importSwagger()\" title=\"Import Swagger\">download</span>\r\n\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.showHelp()\" title=\"Helpful Links\">help</span>\r\n\t\t\t<div class=\"toolbar-filler\">\r\n\t\t\t\t<label id=\"toolbar-solution-name\" class=\"toolbar-solution-name\"></label>\r\n\t\t\t</div>\r\n\t\t</row>\r\n\t\t<row class=\"panels\">\r\n\t\t\t<row id=\"explorer-tabs\" class=\"explorer-tabs collapsible-tabs\">\r\n\t\t\t\t<column id=\"solution-tabs-buttons\" class=\"collapsible-tabs-buttons\">\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button collapsible-tabs-button-selected material-symbols-outlined\" title=\"Screens\" onclick=\"selectCollapsibleTab(event, 0)\">phone_iphone</span>\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Templates\" onclick=\"selectCollapsibleTab(event, 1)\">style</span>\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Components\" onclick=\"selectCollapsibleTab(event, 2)\">widgets</span>\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Requests\" onclick=\"selectCollapsibleTab(event, 3)\">cloud</span>\r\n\t\t\t\t\t<column class=\"collapsible-tabs-bottom-buttons\">\r\n\t\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Widget catalog\" onclick=\"selectCollapsibleTab(event, 4, true)\">widgets</span>\r\n\t\t\t\t\t\t<span id=\"solution-tabs-toggler\" class=\"collapsible-tabs-toggler material-symbols-outlined\" title=\"Toggle\" onclick=\"toggleCollapsibleTabs(event)\"></span>\r\n\t\t\t\t\t</column>\r\n\t\t\t\t</column>\r\n\t\t\t\t<div id=\"explorer-tabs-panels\" class=\"collapsible-tabs-panels\">\r\n\t\t\t\t\t<column id=\"solution-panel\" class=\"collapsible-tabs-panel solution-panel\"></column>\r\n\t\t\t\t\t<column id=\"template-panel\" class=\"collapsible-tabs-panel solution-panel hidden\"></column>\r\n\t\t\t\t\t<column id=\"component-panel\" class=\"collapsible-tabs-panel solution-panel hidden\"></column>\r\n\t\t\t\t\t<column id=\"type-panel\" class=\"collapsible-tabs-panel solution-panel hidden\"></column>\r\n\t\t\t\t\t<column id=\"widget-panel\" class=\"collapsible-tabs-panel solution-panel hidden\"></column>\r\n\t\t\t\t</div>\r\n\t\t\t</row>\r\n\t\t\t<column id=\"designer-panel\" class=\"designer-panel\">\r\n\t\t\t\t<row id=\"designer-tab-items\" class=\"tab-item-holder\">\r\n\t\t\t\t\t<row class=\"tab-item tab-item-selected\" onclick=\"tabClick('designer-tab-items', 'designer-tab-panels', 0)\">\r\n\t\t\t\t\t\t<icon class=\"material-symbols-outlined\">phone_iphone</icon>\r\n\t\t\t\t\t\t<span>Screen</span>\r\n\t\t\t\t\t</row>\r\n\t\t\t\t\t<row class=\"tab-item\" onclick=\"tabClick('designer-tab-items', 'designer-tab-panels', 1)\">\r\n\t\t\t\t\t\t<icon class=\"material-symbols-outlined\">account_tree</icon>\r\n\t\t\t\t\t\t<span>Actions</span>\r\n\t\t\t\t\t</row>\r\n\t\t\t\t\t<row class=\"tab-item\" onclick=\"tabClick('designer-tab-items', 'designer-tab-panels', 2)\">\r\n\t\t\t\t\t\t<icon class=\"material-symbols-outlined\">directions</icon>\r\n\t\t\t\t\t\t<span>Navigation</span>\r\n\t\t\t\t\t</row>\r\n\t\t\t\t\t<div id=\"flutter-panel-toolbar\" class=\"flutter-panel-toolbar\">\r\n\t\t\t\t\t\t<span class=\"toolbar-item material-symbols-outlined\" title=\"Rebuild Flutter client\" onclick=\"Editor.screenPanel.frameReload()\">construction</span>\r\n\t\t\t\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.screenPanel.frameFull()\">computer</span>\r\n\t\t\t\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.screenPanel.framePhone()\">phone_iphone</span>\r\n\t\t\t\t\t\t<span class=\"toolbar-item material-symbols-outlined\" onclick=\"Editor.screenPanel.frameTablet()\">tablet</span>\r\n\t\t\t\t\t\t<input type=\"number\" placeholder=\"width\" onchange=\"Editor.screenPanel.frameWidth(this.value)\"/>\r\n\t\t\t\t\t\t<input type=\"number\" placeholder=\"height\" onchange=\"Editor.screenPanel.frameHeight(this.value)\"/>\r\n\t\t\t\t\t\t<!-- <select onchange=\"Editor.setEditMode(this.value)\">\r\n\t\t\t\t\t\t\t<option value=\"false\">Test Mode</option>\r\n\t\t\t\t\t\t\t<option value=\"true\">Edit Mode</option>\r\n\t\t\t\t\t\t</select> -->\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</row>\r\n\t\t\t\t<div class=\"screen-holder\">\r\n\t\t\t\t\t<div id=\"screen-panel\" class=\"screen-panel\"></div>\r\n\t\t\t\t\t<div id=\"designer-tab-panels\" class=\"tab-panel-holder\">\r\n\t\t\t\t\t\t<div id=\"flutter-panel\" class=\"flutter-panel\">\r\n\t\t\t\t\t\t\t<iframe id=\"flutter-panel-frame\" width=\"100%\" height=\"100%\" src=\"/index.html\"></iframe>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"flow-panel\" class=\"flow-panel tab-panel-invisible\">\r\n\t\t\t\t\t\t\t<div id=\"flow-panel-grid-holder\" class=\"flow-panel-grid-holder\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div id=\"navigation-panel\" class=\"navigation-panel tab-panel-invisible\">\r\n\t\t\t\t\t\t\t<div id=\"navigation-panel-grid\" class=\"navigation-panel-grid\"></div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</column>\r\n\t\t\t<row id=\"config-tabs\" class=\"config-tabs collapsible-tabs\">\r\n\t\t\t\t<div id=\"config-tabs-panels\" class=\"collapsible-tabs-panels\">\r\n\t\t\t\t\t<div id=\"property-panel\" class=\"collapsible-tabs-panel property-panel\"></div>\r\n\t\t\t\t\t<div id=\"test-panel\" class=\"collapsible-tabs-panel test-panel hidden\"></div>\r\n\t\t\t\t\t<div id=\"json-panel\" class=\"collapsible-tabs-panel json-panel hidden\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<column id=\"config-tabs-buttons\" class=\"collapsible-tabs-buttons\">\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button collapsible-tabs-button-selected material-symbols-outlined\" title=\"Properties\" onclick=\"selectCollapsibleTab(event, 0)\">list</span>\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Mock Data\" onclick=\"selectCollapsibleTab(event, 1)\">bug_report</span>\r\n\t\t\t\t\t<span class=\"collapsible-tabs-button material-symbols-outlined\" title=\"Json\" onclick=\"selectCollapsibleTab(event, 2)\">data_object</span>\r\n\t\t\t\t\t<column class=\"collapsible-tabs-bottom-buttons\">\r\n\t\t\t\t\t\t<span id=\"config-tabs-toggler\" class=\"collapsible-tabs-toggler material-symbols-outlined\" title=\"Toggle\" onclick=\"toggleCollapsibleTabs(event)\"></span>\r\n\t\t\t\t\t</column>\r\n\t\t\t\t</column>\r\n\t\t\t</row>\r\n\t\t</row>\r\n\t\t<column class=\"footer-panel\">\r\n\t\t\t<column id=\"console-panel\" class=\"console-panel\">\r\n\t\t\t\t<row id=\"console-panel-toolbar\" class=\"console-panel-toolbar\"></row>\r\n\t\t\t\t<column id=\"console-panel-logs\" class=\"console-panel-logs\"></column>\r\n\t\t\t</column>\r\n\t\t</column>\r\n\t</column>\r\n</body>\r\n</html>\n"
};
